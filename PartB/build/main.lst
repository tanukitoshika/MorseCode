
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e8f0  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800e8f0  0c00e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  000209dc  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  000209dc  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  000209dc  2**0
                  CONTENTS
  6 .data         000009dc  20000000  0c00e8f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007b4  200009dc  0c00f2d4  000209dc  2**2
                  ALLOC
  8 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  9 DSRAM2_DATA   00000000  30000000  30000000  000209dc  2**0
                  CONTENTS
 10 DSRAM2_BSS    00000e00  30000000  0c00f2d4  00030000  2**2
                  ALLOC
 11 .stab         0000009c  00000000  00000000  000209dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .stabstr      0000014d  00000000  00000000  00020a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009d0  00000000  00000000  00020bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001ffb5  00000000  00000000  00021598  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000030fa  00000000  00000000  0004154d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009fcf  00000000  00000000  00044647  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003b3c  00000000  00000000  0004e618  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085b43  00000000  00000000  00052154  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000050c6  00000000  00000000  000d7c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000008b8  00000000  00000000  000dcd5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .build_attributes 00000ddc  00000000  00000000  000dd615  2**0
                  CONTENTS, READONLY
 22 .debug_macro  0001ce05  00000000  00000000  000de3f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	79 0b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     y...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	a9 0f 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e8f8 	.word	0x0c00e8f8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009dc 	.word	0x000009dc
 8000254:	0c00f2d4 	.word	0x0c00f2d4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00e8f8 	.word	0x0c00e8f8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00e8f8 	.word	0x0c00e8f8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009dc 	.word	0x200009dc
 800027c:	000007b4 	.word	0x000007b4
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08006c91 	.word	0x08006c91
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08007099 	.word	0x08007099
    ldr  r0, =main
 80002ac:	08000d39 	.word	0x08000d39

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800035e:	409a      	lsls	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	605a      	str	r2, [r3, #4]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	fa22 f303 	lsr.w	r3, r2, r3
 8000386:	f003 0301 	and.w	r3, r3, #1
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <ascii_to_morse>:
int32_t execution = 0;
uint32_t ticks = 0;
int length = 0;

void ascii_to_morse(char character)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
  switch (character)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3b20      	subs	r3, #32
 80003a6:	2b5a      	cmp	r3, #90	; 0x5a
 80003a8:	f200 83a9 	bhi.w	8000afe <ascii_to_morse+0x766>
 80003ac:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <ascii_to_morse+0x1c>)
 80003ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b2:	bf00      	nop
 80003b4:	080007b5 	.word	0x080007b5
 80003b8:	08000aff 	.word	0x08000aff
 80003bc:	08000aff 	.word	0x08000aff
 80003c0:	08000aff 	.word	0x08000aff
 80003c4:	08000aff 	.word	0x08000aff
 80003c8:	08000aff 	.word	0x08000aff
 80003cc:	08000aff 	.word	0x08000aff
 80003d0:	08000a6d 	.word	0x08000a6d
 80003d4:	08000a33 	.word	0x08000a33
 80003d8:	08000a51 	.word	0x08000a51
 80003dc:	08000aff 	.word	0x08000aff
 80003e0:	08000aa7 	.word	0x08000aa7
 80003e4:	0800098b 	.word	0x0800098b
 80003e8:	080009fb 	.word	0x080009fb
 80003ec:	0800096f 	.word	0x0800096f
 80003f0:	08000ac5 	.word	0x08000ac5
 80003f4:	080007cf 	.word	0x080007cf
 80003f8:	08000861 	.word	0x08000861
 80003fc:	0800087f 	.word	0x0800087f
 8000400:	0800089d 	.word	0x0800089d
 8000404:	080008bb 	.word	0x080008bb
 8000408:	080008d9 	.word	0x080008d9
 800040c:	080008f7 	.word	0x080008f7
 8000410:	08000915 	.word	0x08000915
 8000414:	08000933 	.word	0x08000933
 8000418:	08000951 	.word	0x08000951
 800041c:	080009a7 	.word	0x080009a7
 8000420:	080009c3 	.word	0x080009c3
 8000424:	08000aff 	.word	0x08000aff
 8000428:	08000a89 	.word	0x08000a89
 800042c:	08000aff 	.word	0x08000aff
 8000430:	080009df 	.word	0x080009df
 8000434:	08000ae3 	.word	0x08000ae3
 8000438:	08000521 	.word	0x08000521
 800043c:	08000537 	.word	0x08000537
 8000440:	08000551 	.word	0x08000551
 8000444:	0800056b 	.word	0x0800056b
 8000448:	08000585 	.word	0x08000585
 800044c:	0800059f 	.word	0x0800059f
 8000450:	080005b9 	.word	0x080005b9
 8000454:	080005d3 	.word	0x080005d3
 8000458:	080005ed 	.word	0x080005ed
 800045c:	08000603 	.word	0x08000603
 8000460:	0800061d 	.word	0x0800061d
 8000464:	08000637 	.word	0x08000637
 8000468:	08000651 	.word	0x08000651
 800046c:	08000667 	.word	0x08000667
 8000470:	0800067d 	.word	0x0800067d
 8000474:	08000697 	.word	0x08000697
 8000478:	080006b1 	.word	0x080006b1
 800047c:	080006cb 	.word	0x080006cb
 8000480:	080006e5 	.word	0x080006e5
 8000484:	080006ff 	.word	0x080006ff
 8000488:	08000719 	.word	0x08000719
 800048c:	08000733 	.word	0x08000733
 8000490:	0800074d 	.word	0x0800074d
 8000494:	08000767 	.word	0x08000767
 8000498:	08000781 	.word	0x08000781
 800049c:	0800079b 	.word	0x0800079b
 80004a0:	08000aff 	.word	0x08000aff
 80004a4:	08000aff 	.word	0x08000aff
 80004a8:	08000aff 	.word	0x08000aff
 80004ac:	08000aff 	.word	0x08000aff
 80004b0:	08000a17 	.word	0x08000a17
 80004b4:	08000aff 	.word	0x08000aff
 80004b8:	08000521 	.word	0x08000521
 80004bc:	08000537 	.word	0x08000537
 80004c0:	08000551 	.word	0x08000551
 80004c4:	0800056b 	.word	0x0800056b
 80004c8:	08000585 	.word	0x08000585
 80004cc:	0800059f 	.word	0x0800059f
 80004d0:	080005b9 	.word	0x080005b9
 80004d4:	080005d3 	.word	0x080005d3
 80004d8:	080005ed 	.word	0x080005ed
 80004dc:	08000603 	.word	0x08000603
 80004e0:	0800061d 	.word	0x0800061d
 80004e4:	08000637 	.word	0x08000637
 80004e8:	08000651 	.word	0x08000651
 80004ec:	08000667 	.word	0x08000667
 80004f0:	0800067d 	.word	0x0800067d
 80004f4:	08000697 	.word	0x08000697
 80004f8:	080006b1 	.word	0x080006b1
 80004fc:	080006cb 	.word	0x080006cb
 8000500:	080006e5 	.word	0x080006e5
 8000504:	080006ff 	.word	0x080006ff
 8000508:	08000719 	.word	0x08000719
 800050c:	08000733 	.word	0x08000733
 8000510:	0800074d 	.word	0x0800074d
 8000514:	08000767 	.word	0x08000767
 8000518:	08000781 	.word	0x08000781
 800051c:	0800079b 	.word	0x0800079b

    // letters

  case 'a':
  case 'A':
    strcat(code, ".- ");
 8000520:	48b2      	ldr	r0, [pc, #712]	; (80007ec <ascii_to_morse+0x454>)
 8000522:	f006 feed 	bl	8007300 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4bb0      	ldr	r3, [pc, #704]	; (80007ec <ascii_to_morse+0x454>)
 800052c:	4413      	add	r3, r2
 800052e:	4ab0      	ldr	r2, [pc, #704]	; (80007f0 <ascii_to_morse+0x458>)
 8000530:	6810      	ldr	r0, [r2, #0]
 8000532:	6018      	str	r0, [r3, #0]
    break;
 8000534:	e2f2      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'b':
  case 'B':
    strcat(code, "-... ");
 8000536:	48ad      	ldr	r0, [pc, #692]	; (80007ec <ascii_to_morse+0x454>)
 8000538:	f006 fee2 	bl	8007300 <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	4baa      	ldr	r3, [pc, #680]	; (80007ec <ascii_to_morse+0x454>)
 8000542:	4413      	add	r3, r2
 8000544:	4aab      	ldr	r2, [pc, #684]	; (80007f4 <ascii_to_morse+0x45c>)
 8000546:	6810      	ldr	r0, [r2, #0]
 8000548:	6018      	str	r0, [r3, #0]
 800054a:	8892      	ldrh	r2, [r2, #4]
 800054c:	809a      	strh	r2, [r3, #4]
    break;
 800054e:	e2e5      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'c':
  case 'C':
    strcat(code, "-.-. ");
 8000550:	48a6      	ldr	r0, [pc, #664]	; (80007ec <ascii_to_morse+0x454>)
 8000552:	f006 fed5 	bl	8007300 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4ba4      	ldr	r3, [pc, #656]	; (80007ec <ascii_to_morse+0x454>)
 800055c:	4413      	add	r3, r2
 800055e:	4aa6      	ldr	r2, [pc, #664]	; (80007f8 <ascii_to_morse+0x460>)
 8000560:	6810      	ldr	r0, [r2, #0]
 8000562:	6018      	str	r0, [r3, #0]
 8000564:	8892      	ldrh	r2, [r2, #4]
 8000566:	809a      	strh	r2, [r3, #4]
    break;
 8000568:	e2d8      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'd':
  case 'D':
    strcat(code, "-.. ");
 800056a:	48a0      	ldr	r0, [pc, #640]	; (80007ec <ascii_to_morse+0x454>)
 800056c:	f006 fec8 	bl	8007300 <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b9d      	ldr	r3, [pc, #628]	; (80007ec <ascii_to_morse+0x454>)
 8000576:	4413      	add	r3, r2
 8000578:	4aa0      	ldr	r2, [pc, #640]	; (80007fc <ascii_to_morse+0x464>)
 800057a:	6810      	ldr	r0, [r2, #0]
 800057c:	6018      	str	r0, [r3, #0]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	711a      	strb	r2, [r3, #4]
    break;
 8000582:	e2cb      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'e':
  case 'E':
    strcat(code, ". ");
 8000584:	4899      	ldr	r0, [pc, #612]	; (80007ec <ascii_to_morse+0x454>)
 8000586:	f006 febb 	bl	8007300 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b97      	ldr	r3, [pc, #604]	; (80007ec <ascii_to_morse+0x454>)
 8000590:	4413      	add	r3, r2
 8000592:	4a9b      	ldr	r2, [pc, #620]	; (8000800 <ascii_to_morse+0x468>)
 8000594:	8811      	ldrh	r1, [r2, #0]
 8000596:	7892      	ldrb	r2, [r2, #2]
 8000598:	8019      	strh	r1, [r3, #0]
 800059a:	709a      	strb	r2, [r3, #2]
    break;
 800059c:	e2be      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'f':
  case 'F':
    strcat(code, "..-. ");
 800059e:	4893      	ldr	r0, [pc, #588]	; (80007ec <ascii_to_morse+0x454>)
 80005a0:	f006 feae 	bl	8007300 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b90      	ldr	r3, [pc, #576]	; (80007ec <ascii_to_morse+0x454>)
 80005aa:	4413      	add	r3, r2
 80005ac:	4a95      	ldr	r2, [pc, #596]	; (8000804 <ascii_to_morse+0x46c>)
 80005ae:	6810      	ldr	r0, [r2, #0]
 80005b0:	6018      	str	r0, [r3, #0]
 80005b2:	8892      	ldrh	r2, [r2, #4]
 80005b4:	809a      	strh	r2, [r3, #4]
    break;
 80005b6:	e2b1      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'g':
  case 'G':
    strcat(code, "--. ");
 80005b8:	488c      	ldr	r0, [pc, #560]	; (80007ec <ascii_to_morse+0x454>)
 80005ba:	f006 fea1 	bl	8007300 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b8a      	ldr	r3, [pc, #552]	; (80007ec <ascii_to_morse+0x454>)
 80005c4:	4413      	add	r3, r2
 80005c6:	4a90      	ldr	r2, [pc, #576]	; (8000808 <ascii_to_morse+0x470>)
 80005c8:	6810      	ldr	r0, [r2, #0]
 80005ca:	6018      	str	r0, [r3, #0]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	711a      	strb	r2, [r3, #4]
    break;
 80005d0:	e2a4      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'h':
  case 'H':
    strcat(code, ".... ");
 80005d2:	4886      	ldr	r0, [pc, #536]	; (80007ec <ascii_to_morse+0x454>)
 80005d4:	f006 fe94 	bl	8007300 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b83      	ldr	r3, [pc, #524]	; (80007ec <ascii_to_morse+0x454>)
 80005de:	4413      	add	r3, r2
 80005e0:	4a8a      	ldr	r2, [pc, #552]	; (800080c <ascii_to_morse+0x474>)
 80005e2:	6810      	ldr	r0, [r2, #0]
 80005e4:	6018      	str	r0, [r3, #0]
 80005e6:	8892      	ldrh	r2, [r2, #4]
 80005e8:	809a      	strh	r2, [r3, #4]
    break;
 80005ea:	e297      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'i':
  case 'I':
    strcat(code, ".. ");
 80005ec:	487f      	ldr	r0, [pc, #508]	; (80007ec <ascii_to_morse+0x454>)
 80005ee:	f006 fe87 	bl	8007300 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <ascii_to_morse+0x454>)
 80005f8:	4413      	add	r3, r2
 80005fa:	4a85      	ldr	r2, [pc, #532]	; (8000810 <ascii_to_morse+0x478>)
 80005fc:	6810      	ldr	r0, [r2, #0]
 80005fe:	6018      	str	r0, [r3, #0]
    break;
 8000600:	e28c      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'j':
  case 'J':
    strcat(code, ".--- ");
 8000602:	487a      	ldr	r0, [pc, #488]	; (80007ec <ascii_to_morse+0x454>)
 8000604:	f006 fe7c 	bl	8007300 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b77      	ldr	r3, [pc, #476]	; (80007ec <ascii_to_morse+0x454>)
 800060e:	4413      	add	r3, r2
 8000610:	4a80      	ldr	r2, [pc, #512]	; (8000814 <ascii_to_morse+0x47c>)
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	6018      	str	r0, [r3, #0]
 8000616:	8892      	ldrh	r2, [r2, #4]
 8000618:	809a      	strh	r2, [r3, #4]
    break;
 800061a:	e27f      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'k':
  case 'K':
    strcat(code, "-.- ");
 800061c:	4873      	ldr	r0, [pc, #460]	; (80007ec <ascii_to_morse+0x454>)
 800061e:	f006 fe6f 	bl	8007300 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b71      	ldr	r3, [pc, #452]	; (80007ec <ascii_to_morse+0x454>)
 8000628:	4413      	add	r3, r2
 800062a:	4a7b      	ldr	r2, [pc, #492]	; (8000818 <ascii_to_morse+0x480>)
 800062c:	6810      	ldr	r0, [r2, #0]
 800062e:	6018      	str	r0, [r3, #0]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	711a      	strb	r2, [r3, #4]
    break;
 8000634:	e272      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'l':
  case 'L':
    strcat(code, ".-.. ");
 8000636:	486d      	ldr	r0, [pc, #436]	; (80007ec <ascii_to_morse+0x454>)
 8000638:	f006 fe62 	bl	8007300 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <ascii_to_morse+0x454>)
 8000642:	4413      	add	r3, r2
 8000644:	4a75      	ldr	r2, [pc, #468]	; (800081c <ascii_to_morse+0x484>)
 8000646:	6810      	ldr	r0, [r2, #0]
 8000648:	6018      	str	r0, [r3, #0]
 800064a:	8892      	ldrh	r2, [r2, #4]
 800064c:	809a      	strh	r2, [r3, #4]
    break;
 800064e:	e265      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'm':
  case 'M':
    strcat(code, "-- ");
 8000650:	4866      	ldr	r0, [pc, #408]	; (80007ec <ascii_to_morse+0x454>)
 8000652:	f006 fe55 	bl	8007300 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <ascii_to_morse+0x454>)
 800065c:	4413      	add	r3, r2
 800065e:	4a70      	ldr	r2, [pc, #448]	; (8000820 <ascii_to_morse+0x488>)
 8000660:	6810      	ldr	r0, [r2, #0]
 8000662:	6018      	str	r0, [r3, #0]
    break;
 8000664:	e25a      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'n':
  case 'N':
    strcat(code, "-. ");
 8000666:	4861      	ldr	r0, [pc, #388]	; (80007ec <ascii_to_morse+0x454>)
 8000668:	f006 fe4a 	bl	8007300 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <ascii_to_morse+0x454>)
 8000672:	4413      	add	r3, r2
 8000674:	4a6b      	ldr	r2, [pc, #428]	; (8000824 <ascii_to_morse+0x48c>)
 8000676:	6810      	ldr	r0, [r2, #0]
 8000678:	6018      	str	r0, [r3, #0]
    break;
 800067a:	e24f      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'o':
  case 'O':
    strcat(code, "--- ");
 800067c:	485b      	ldr	r0, [pc, #364]	; (80007ec <ascii_to_morse+0x454>)
 800067e:	f006 fe3f 	bl	8007300 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b59      	ldr	r3, [pc, #356]	; (80007ec <ascii_to_morse+0x454>)
 8000688:	4413      	add	r3, r2
 800068a:	4a67      	ldr	r2, [pc, #412]	; (8000828 <ascii_to_morse+0x490>)
 800068c:	6810      	ldr	r0, [r2, #0]
 800068e:	6018      	str	r0, [r3, #0]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	711a      	strb	r2, [r3, #4]
    break;
 8000694:	e242      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'p':
  case 'P':
    strcat(code, ".--. ");
 8000696:	4855      	ldr	r0, [pc, #340]	; (80007ec <ascii_to_morse+0x454>)
 8000698:	f006 fe32 	bl	8007300 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <ascii_to_morse+0x454>)
 80006a2:	4413      	add	r3, r2
 80006a4:	4a61      	ldr	r2, [pc, #388]	; (800082c <ascii_to_morse+0x494>)
 80006a6:	6810      	ldr	r0, [r2, #0]
 80006a8:	6018      	str	r0, [r3, #0]
 80006aa:	8892      	ldrh	r2, [r2, #4]
 80006ac:	809a      	strh	r2, [r3, #4]
    break;
 80006ae:	e235      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'q':
  case 'Q':
    strcat(code, "--.- ");
 80006b0:	484e      	ldr	r0, [pc, #312]	; (80007ec <ascii_to_morse+0x454>)
 80006b2:	f006 fe25 	bl	8007300 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <ascii_to_morse+0x454>)
 80006bc:	4413      	add	r3, r2
 80006be:	4a5c      	ldr	r2, [pc, #368]	; (8000830 <ascii_to_morse+0x498>)
 80006c0:	6810      	ldr	r0, [r2, #0]
 80006c2:	6018      	str	r0, [r3, #0]
 80006c4:	8892      	ldrh	r2, [r2, #4]
 80006c6:	809a      	strh	r2, [r3, #4]
    break;
 80006c8:	e228      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'r':
  case 'R':
    strcat(code, ".-. ");
 80006ca:	4848      	ldr	r0, [pc, #288]	; (80007ec <ascii_to_morse+0x454>)
 80006cc:	f006 fe18 	bl	8007300 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b45      	ldr	r3, [pc, #276]	; (80007ec <ascii_to_morse+0x454>)
 80006d6:	4413      	add	r3, r2
 80006d8:	4a56      	ldr	r2, [pc, #344]	; (8000834 <ascii_to_morse+0x49c>)
 80006da:	6810      	ldr	r0, [r2, #0]
 80006dc:	6018      	str	r0, [r3, #0]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	711a      	strb	r2, [r3, #4]
    break;
 80006e2:	e21b      	b.n	8000b1c <ascii_to_morse+0x784>

  case 's':
  case 'S':
    strcat(code, "... ");
 80006e4:	4841      	ldr	r0, [pc, #260]	; (80007ec <ascii_to_morse+0x454>)
 80006e6:	f006 fe0b 	bl	8007300 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b3f      	ldr	r3, [pc, #252]	; (80007ec <ascii_to_morse+0x454>)
 80006f0:	4413      	add	r3, r2
 80006f2:	4a51      	ldr	r2, [pc, #324]	; (8000838 <ascii_to_morse+0x4a0>)
 80006f4:	6810      	ldr	r0, [r2, #0]
 80006f6:	6018      	str	r0, [r3, #0]
 80006f8:	7912      	ldrb	r2, [r2, #4]
 80006fa:	711a      	strb	r2, [r3, #4]
    break;
 80006fc:	e20e      	b.n	8000b1c <ascii_to_morse+0x784>

  case 't':
  case 'T':
    strcat(code, "- ");
 80006fe:	483b      	ldr	r0, [pc, #236]	; (80007ec <ascii_to_morse+0x454>)
 8000700:	f006 fdfe 	bl	8007300 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <ascii_to_morse+0x454>)
 800070a:	4413      	add	r3, r2
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <ascii_to_morse+0x4a4>)
 800070e:	8811      	ldrh	r1, [r2, #0]
 8000710:	7892      	ldrb	r2, [r2, #2]
 8000712:	8019      	strh	r1, [r3, #0]
 8000714:	709a      	strb	r2, [r3, #2]
    break;
 8000716:	e201      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'u':
  case 'U':
    strcat(code, "..- ");
 8000718:	4834      	ldr	r0, [pc, #208]	; (80007ec <ascii_to_morse+0x454>)
 800071a:	f006 fdf1 	bl	8007300 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <ascii_to_morse+0x454>)
 8000724:	4413      	add	r3, r2
 8000726:	4a46      	ldr	r2, [pc, #280]	; (8000840 <ascii_to_morse+0x4a8>)
 8000728:	6810      	ldr	r0, [r2, #0]
 800072a:	6018      	str	r0, [r3, #0]
 800072c:	7912      	ldrb	r2, [r2, #4]
 800072e:	711a      	strb	r2, [r3, #4]
    break;
 8000730:	e1f4      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'v':
  case 'V':
    strcat(code, "...- ");
 8000732:	482e      	ldr	r0, [pc, #184]	; (80007ec <ascii_to_morse+0x454>)
 8000734:	f006 fde4 	bl	8007300 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <ascii_to_morse+0x454>)
 800073e:	4413      	add	r3, r2
 8000740:	4a40      	ldr	r2, [pc, #256]	; (8000844 <ascii_to_morse+0x4ac>)
 8000742:	6810      	ldr	r0, [r2, #0]
 8000744:	6018      	str	r0, [r3, #0]
 8000746:	8892      	ldrh	r2, [r2, #4]
 8000748:	809a      	strh	r2, [r3, #4]
    break;
 800074a:	e1e7      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'w':
  case 'W':
    strcat(code, ".-- ");
 800074c:	4827      	ldr	r0, [pc, #156]	; (80007ec <ascii_to_morse+0x454>)
 800074e:	f006 fdd7 	bl	8007300 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <ascii_to_morse+0x454>)
 8000758:	4413      	add	r3, r2
 800075a:	4a3b      	ldr	r2, [pc, #236]	; (8000848 <ascii_to_morse+0x4b0>)
 800075c:	6810      	ldr	r0, [r2, #0]
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	7912      	ldrb	r2, [r2, #4]
 8000762:	711a      	strb	r2, [r3, #4]
    break;
 8000764:	e1da      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'x':
  case 'X':
    strcat(code, "-..- ");
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <ascii_to_morse+0x454>)
 8000768:	f006 fdca 	bl	8007300 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <ascii_to_morse+0x454>)
 8000772:	4413      	add	r3, r2
 8000774:	4a35      	ldr	r2, [pc, #212]	; (800084c <ascii_to_morse+0x4b4>)
 8000776:	6810      	ldr	r0, [r2, #0]
 8000778:	6018      	str	r0, [r3, #0]
 800077a:	8892      	ldrh	r2, [r2, #4]
 800077c:	809a      	strh	r2, [r3, #4]
    break;
 800077e:	e1cd      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'y':
  case 'Y':
    strcat(code, "-.-- ");
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <ascii_to_morse+0x454>)
 8000782:	f006 fdbd 	bl	8007300 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <ascii_to_morse+0x454>)
 800078c:	4413      	add	r3, r2
 800078e:	4a30      	ldr	r2, [pc, #192]	; (8000850 <ascii_to_morse+0x4b8>)
 8000790:	6810      	ldr	r0, [r2, #0]
 8000792:	6018      	str	r0, [r3, #0]
 8000794:	8892      	ldrh	r2, [r2, #4]
 8000796:	809a      	strh	r2, [r3, #4]
    break;
 8000798:	e1c0      	b.n	8000b1c <ascii_to_morse+0x784>

  case 'z':
  case 'Z':
    strcat(code, "--.. ");
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <ascii_to_morse+0x454>)
 800079c:	f006 fdb0 	bl	8007300 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <ascii_to_morse+0x454>)
 80007a6:	4413      	add	r3, r2
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <ascii_to_morse+0x4bc>)
 80007aa:	6810      	ldr	r0, [r2, #0]
 80007ac:	6018      	str	r0, [r3, #0]
 80007ae:	8892      	ldrh	r2, [r2, #4]
 80007b0:	809a      	strh	r2, [r3, #4]
    break;
 80007b2:	e1b3      	b.n	8000b1c <ascii_to_morse+0x784>

    // spaces

  case ' ':
    strcat(code, "  ");
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <ascii_to_morse+0x454>)
 80007b6:	f006 fda3 	bl	8007300 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <ascii_to_morse+0x454>)
 80007c0:	4413      	add	r3, r2
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <ascii_to_morse+0x4c0>)
 80007c4:	8811      	ldrh	r1, [r2, #0]
 80007c6:	7892      	ldrb	r2, [r2, #2]
 80007c8:	8019      	strh	r1, [r3, #0]
 80007ca:	709a      	strb	r2, [r3, #2]
    break;
 80007cc:	e1a6      	b.n	8000b1c <ascii_to_morse+0x784>

    // numbers

  case '0':
    strcat(code, "----- ");
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <ascii_to_morse+0x454>)
 80007d0:	f006 fd96 	bl	8007300 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ascii_to_morse+0x454>)
 80007da:	4413      	add	r3, r2
 80007dc:	4a1f      	ldr	r2, [pc, #124]	; (800085c <ascii_to_morse+0x4c4>)
 80007de:	6810      	ldr	r0, [r2, #0]
 80007e0:	6018      	str	r0, [r3, #0]
 80007e2:	8891      	ldrh	r1, [r2, #4]
 80007e4:	7992      	ldrb	r2, [r2, #6]
 80007e6:	8099      	strh	r1, [r3, #4]
 80007e8:	719a      	strb	r2, [r3, #6]
    break;
 80007ea:	e197      	b.n	8000b1c <ascii_to_morse+0x784>
 80007ec:	20000a6c 	.word	0x20000a6c
 80007f0:	0800e308 	.word	0x0800e308
 80007f4:	0800e30c 	.word	0x0800e30c
 80007f8:	0800e314 	.word	0x0800e314
 80007fc:	0800e31c 	.word	0x0800e31c
 8000800:	0800e324 	.word	0x0800e324
 8000804:	0800e328 	.word	0x0800e328
 8000808:	0800e330 	.word	0x0800e330
 800080c:	0800e338 	.word	0x0800e338
 8000810:	0800e340 	.word	0x0800e340
 8000814:	0800e344 	.word	0x0800e344
 8000818:	0800e34c 	.word	0x0800e34c
 800081c:	0800e354 	.word	0x0800e354
 8000820:	0800e35c 	.word	0x0800e35c
 8000824:	0800e360 	.word	0x0800e360
 8000828:	0800e364 	.word	0x0800e364
 800082c:	0800e36c 	.word	0x0800e36c
 8000830:	0800e374 	.word	0x0800e374
 8000834:	0800e37c 	.word	0x0800e37c
 8000838:	0800e384 	.word	0x0800e384
 800083c:	0800e38c 	.word	0x0800e38c
 8000840:	0800e390 	.word	0x0800e390
 8000844:	0800e398 	.word	0x0800e398
 8000848:	0800e3a0 	.word	0x0800e3a0
 800084c:	0800e3a8 	.word	0x0800e3a8
 8000850:	0800e3b0 	.word	0x0800e3b0
 8000854:	0800e3b8 	.word	0x0800e3b8
 8000858:	0800e3c0 	.word	0x0800e3c0
 800085c:	0800e3c4 	.word	0x0800e3c4

  case '1':
    strcat(code, ".---- ");
 8000860:	48b0      	ldr	r0, [pc, #704]	; (8000b24 <ascii_to_morse+0x78c>)
 8000862:	f006 fd4d 	bl	8007300 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4bae      	ldr	r3, [pc, #696]	; (8000b24 <ascii_to_morse+0x78c>)
 800086c:	4413      	add	r3, r2
 800086e:	4aae      	ldr	r2, [pc, #696]	; (8000b28 <ascii_to_morse+0x790>)
 8000870:	6810      	ldr	r0, [r2, #0]
 8000872:	6018      	str	r0, [r3, #0]
 8000874:	8891      	ldrh	r1, [r2, #4]
 8000876:	7992      	ldrb	r2, [r2, #6]
 8000878:	8099      	strh	r1, [r3, #4]
 800087a:	719a      	strb	r2, [r3, #6]
    break;
 800087c:	e14e      	b.n	8000b1c <ascii_to_morse+0x784>

  case '2':
    strcat(code, "..--- ");
 800087e:	48a9      	ldr	r0, [pc, #676]	; (8000b24 <ascii_to_morse+0x78c>)
 8000880:	f006 fd3e 	bl	8007300 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4ba6      	ldr	r3, [pc, #664]	; (8000b24 <ascii_to_morse+0x78c>)
 800088a:	4413      	add	r3, r2
 800088c:	4aa7      	ldr	r2, [pc, #668]	; (8000b2c <ascii_to_morse+0x794>)
 800088e:	6810      	ldr	r0, [r2, #0]
 8000890:	6018      	str	r0, [r3, #0]
 8000892:	8891      	ldrh	r1, [r2, #4]
 8000894:	7992      	ldrb	r2, [r2, #6]
 8000896:	8099      	strh	r1, [r3, #4]
 8000898:	719a      	strb	r2, [r3, #6]
    break;
 800089a:	e13f      	b.n	8000b1c <ascii_to_morse+0x784>

  case '3':
    strcat(code, "...-- ");
 800089c:	48a1      	ldr	r0, [pc, #644]	; (8000b24 <ascii_to_morse+0x78c>)
 800089e:	f006 fd2f 	bl	8007300 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b9f      	ldr	r3, [pc, #636]	; (8000b24 <ascii_to_morse+0x78c>)
 80008a8:	4413      	add	r3, r2
 80008aa:	4aa1      	ldr	r2, [pc, #644]	; (8000b30 <ascii_to_morse+0x798>)
 80008ac:	6810      	ldr	r0, [r2, #0]
 80008ae:	6018      	str	r0, [r3, #0]
 80008b0:	8891      	ldrh	r1, [r2, #4]
 80008b2:	7992      	ldrb	r2, [r2, #6]
 80008b4:	8099      	strh	r1, [r3, #4]
 80008b6:	719a      	strb	r2, [r3, #6]
    break;
 80008b8:	e130      	b.n	8000b1c <ascii_to_morse+0x784>

  case '4':
    strcat(code, "....- ");
 80008ba:	489a      	ldr	r0, [pc, #616]	; (8000b24 <ascii_to_morse+0x78c>)
 80008bc:	f006 fd20 	bl	8007300 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b97      	ldr	r3, [pc, #604]	; (8000b24 <ascii_to_morse+0x78c>)
 80008c6:	4413      	add	r3, r2
 80008c8:	4a9a      	ldr	r2, [pc, #616]	; (8000b34 <ascii_to_morse+0x79c>)
 80008ca:	6810      	ldr	r0, [r2, #0]
 80008cc:	6018      	str	r0, [r3, #0]
 80008ce:	8891      	ldrh	r1, [r2, #4]
 80008d0:	7992      	ldrb	r2, [r2, #6]
 80008d2:	8099      	strh	r1, [r3, #4]
 80008d4:	719a      	strb	r2, [r3, #6]
    break;
 80008d6:	e121      	b.n	8000b1c <ascii_to_morse+0x784>

  case '5':
    strcat(code, "..... ");
 80008d8:	4892      	ldr	r0, [pc, #584]	; (8000b24 <ascii_to_morse+0x78c>)
 80008da:	f006 fd11 	bl	8007300 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b90      	ldr	r3, [pc, #576]	; (8000b24 <ascii_to_morse+0x78c>)
 80008e4:	4413      	add	r3, r2
 80008e6:	4a94      	ldr	r2, [pc, #592]	; (8000b38 <ascii_to_morse+0x7a0>)
 80008e8:	6810      	ldr	r0, [r2, #0]
 80008ea:	6018      	str	r0, [r3, #0]
 80008ec:	8891      	ldrh	r1, [r2, #4]
 80008ee:	7992      	ldrb	r2, [r2, #6]
 80008f0:	8099      	strh	r1, [r3, #4]
 80008f2:	719a      	strb	r2, [r3, #6]
    break;
 80008f4:	e112      	b.n	8000b1c <ascii_to_morse+0x784>

  case '6':
    strcat(code, "....- ");
 80008f6:	488b      	ldr	r0, [pc, #556]	; (8000b24 <ascii_to_morse+0x78c>)
 80008f8:	f006 fd02 	bl	8007300 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b88      	ldr	r3, [pc, #544]	; (8000b24 <ascii_to_morse+0x78c>)
 8000902:	4413      	add	r3, r2
 8000904:	4a8b      	ldr	r2, [pc, #556]	; (8000b34 <ascii_to_morse+0x79c>)
 8000906:	6810      	ldr	r0, [r2, #0]
 8000908:	6018      	str	r0, [r3, #0]
 800090a:	8891      	ldrh	r1, [r2, #4]
 800090c:	7992      	ldrb	r2, [r2, #6]
 800090e:	8099      	strh	r1, [r3, #4]
 8000910:	719a      	strb	r2, [r3, #6]
    break;
 8000912:	e103      	b.n	8000b1c <ascii_to_morse+0x784>

  case '7':
    strcat(code, "...-- ");
 8000914:	4883      	ldr	r0, [pc, #524]	; (8000b24 <ascii_to_morse+0x78c>)
 8000916:	f006 fcf3 	bl	8007300 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4b81      	ldr	r3, [pc, #516]	; (8000b24 <ascii_to_morse+0x78c>)
 8000920:	4413      	add	r3, r2
 8000922:	4a83      	ldr	r2, [pc, #524]	; (8000b30 <ascii_to_morse+0x798>)
 8000924:	6810      	ldr	r0, [r2, #0]
 8000926:	6018      	str	r0, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	7992      	ldrb	r2, [r2, #6]
 800092c:	8099      	strh	r1, [r3, #4]
 800092e:	719a      	strb	r2, [r3, #6]
    break;
 8000930:	e0f4      	b.n	8000b1c <ascii_to_morse+0x784>

  case '8':
    strcat(code, "..--- ");
 8000932:	487c      	ldr	r0, [pc, #496]	; (8000b24 <ascii_to_morse+0x78c>)
 8000934:	f006 fce4 	bl	8007300 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b79      	ldr	r3, [pc, #484]	; (8000b24 <ascii_to_morse+0x78c>)
 800093e:	4413      	add	r3, r2
 8000940:	4a7a      	ldr	r2, [pc, #488]	; (8000b2c <ascii_to_morse+0x794>)
 8000942:	6810      	ldr	r0, [r2, #0]
 8000944:	6018      	str	r0, [r3, #0]
 8000946:	8891      	ldrh	r1, [r2, #4]
 8000948:	7992      	ldrb	r2, [r2, #6]
 800094a:	8099      	strh	r1, [r3, #4]
 800094c:	719a      	strb	r2, [r3, #6]
    break;
 800094e:	e0e5      	b.n	8000b1c <ascii_to_morse+0x784>

  case '9':
    strcat(code, ".---- ");
 8000950:	4874      	ldr	r0, [pc, #464]	; (8000b24 <ascii_to_morse+0x78c>)
 8000952:	f006 fcd5 	bl	8007300 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b72      	ldr	r3, [pc, #456]	; (8000b24 <ascii_to_morse+0x78c>)
 800095c:	4413      	add	r3, r2
 800095e:	4a72      	ldr	r2, [pc, #456]	; (8000b28 <ascii_to_morse+0x790>)
 8000960:	6810      	ldr	r0, [r2, #0]
 8000962:	6018      	str	r0, [r3, #0]
 8000964:	8891      	ldrh	r1, [r2, #4]
 8000966:	7992      	ldrb	r2, [r2, #6]
 8000968:	8099      	strh	r1, [r3, #4]
 800096a:	719a      	strb	r2, [r3, #6]
    break;
 800096c:	e0d6      	b.n	8000b1c <ascii_to_morse+0x784>

    // punctuation marks

  case '.':
    strcat(code, ".-.-.- ");
 800096e:	486d      	ldr	r0, [pc, #436]	; (8000b24 <ascii_to_morse+0x78c>)
 8000970:	f006 fcc6 	bl	8007300 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b6a      	ldr	r3, [pc, #424]	; (8000b24 <ascii_to_morse+0x78c>)
 800097a:	4413      	add	r3, r2
 800097c:	496f      	ldr	r1, [pc, #444]	; (8000b3c <ascii_to_morse+0x7a4>)
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	cb03      	ldmia	r3!, {r0, r1}
 8000984:	6010      	str	r0, [r2, #0]
 8000986:	6051      	str	r1, [r2, #4]
    break;
 8000988:	e0c8      	b.n	8000b1c <ascii_to_morse+0x784>

  case ',':
    strcat(code, "--..-- ");
 800098a:	4866      	ldr	r0, [pc, #408]	; (8000b24 <ascii_to_morse+0x78c>)
 800098c:	f006 fcb8 	bl	8007300 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b63      	ldr	r3, [pc, #396]	; (8000b24 <ascii_to_morse+0x78c>)
 8000996:	4413      	add	r3, r2
 8000998:	4969      	ldr	r1, [pc, #420]	; (8000b40 <ascii_to_morse+0x7a8>)
 800099a:	461a      	mov	r2, r3
 800099c:	460b      	mov	r3, r1
 800099e:	cb03      	ldmia	r3!, {r0, r1}
 80009a0:	6010      	str	r0, [r2, #0]
 80009a2:	6051      	str	r1, [r2, #4]
    break;
 80009a4:	e0ba      	b.n	8000b1c <ascii_to_morse+0x784>

  case ':':
    strcat(code, "---... ");
 80009a6:	485f      	ldr	r0, [pc, #380]	; (8000b24 <ascii_to_morse+0x78c>)
 80009a8:	f006 fcaa 	bl	8007300 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <ascii_to_morse+0x78c>)
 80009b2:	4413      	add	r3, r2
 80009b4:	4963      	ldr	r1, [pc, #396]	; (8000b44 <ascii_to_morse+0x7ac>)
 80009b6:	461a      	mov	r2, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	cb03      	ldmia	r3!, {r0, r1}
 80009bc:	6010      	str	r0, [r2, #0]
 80009be:	6051      	str	r1, [r2, #4]
    break;
 80009c0:	e0ac      	b.n	8000b1c <ascii_to_morse+0x784>

  case ';':
    strcat(code, "-.-.-. ");
 80009c2:	4858      	ldr	r0, [pc, #352]	; (8000b24 <ascii_to_morse+0x78c>)
 80009c4:	f006 fc9c 	bl	8007300 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b55      	ldr	r3, [pc, #340]	; (8000b24 <ascii_to_morse+0x78c>)
 80009ce:	4413      	add	r3, r2
 80009d0:	495d      	ldr	r1, [pc, #372]	; (8000b48 <ascii_to_morse+0x7b0>)
 80009d2:	461a      	mov	r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	cb03      	ldmia	r3!, {r0, r1}
 80009d8:	6010      	str	r0, [r2, #0]
 80009da:	6051      	str	r1, [r2, #4]
    break;
 80009dc:	e09e      	b.n	8000b1c <ascii_to_morse+0x784>

  case '?':
    strcat(code, "..--.. ");
 80009de:	4851      	ldr	r0, [pc, #324]	; (8000b24 <ascii_to_morse+0x78c>)
 80009e0:	f006 fc8e 	bl	8007300 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b4e      	ldr	r3, [pc, #312]	; (8000b24 <ascii_to_morse+0x78c>)
 80009ea:	4413      	add	r3, r2
 80009ec:	4957      	ldr	r1, [pc, #348]	; (8000b4c <ascii_to_morse+0x7b4>)
 80009ee:	461a      	mov	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	cb03      	ldmia	r3!, {r0, r1}
 80009f4:	6010      	str	r0, [r2, #0]
 80009f6:	6051      	str	r1, [r2, #4]
    break;
 80009f8:	e090      	b.n	8000b1c <ascii_to_morse+0x784>

  case '-':
    strcat(code, "-....- ");
 80009fa:	484a      	ldr	r0, [pc, #296]	; (8000b24 <ascii_to_morse+0x78c>)
 80009fc:	f006 fc80 	bl	8007300 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a06:	4413      	add	r3, r2
 8000a08:	4951      	ldr	r1, [pc, #324]	; (8000b50 <ascii_to_morse+0x7b8>)
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	cb03      	ldmia	r3!, {r0, r1}
 8000a10:	6010      	str	r0, [r2, #0]
 8000a12:	6051      	str	r1, [r2, #4]
    break;
 8000a14:	e082      	b.n	8000b1c <ascii_to_morse+0x784>

  case '_':
    strcat(code, "..--.- ");
 8000a16:	4843      	ldr	r0, [pc, #268]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a18:	f006 fc72 	bl	8007300 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a22:	4413      	add	r3, r2
 8000a24:	494b      	ldr	r1, [pc, #300]	; (8000b54 <ascii_to_morse+0x7bc>)
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	cb03      	ldmia	r3!, {r0, r1}
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	6051      	str	r1, [r2, #4]
    break;
 8000a30:	e074      	b.n	8000b1c <ascii_to_morse+0x784>

  case '(':
    strcat(code, "-.--. ");
 8000a32:	483c      	ldr	r0, [pc, #240]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a34:	f006 fc64 	bl	8007300 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <ascii_to_morse+0x7c0>)
 8000a42:	6810      	ldr	r0, [r2, #0]
 8000a44:	6018      	str	r0, [r3, #0]
 8000a46:	8891      	ldrh	r1, [r2, #4]
 8000a48:	7992      	ldrb	r2, [r2, #6]
 8000a4a:	8099      	strh	r1, [r3, #4]
 8000a4c:	719a      	strb	r2, [r3, #6]
    break;
 8000a4e:	e065      	b.n	8000b1c <ascii_to_morse+0x784>

  case ')':
    strcat(code, "-.--.- ");
 8000a50:	4834      	ldr	r0, [pc, #208]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a52:	f006 fc55 	bl	8007300 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a5c:	4413      	add	r3, r2
 8000a5e:	493f      	ldr	r1, [pc, #252]	; (8000b5c <ascii_to_morse+0x7c4>)
 8000a60:	461a      	mov	r2, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	cb03      	ldmia	r3!, {r0, r1}
 8000a66:	6010      	str	r0, [r2, #0]
 8000a68:	6051      	str	r1, [r2, #4]
    break;
 8000a6a:	e057      	b.n	8000b1c <ascii_to_morse+0x784>

  case '\'':
    strcat(code, ".----. ");
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a6e:	f006 fc47 	bl	8007300 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	4939      	ldr	r1, [pc, #228]	; (8000b60 <ascii_to_morse+0x7c8>)
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	cb03      	ldmia	r3!, {r0, r1}
 8000a82:	6010      	str	r0, [r2, #0]
 8000a84:	6051      	str	r1, [r2, #4]
    break;
 8000a86:	e049      	b.n	8000b1c <ascii_to_morse+0x784>

  case '=':
    strcat(code, "-...- ");
 8000a88:	4826      	ldr	r0, [pc, #152]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a8a:	f006 fc39 	bl	8007300 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <ascii_to_morse+0x78c>)
 8000a94:	4413      	add	r3, r2
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <ascii_to_morse+0x7cc>)
 8000a98:	6810      	ldr	r0, [r2, #0]
 8000a9a:	6018      	str	r0, [r3, #0]
 8000a9c:	8891      	ldrh	r1, [r2, #4]
 8000a9e:	7992      	ldrb	r2, [r2, #6]
 8000aa0:	8099      	strh	r1, [r3, #4]
 8000aa2:	719a      	strb	r2, [r3, #6]
    break;
 8000aa4:	e03a      	b.n	8000b1c <ascii_to_morse+0x784>

  case '+':
    strcat(code, ".-.-. ");
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <ascii_to_morse+0x78c>)
 8000aa8:	f006 fc2a 	bl	8007300 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <ascii_to_morse+0x78c>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <ascii_to_morse+0x7d0>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
 8000aba:	8891      	ldrh	r1, [r2, #4]
 8000abc:	7992      	ldrb	r2, [r2, #6]
 8000abe:	8099      	strh	r1, [r3, #4]
 8000ac0:	719a      	strb	r2, [r3, #6]
    break;
 8000ac2:	e02b      	b.n	8000b1c <ascii_to_morse+0x784>

  case '/':
    strcat(code, "-..-. ");
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <ascii_to_morse+0x78c>)
 8000ac6:	f006 fc1b 	bl	8007300 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <ascii_to_morse+0x78c>)
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <ascii_to_morse+0x7d4>)
 8000ad4:	6810      	ldr	r0, [r2, #0]
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	8891      	ldrh	r1, [r2, #4]
 8000ada:	7992      	ldrb	r2, [r2, #6]
 8000adc:	8099      	strh	r1, [r3, #4]
 8000ade:	719a      	strb	r2, [r3, #6]
    break;
 8000ae0:	e01c      	b.n	8000b1c <ascii_to_morse+0x784>

  case '@':
    strcat(code, ".--.-. ");
 8000ae2:	4810      	ldr	r0, [pc, #64]	; (8000b24 <ascii_to_morse+0x78c>)
 8000ae4:	f006 fc0c 	bl	8007300 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <ascii_to_morse+0x78c>)
 8000aee:	4413      	add	r3, r2
 8000af0:	491f      	ldr	r1, [pc, #124]	; (8000b70 <ascii_to_morse+0x7d8>)
 8000af2:	461a      	mov	r2, r3
 8000af4:	460b      	mov	r3, r1
 8000af6:	cb03      	ldmia	r3!, {r0, r1}
 8000af8:	6010      	str	r0, [r2, #0]
 8000afa:	6051      	str	r1, [r2, #4]
    break;
 8000afc:	e00e      	b.n	8000b1c <ascii_to_morse+0x784>

  default:
    strcat(code, "........ ");
 8000afe:	4809      	ldr	r0, [pc, #36]	; (8000b24 <ascii_to_morse+0x78c>)
 8000b00:	f006 fbfe 	bl	8007300 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <ascii_to_morse+0x78c>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4919      	ldr	r1, [pc, #100]	; (8000b74 <ascii_to_morse+0x7dc>)
 8000b0e:	461a      	mov	r2, r3
 8000b10:	460b      	mov	r3, r1
 8000b12:	cb03      	ldmia	r3!, {r0, r1}
 8000b14:	6010      	str	r0, [r2, #0]
 8000b16:	6051      	str	r1, [r2, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	8113      	strh	r3, [r2, #8]
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000a6c 	.word	0x20000a6c
 8000b28:	0800e3cc 	.word	0x0800e3cc
 8000b2c:	0800e3d4 	.word	0x0800e3d4
 8000b30:	0800e3dc 	.word	0x0800e3dc
 8000b34:	0800e3e4 	.word	0x0800e3e4
 8000b38:	0800e3ec 	.word	0x0800e3ec
 8000b3c:	0800e3f4 	.word	0x0800e3f4
 8000b40:	0800e3fc 	.word	0x0800e3fc
 8000b44:	0800e404 	.word	0x0800e404
 8000b48:	0800e40c 	.word	0x0800e40c
 8000b4c:	0800e414 	.word	0x0800e414
 8000b50:	0800e41c 	.word	0x0800e41c
 8000b54:	0800e424 	.word	0x0800e424
 8000b58:	0800e42c 	.word	0x0800e42c
 8000b5c:	0800e434 	.word	0x0800e434
 8000b60:	0800e43c 	.word	0x0800e43c
 8000b64:	0800e444 	.word	0x0800e444
 8000b68:	0800e44c 	.word	0x0800e44c
 8000b6c:	0800e454 	.word	0x0800e454
 8000b70:	0800e45c 	.word	0x0800e45c
 8000b74:	0800e464 	.word	0x0800e464

08000b78 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  ticks++;
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <SysTick_Handler+0xe0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a35      	ldr	r2, [pc, #212]	; (8000c58 <SysTick_Handler+0xe0>)
 8000b84:	6013      	str	r3, [r2, #0]
  switch (letter)
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <SysTick_Handler+0xe4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b20      	cmp	r3, #32
 8000b8c:	d045      	beq.n	8000c1a <SysTick_Handler+0xa2>
 8000b8e:	2b20      	cmp	r3, #32
 8000b90:	dc02      	bgt.n	8000b98 <SysTick_Handler+0x20>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d04e      	beq.n	8000c34 <SysTick_Handler+0xbc>
    j = 0;
    execution = 0;
    break;

  default:
    break;
 8000b96:	e05c      	b.n	8000c52 <SysTick_Handler+0xda>
  switch (letter)
 8000b98:	2b2d      	cmp	r3, #45	; 0x2d
 8000b9a:	d01f      	beq.n	8000bdc <SysTick_Handler+0x64>
 8000b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b9e:	d000      	beq.n	8000ba2 <SysTick_Handler+0x2a>
    break;
 8000ba0:	e057      	b.n	8000c52 <SysTick_Handler+0xda>
    if (ticks == 1)
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <SysTick_Handler+0xe0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d103      	bne.n	8000bb2 <SysTick_Handler+0x3a>
      XMC_GPIO_ToggleOutput(LED1);
 8000baa:	2101      	movs	r1, #1
 8000bac:	482c      	ldr	r0, [pc, #176]	; (8000c60 <SysTick_Handler+0xe8>)
 8000bae:	f7ff fbcd 	bl	800034c <XMC_GPIO_ToggleOutput>
    if (ticks == TICKS_WAIT)
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <SysTick_Handler+0xe0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d103      	bne.n	8000bc2 <SysTick_Handler+0x4a>
      XMC_GPIO_ToggleOutput(LED1);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4828      	ldr	r0, [pc, #160]	; (8000c60 <SysTick_Handler+0xe8>)
 8000bbe:	f7ff fbc5 	bl	800034c <XMC_GPIO_ToggleOutput>
    if (ticks == TICKS_WAIT + 100)
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <SysTick_Handler+0xe0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2bc8      	cmp	r3, #200	; 0xc8
 8000bc8:	d13e      	bne.n	8000c48 <SysTick_Handler+0xd0>
      ticks = 0;
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <SysTick_Handler+0xe0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
      j++;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <SysTick_Handler+0xec>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <SysTick_Handler+0xec>)
 8000bd8:	6013      	str	r3, [r2, #0]
    break;
 8000bda:	e035      	b.n	8000c48 <SysTick_Handler+0xd0>
    if (ticks == 1)
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <SysTick_Handler+0xe0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d103      	bne.n	8000bec <SysTick_Handler+0x74>
      XMC_GPIO_ToggleOutput(LED1);
 8000be4:	2101      	movs	r1, #1
 8000be6:	481e      	ldr	r0, [pc, #120]	; (8000c60 <SysTick_Handler+0xe8>)
 8000be8:	f7ff fbb0 	bl	800034c <XMC_GPIO_ToggleOutput>
    if (ticks == TICKS_WAIT2)
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <SysTick_Handler+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bf4:	d103      	bne.n	8000bfe <SysTick_Handler+0x86>
      XMC_GPIO_ToggleOutput(LED1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4819      	ldr	r0, [pc, #100]	; (8000c60 <SysTick_Handler+0xe8>)
 8000bfa:	f7ff fba7 	bl	800034c <XMC_GPIO_ToggleOutput>
    if (ticks == TICKS_WAIT2 + 100)
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <SysTick_Handler+0xe0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c06:	d121      	bne.n	8000c4c <SysTick_Handler+0xd4>
      ticks = 0;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <SysTick_Handler+0xe0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
      j++;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <SysTick_Handler+0xec>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <SysTick_Handler+0xec>)
 8000c16:	6013      	str	r3, [r2, #0]
    break;
 8000c18:	e018      	b.n	8000c4c <SysTick_Handler+0xd4>
    if (ticks == 200)
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <SysTick_Handler+0xe0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2bc8      	cmp	r3, #200	; 0xc8
 8000c20:	d116      	bne.n	8000c50 <SysTick_Handler+0xd8>
      ticks = 0;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <SysTick_Handler+0xe0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
      j++;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <SysTick_Handler+0xec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <SysTick_Handler+0xec>)
 8000c30:	6013      	str	r3, [r2, #0]
    break;
 8000c32:	e00d      	b.n	8000c50 <SysTick_Handler+0xd8>
    ticks = 0;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SysTick_Handler+0xe0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
    j = 0;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <SysTick_Handler+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    execution = 0;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <SysTick_Handler+0xf0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
    break;
 8000c46:	e004      	b.n	8000c52 <SysTick_Handler+0xda>
    break;
 8000c48:	bf00      	nop
 8000c4a:	e002      	b.n	8000c52 <SysTick_Handler+0xda>
    break;
 8000c4c:	bf00      	nop
 8000c4e:	e000      	b.n	8000c52 <SysTick_Handler+0xda>
    break;
 8000c50:	bf00      	nop
  }
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200009e8 	.word	0x200009e8
 8000c5c:	200009e0 	.word	0x200009e0
 8000c60:	48028100 	.word	0x48028100
 8000c64:	200009dc 	.word	0x200009dc
 8000c68:	200009e4 	.word	0x200009e4

08000c6c <translate_to_morse>:

// main translation function

void translate_to_morse(char text[])
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  int length_c = strlen(text);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f006 fb43 	bl	8007300 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	613b      	str	r3, [r7, #16]
  int i;
  char character;

  for (i = 0; i < length_c; i++) // translation loop
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e00b      	b.n	8000c9c <translate_to_morse+0x30>
  {
    character = text[i];
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	73fb      	strb	r3, [r7, #15]

    ascii_to_morse(character); // converts characters to morse code
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fb81 	bl	8000398 <ascii_to_morse>
  for (i = 0; i < length_c; i++) // translation loop
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbef      	blt.n	8000c84 <translate_to_morse+0x18>
  }
  printf("\n%s", code);
 8000ca4:	4903      	ldr	r1, [pc, #12]	; (8000cb4 <translate_to_morse+0x48>)
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <translate_to_morse+0x4c>)
 8000ca8:	f006 fb0e 	bl	80072c8 <printf>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000a6c 	.word	0x20000a6c
 8000cb8:	0800e470 	.word	0x0800e470

08000cbc <translate_to_led>:

void translate_to_led()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  if (j < length)
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <translate_to_led+0x34>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <translate_to_led+0x38>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	da06      	bge.n	8000cda <translate_to_led+0x1e>
  {
    letter = code[j];
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <translate_to_led+0x34>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <translate_to_led+0x3c>)
 8000cd2:	5cd2      	ldrb	r2, [r2, r3]
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <translate_to_led+0x40>)
 8000cd6:	701a      	strb	r2, [r3, #0]
  else
  {
    j = 0;
    execution = 0;
  }
}
 8000cd8:	e005      	b.n	8000ce6 <translate_to_led+0x2a>
    j = 0;
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <translate_to_led+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
    execution = 0;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <translate_to_led+0x44>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	200009dc 	.word	0x200009dc
 8000cf4:	200009ec 	.word	0x200009ec
 8000cf8:	20000a6c 	.word	0x20000a6c
 8000cfc:	200009e0 	.word	0x200009e0
 8000d00:	200009e4 	.word	0x200009e4

08000d04 <SystemCoreClockSetup>:
    .fcpu_clkdiv = 1,
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1};

void SystemCoreClockSetup(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Setup settings for USB clock */
  XMC_SCU_CLOCK_Init(&clock_config);
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <SystemCoreClockSetup+0x30>)
 8000d0a:	f003 ff81 	bl	8004c10 <XMC_SCU_CLOCK_Init>

  XMC_SCU_CLOCK_EnableUsbPll();
 8000d0e:	f004 fc45 	bl	800559c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(2, 64);
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	2002      	movs	r0, #2
 8000d16:	f004 fc65 	bl	80055e4 <XMC_SCU_CLOCK_StartUsbPll>
  XMC_SCU_CLOCK_SetUsbClockDivider(4);
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f004 fb7c 	bl	8005418 <XMC_SCU_CLOCK_SetUsbClockDivider>
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f004 fa81 	bl	8005228 <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f004 fbd0 	bl	80054cc <XMC_SCU_CLOCK_EnableClock>

  SystemCoreClockUpdate();
 8000d2c:	f006 f8fe 	bl	8006f2c <SystemCoreClockUpdate>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	0800e474 	.word	0x0800e474

08000d38 <main>:

int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a0      	sub	sp, #128	; 0x80
 8000d3c:	af00      	add	r7, sp, #0
  char text[100] = "I CAN MORSE";
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <main+0xfc>)
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	2258      	movs	r2, #88	; 0x58
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 fa5e 	bl	8007214 <memset>

  translate_to_morse(text); // main translation function
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff85 	bl	8000c6c <translate_to_morse>
  length = strlen(code);
 8000d62:	4835      	ldr	r0, [pc, #212]	; (8000e38 <main+0x100>)
 8000d64:	f006 facc 	bl	8007300 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <main+0x104>)
 8000d6e:	601a      	str	r2, [r3, #0]

  uint16_t Bytes=0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

  const XMC_GPIO_CONFIG_t out_config =
 8000d76:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <main+0x108>)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      {.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
       .output_level = XMC_GPIO_OUTPUT_LEVEL_LOW,
       .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};
  const XMC_GPIO_CONFIG_t in_config =
 8000d82:	2300      	movs	r3, #0
 8000d84:	703b      	strb	r3, [r7, #0]
 8000d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	723b      	strb	r3, [r7, #8]
      {.mode = XMC_GPIO_MODE_INPUT_TRISTATE,
       .output_level = XMC_GPIO_OUTPUT_LEVEL_LOW,
       .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};

  XMC_GPIO_Init(LED1,     &out_config);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	461a      	mov	r2, r3
 8000d96:	2101      	movs	r1, #1
 8000d98:	482a      	ldr	r0, [pc, #168]	; (8000e44 <main+0x10c>)
 8000d9a:	f005 fe7f 	bl	8006a9c <XMC_GPIO_Init>
  XMC_GPIO_Init(LED2,     &out_config);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	461a      	mov	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	4827      	ldr	r0, [pc, #156]	; (8000e44 <main+0x10c>)
 8000da8:	f005 fe78 	bl	8006a9c <XMC_GPIO_Init>
  XMC_GPIO_Init(BUTTON1,  &in_config);
 8000dac:	463b      	mov	r3, r7
 8000dae:	461a      	mov	r2, r3
 8000db0:	210e      	movs	r1, #14
 8000db2:	4824      	ldr	r0, [pc, #144]	; (8000e44 <main+0x10c>)
 8000db4:	f005 fe72 	bl	8006a9c <XMC_GPIO_Init>
  XMC_GPIO_Init(BUTTON2,  &in_config);
 8000db8:	463b      	mov	r3, r7
 8000dba:	461a      	mov	r2, r3
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <main+0x10c>)
 8000dc0:	f005 fe6c 	bl	8006a9c <XMC_GPIO_Init>
  USB_Init();
 8000dc4:	f000 f8fa 	bl	8000fbc <USB_Init>

  SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <main+0x110>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <main+0x114>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	099b      	lsrs	r3, r3, #6
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa97 	bl	8000308 <SysTick_Config>

  while (1)
  {
    /* Check if data received */
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 8000dda:	481d      	ldr	r0, [pc, #116]	; (8000e50 <main+0x118>)
 8000ddc:	f002 ffda 	bl	8003d94 <CDC_Device_BytesReceived>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    while (Bytes > 0)
 8000de6:	e00d      	b.n	8000e04 <main+0xcc>
    {
      /* Send data back to the host */
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
                          CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface));
 8000de8:	4819      	ldr	r0, [pc, #100]	; (8000e50 <main+0x118>)
 8000dea:	f003 f84d 	bl	8003e88 <CDC_Device_ReceiveByte>
 8000dee:	4603      	mov	r3, r0
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	4816      	ldr	r0, [pc, #88]	; (8000e50 <main+0x118>)
 8000df6:	f002 ff25 	bl	8003c44 <CDC_Device_SendByte>
      --Bytes;
 8000dfa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (Bytes > 0)
 8000e04:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1ed      	bne.n	8000de8 <main+0xb0>
    }

    if (XMC_GPIO_GetInput(BUTTON1) == 0)
 8000e0c:	210e      	movs	r1, #14
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <main+0x10c>)
 8000e10:	f7ff faae 	bl	8000370 <XMC_GPIO_GetInput>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <main+0xe8>
    {
      execution = 1;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <main+0x11c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
    }

    if (execution == 1)
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <main+0x11c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <main+0xf4>
    {
      translate_to_led();
 8000e28:	f7ff ff48 	bl	8000cbc <translate_to_led>
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <main+0x118>)
 8000e2e:	f002 fe57 	bl	8003ae0 <CDC_Device_USBTask>
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 8000e32:	e7d2      	b.n	8000dda <main+0xa2>
 8000e34:	0800e488 	.word	0x0800e488
 8000e38:	20000a6c 	.word	0x20000a6c
 8000e3c:	200009ec 	.word	0x200009ec
 8000e40:	0800e4ec 	.word	0x0800e4ec
 8000e44:	48028100 	.word	0x48028100
 8000e48:	2000ffc0 	.word	0x2000ffc0
 8000e4c:	10624dd3 	.word	0x10624dd3
 8000e50:	20000000 	.word	0x20000000
 8000e54:	200009e4 	.word	0x200009e4

08000e58 <__NVIC_GetPriorityGrouping>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_ClearPendingIRQ>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0c      	blt.n	8000edc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_ClearPendingIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	3360      	adds	r3, #96	; 0x60
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	bf28      	it	cs
 8000f5e:	2306      	movcs	r3, #6
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3306      	adds	r3, #6
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&USB_runtime);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USB0_0_IRQHandler+0x10>)
 8000fae:	f001 fca1 	bl	80028f4 <XMC_USBD_IRQHandler>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000020 	.word	0x20000020

08000fbc <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  USBD_Initialize(&USB_runtime);
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <USB_Init+0x4c>)
 8000fc2:	f000 fd95 	bl	8001af0 <USBD_Initialize>
	
  /* Interrupts configuration*/
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2200      	movs	r2, #0
 8000fce:	213f      	movs	r1, #63	; 0x3f
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffb5 	bl	8000f40 <NVIC_EncodePriority>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	206b      	movs	r0, #107	; 0x6b
 8000fdc:	f7ff ff86 	bl	8000eec <__NVIC_SetPriority>
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8000fe0:	206b      	movs	r0, #107	; 0x6b
 8000fe2:	f7ff ff65 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8000fe6:	206b      	movs	r0, #107	; 0x6b
 8000fe8:	f7ff ff44 	bl	8000e74 <__NVIC_EnableIRQ>

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <USB_Init+0x50>)
 8000fee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff2:	619a      	str	r2, [r3, #24]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <USB_Init+0x50>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	779a      	strb	r2, [r3, #30]
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <USB_Init+0x54>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000020 	.word	0x20000020
 800100c:	20000000 	.word	0x20000000
 8001010:	20000d90 	.word	0x20000d90

08001014 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  if(device.IsConfigured)
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <EVENT_USB_Device_Reset+0x2c>)
 8001036:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <EVENT_USB_Device_Reset+0x26>
  {
    USB_Init();
 8001044:	f7ff ffba 	bl	8000fbc <USB_Init>
    device.IsConfigured=0;
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <EVENT_USB_Device_Reset+0x2c>)
 800104a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800104e:	f36f 0300 	bfc	r3, #0, #1
 8001052:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
  }
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000d90 	.word	0x20000d90

08001060 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 8001068:	2081      	movs	r0, #129	; 0x81
 800106a:	f000 fdb7 	bl	8001bdc <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	490b      	ldr	r1, [pc, #44]	; (80010a0 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 8001072:	2082      	movs	r0, #130	; 0x82
 8001074:	f000 fdb2 	bl	8001bdc <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 8001078:	2240      	movs	r2, #64	; 0x40
 800107a:	490a      	ldr	r1, [pc, #40]	; (80010a4 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 800107c:	2003      	movs	r0, #3
 800107e:	f000 fdad 	bl	8001bdc <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8001084:	f002 fce8 	bl	8003a58 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 800108a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000b10 	.word	0x20000b10
 80010a0:	20000b50 	.word	0x20000b50
 80010a4:	20000ad0 	.word	0x20000ad0
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000d90 	.word	0x20000d90

080010b0 <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <EVENT_USB_Device_ControlRequest+0x10>)
 80010b6:	f002 fbcf 	bl	8003858 <CDC_Device_ProcessControlRequest>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000

080010c4 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	603a      	str	r2, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	460b      	mov	r3, r1
 80010fe:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8001110:	2300      	movs	r3, #0
 8001112:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType)
 8001114:	7a7b      	ldrb	r3, [r7, #9]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d008      	beq.n	800112c <CALLBACK_USB_GetDescriptor+0x3c>
 800111a:	2b03      	cmp	r3, #3
 800111c:	d00b      	beq.n	8001136 <CALLBACK_USB_GetDescriptor+0x46>
 800111e:	2b01      	cmp	r3, #1
 8001120:	d121      	bne.n	8001166 <CALLBACK_USB_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <CALLBACK_USB_GetDescriptor+0x8c>)
 8001124:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8001126:	2312      	movs	r3, #18
 8001128:	817b      	strh	r3, [r7, #10]
			break;
 800112a:	e01c      	b.n	8001166 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <CALLBACK_USB_GetDescriptor+0x90>)
 800112e:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8001130:	233e      	movs	r3, #62	; 0x3e
 8001132:	817b      	strh	r3, [r7, #10]
			break;
 8001134:	e017      	b.n	8001166 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_String:
			switch (DescriptorNumber)
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d009      	beq.n	8001150 <CALLBACK_USB_GetDescriptor+0x60>
 800113c:	2b02      	cmp	r3, #2
 800113e:	d00c      	beq.n	800115a <CALLBACK_USB_GetDescriptor+0x6a>
 8001140:	2b00      	cmp	r3, #0
 8001142:	d000      	beq.n	8001146 <CALLBACK_USB_GetDescriptor+0x56>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8001144:	e00e      	b.n	8001164 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &LanguageString;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <CALLBACK_USB_GetDescriptor+0x94>)
 8001148:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 800114a:	2304      	movs	r3, #4
 800114c:	817b      	strh	r3, [r7, #10]
					break;
 800114e:	e009      	b.n	8001164 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ManufacturerString;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <CALLBACK_USB_GetDescriptor+0x98>)
 8001152:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8001154:	2358      	movs	r3, #88	; 0x58
 8001156:	817b      	strh	r3, [r7, #10]
					break;
 8001158:	e004      	b.n	8001164 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ProductString;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <CALLBACK_USB_GetDescriptor+0x9c>)
 800115c:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 800115e:	2320      	movs	r3, #32
 8001160:	817b      	strh	r3, [r7, #10]
					break;
 8001162:	bf00      	nop
			break;
 8001164:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	601a      	str	r2, [r3, #0]
	return Size;
 800116c:	897b      	ldrh	r3, [r7, #10]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	0800e4f8 	.word	0x0800e4f8
 8001180:	0800e50c 	.word	0x0800e50c
 8001184:	0800e54c 	.word	0x0800e54c
 8001188:	0800e554 	.word	0x0800e554
 800118c:	0800e5b0 	.word	0x0800e5b0

08001190 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <USBD_HandleEP0_Stall+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2101      	movs	r1, #1
 800119c:	2080      	movs	r0, #128	; 0x80
 800119e:	4798      	blx	r3
	device.EP0_State = IDLE;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <USBD_HandleEP0_Stall+0x28>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <USBD_HandleEP0_Stall+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2118      	movs	r1, #24
 80011b0:	2000      	movs	r0, #0
 80011b2:	4798      	blx	r3
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000d90 	.word	0x20000d90

080011bc <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80011ca:	4bab      	ldr	r3, [pc, #684]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80011cc:	885b      	ldrh	r3, [r3, #2]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 80011d2:	f7ff ff6d 	bl	80010b0 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80011d6:	4ba9      	ldr	r3, [pc, #676]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 80011d8:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80011dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 81fd 	beq.w	80015e2 <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 80011e8:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	f200 81ea 	bhi.w	80015c6 <USB_Device_ProcessControlRequest+0x40a>
 80011f2:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <USB_Device_ProcessControlRequest+0x3c>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	0800136f 	.word	0x0800136f
 80011fc:	0800122d 	.word	0x0800122d
 8001200:	080015c7 	.word	0x080015c7
 8001204:	080014fb 	.word	0x080014fb
 8001208:	080015c7 	.word	0x080015c7
 800120c:	08001453 	.word	0x08001453
 8001210:	080012d3 	.word	0x080012d3
 8001214:	080014c1 	.word	0x080014c1
 8001218:	080012c3 	.word	0x080012c3
 800121c:	08001489 	.word	0x08001489
 8001220:	08001337 	.word	0x08001337
 8001224:	080014c7 	.word	0x080014c7
 8001228:	080015c1 	.word	0x080015c1
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 800122c:	4b92      	ldr	r3, [pc, #584]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d133      	bne.n	80012a0 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8001244:	4b8e      	ldr	r3, [pc, #568]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b04      	cmp	r3, #4
 800124c:	d004      	beq.n	8001258 <USB_Device_ProcessControlRequest+0x9c>
 800124e:	4b8a      	ldr	r3, [pc, #552]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	b29b      	uxth	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d120      	bne.n	800129a <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	4a88      	ldr	r2, [pc, #544]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800125c:	212c      	movs	r1, #44	; 0x2c
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	4413      	add	r3, r2
 8001264:	7a1b      	ldrb	r3, [r3, #8]
 8001266:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800126a:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 800126c:	2b01      	cmp	r3, #1
 800126e:	d114      	bne.n	800129a <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	4a82      	ldr	r2, [pc, #520]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001274:	212c      	movs	r1, #44	; 0x2c
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	441a      	add	r2, r3
 800127c:	7a13      	ldrb	r3, [r2, #8]
 800127e:	f36f 0382 	bfc	r3, #2, #1
 8001282:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8001284:	4b7d      	ldr	r3, [pc, #500]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	4a7b      	ldr	r2, [pc, #492]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 800128c:	8892      	ldrh	r2, [r2, #4]
 800128e:	b292      	uxth	r2, r2
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	2100      	movs	r1, #0
 8001294:	4610      	mov	r0, r2
 8001296:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8001298:	e19b      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 800129a:	f7ff ff79 	bl	8001190 <USBD_HandleEP0_Stall>
			break;
 800129e:	e198      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 80012a0:	4b75      	ldr	r3, [pc, #468]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 80012ac:	4a73      	ldr	r2, [pc, #460]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 80012ae:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80012b2:	f36f 0382 	bfc	r3, #2, #1
 80012b6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 80012ba:	e18a      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 80012bc:	f7ff ff68 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 80012c0:	e187      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	2201      	movs	r2, #1
 80012ca:	496e      	ldr	r1, [pc, #440]	; (8001484 <USB_Device_ProcessControlRequest+0x2c8>)
 80012cc:	2000      	movs	r0, #0
 80012ce:	4798      	blx	r3
		break;
 80012d0:	e17f      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 80012d2:	4b69      	ldr	r3, [pc, #420]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80012d4:	885b      	ldrh	r3, [r3, #2]
 80012d6:	b298      	uxth	r0, r3
 80012d8:	4b67      	ldr	r3, [pc, #412]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	1d3a      	adds	r2, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff ff04 	bl	80010f0 <CALLBACK_USB_GetDescriptor>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]
		if (length==0)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 80012f2:	f7ff ff4d 	bl	8001190 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 80012f6:	e16c      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
			length = length < USB_ControlRequest.wLength ?
 80012f8:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80012fa:	88db      	ldrh	r3, [r3, #6]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4293      	cmp	r3, r2
 8001304:	bf28      	it	cs
 8001306:	4613      	movcs	r3, r2
 8001308:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	2000      	movs	r0, #0
 8001316:	4798      	blx	r3
 8001318:	4603      	mov	r3, r0
 800131a:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a56      	ldr	r2, [pc, #344]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001324:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	461a      	mov	r2, r3
 8001330:	4b52      	ldr	r3, [pc, #328]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8001334:	e14d      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b04      	cmp	r3, #4
 800133e:	d10d      	bne.n	800135c <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8001340:	4b4e      	ldr	r3, [pc, #312]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 8001348:	8892      	ldrh	r2, [r2, #4]
 800134a:	b292      	uxth	r2, r2
 800134c:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001350:	494a      	ldr	r1, [pc, #296]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001352:	4411      	add	r1, r2
 8001354:	2201      	movs	r2, #1
 8001356:	2000      	movs	r0, #0
 8001358:	4798      	blx	r3
			break;
 800135a:	e13a      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b03      	cmp	r3, #3
 8001364:	f040 8132 	bne.w	80015cc <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8001368:	f7ff ff12 	bl	8001190 <USBD_HandleEP0_Stall>
			break;
 800136c:	e131      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11b      	bne.n	80013b2 <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800137c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001380:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800138c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001390:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f107 0108 	add.w	r1, r7, #8
 80013aa:	2202      	movs	r2, #2
 80013ac:	2000      	movs	r0, #0
 80013ae:	4798      	blx	r3
			break;
 80013b0:	e10f      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10f      	bne.n	80013de <USB_Device_ProcessControlRequest+0x222>
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10a      	bne.n	80013de <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f107 0108 	add.w	r1, r7, #8
 80013d6:	2202      	movs	r2, #2
 80013d8:	2000      	movs	r0, #0
 80013da:	4798      	blx	r3
			break;
 80013dc:	e0f9      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 80013ec:	889b      	ldrh	r3, [r3, #4]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d004      	beq.n	800140a <USB_Device_ProcessControlRequest+0x24e>
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <USB_Device_ProcessControlRequest+0x2bc>)
 8001402:	889b      	ldrh	r3, [r3, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d120      	bne.n	800144c <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800140e:	212c      	movs	r1, #44	; 0x2c
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	7a1b      	ldrb	r3, [r3, #8]
 8001418:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800141c:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 800141e:	2b01      	cmp	r3, #1
 8001420:	d114      	bne.n	800144c <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 8001422:	897b      	ldrh	r3, [r7, #10]
 8001424:	4a15      	ldr	r2, [pc, #84]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001426:	212c      	movs	r1, #44	; 0x2c
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	7a1b      	ldrb	r3, [r3, #8]
 8001430:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	2202      	movs	r2, #2
 8001446:	2000      	movs	r0, #0
 8001448:	4798      	blx	r3
				break;
 800144a:	e0c2      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 800144c:	f7ff fea0 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 8001450:	e0bf      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8001452:	7cfb      	ldrb	r3, [r7, #19]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 800145a:	2202      	movs	r2, #2
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	e002      	b.n	8001466 <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <USB_Device_ProcessControlRequest+0x2c4>)
 8001462:	2203      	movs	r2, #3
 8001464:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <USB_Device_ProcessControlRequest+0x2c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	7cfa      	ldrb	r2, [r7, #19]
 800146e:	2100      	movs	r1, #0
 8001470:	4610      	mov	r0, r2
 8001472:	4798      	blx	r3
		break;
 8001474:	e0ad      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
 8001476:	bf00      	nop
 8001478:	200010e0 	.word	0x200010e0
 800147c:	20000d90 	.word	0x20000d90
 8001480:	200010dd 	.word	0x200010dd
 8001484:	20000ec9 	.word	0x20000ec9

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8001490:	f7ff fde6 	bl	8001060 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 800149a:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 800149c:	2203      	movs	r2, #3
 800149e:	701a      	strb	r2, [r3, #0]
			break;
 80014a0:	e097      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 80014a2:	4b52      	ldr	r3, [pc, #328]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 80014a4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 80014b8:	e08b      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 80014ba:	f7ff fe69 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 80014be:	e088      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 80014c0:	f7ff fe66 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 80014c4:	e085      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d10c      	bne.n	80014ea <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 80014d0:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 80014e8:	e073      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d16d      	bne.n	80015d0 <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 80014f4:	f7ff fe4c 	bl	8001190 <USBD_HandleEP0_Stall>
			break;
 80014f8:	e06b      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d102      	bne.n	8001506 <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 8001500:	f7ff fe46 	bl	8001190 <USBD_HandleEP0_Stall>
			break;
 8001504:	e065      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b04      	cmp	r3, #4
 800150e:	d138      	bne.n	8001582 <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 8001510:	7cfb      	ldrb	r3, [r7, #19]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <USB_Device_ProcessControlRequest+0x370>
 8001516:	2b01      	cmp	r3, #1
 8001518:	d000      	beq.n	800151c <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 800151a:	e05a      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 800151c:	4a33      	ldr	r2, [pc, #204]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 800151e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 800152a:	e029      	b.n	8001580 <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8001538:	897b      	ldrh	r3, [r7, #10]
 800153a:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 8001550:	f7ff fe1e 	bl	8001190 <USBD_HandleEP0_Stall>
				break;
 8001554:	e013      	b.n	800157e <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8001556:	897b      	ldrh	r3, [r7, #10]
 8001558:	4a24      	ldr	r2, [pc, #144]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 800155a:	212c      	movs	r1, #44	; 0x2c
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	441a      	add	r2, r3
 8001562:	7a13      	ldrb	r3, [r2, #8]
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 8001572:	8892      	ldrh	r2, [r2, #4]
 8001574:	b292      	uxth	r2, r2
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	2101      	movs	r1, #1
 800157a:	4610      	mov	r0, r2
 800157c:	4798      	blx	r3
				break;
 800157e:	bf00      	nop
			break;
 8001580:	e027      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <USB_Device_ProcessControlRequest+0x434>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b03      	cmp	r3, #3
 800158a:	d116      	bne.n	80015ba <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 800158c:	7cfb      	ldrb	r3, [r7, #19]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d113      	bne.n	80015ba <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 800159a:	2b02      	cmp	r3, #2
 800159c:	d10d      	bne.n	80015ba <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <USB_Device_ProcessControlRequest+0x438>)
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d107      	bne.n	80015ba <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 80015ac:	7a13      	ldrb	r3, [r2, #8]
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 80015b4:	f7ff fdec 	bl	8001190 <USBD_HandleEP0_Stall>
				break;
 80015b8:	e00b      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 80015ba:	f7ff fde9 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 80015be:	e008      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 80015c0:	f7ff fde6 	bl	8001190 <USBD_HandleEP0_Stall>
		break;
 80015c4:	e005      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 80015c6:	f7ff fde3 	bl	8001190 <USBD_HandleEP0_Stall>
 80015ca:	e002      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		break;
 80015cc:	bf00      	nop
 80015ce:	e000      	b.n	80015d2 <USB_Device_ProcessControlRequest+0x416>
		break;
 80015d0:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <USB_Device_ProcessControlRequest+0x430>)
 80015d4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80015d8:	f36f 0341 	bfc	r3, #1, #1
 80015dc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 80015e0:	e000      	b.n	80015e4 <USB_Device_ProcessControlRequest+0x428>
		return;
 80015e2:	bf00      	nop
}
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000d90 	.word	0x20000d90
 80015f0:	200010dd 	.word	0x200010dd
 80015f4:	200010e0 	.word	0x200010e0

080015f8 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 80015fe:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001602:	2b02      	cmp	r3, #2
 8001604:	d109      	bne.n	800161a <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	2100      	movs	r1, #0
 800160e:	2000      	movs	r0, #0
 8001610:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 8001614:	2205      	movs	r2, #5
 8001616:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 800161c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001620:	2b03      	cmp	r3, #3
 8001622:	d10b      	bne.n	800163c <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 800162c:	7912      	ldrb	r2, [r2, #4]
 800162e:	2118      	movs	r1, #24
 8001630:	4610      	mov	r0, r2
 8001632:	4798      	blx	r3
		device.EP0_State = IDLE;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <USBD_HandleEP0_IN+0x48>)
 8001636:	2201      	movs	r2, #1
 8001638:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000d90 	.word	0x20000d90

08001644 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 800164a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800164e:	2b04      	cmp	r3, #4
 8001650:	d10c      	bne.n	800166c <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 8001652:	f7ff fdb3 	bl	80011bc <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2000      	movs	r0, #0
 8001662:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 8001666:	2203      	movs	r2, #3
 8001668:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 800166e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10b      	bne.n	800168e <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 800167e:	7912      	ldrb	r2, [r2, #4]
 8001680:	2118      	movs	r1, #24
 8001682:	4610      	mov	r0, r2
 8001684:	4798      	blx	r3
		device.EP0_State = IDLE;
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <USBD_HandleEP0_OUT+0x50>)
 8001688:	2201      	movs	r2, #1
 800168a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000d90 	.word	0x20000d90

08001698 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	2208      	movs	r2, #8
 80016a6:	4920      	ldr	r1, [pc, #128]	; (8001728 <USBD_HandleEP0_SETUP+0x90>)
 80016a8:	2000      	movs	r0, #0
 80016aa:	4798      	blx	r3
 80016ac:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 80016ae:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 80016b0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d12c      	bne.n	800171c <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <USBD_HandleEP0_SETUP+0x90>)
 80016c4:	88db      	ldrh	r3, [r3, #6]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 80016ce:	2203      	movs	r2, #3
 80016d0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 80016d4:	f7ff fd72 	bl	80011bc <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2000      	movs	r0, #0
 80016e4:	4798      	blx	r3
 80016e6:	e01a      	b.n	800171e <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <USBD_HandleEP0_SETUP+0x90>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da06      	bge.n	8001700 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 80016fa:	f7ff fd5f 	bl	80011bc <USB_Device_ProcessControlRequest>
 80016fe:	e00e      	b.n	800171e <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 8001702:	2204      	movs	r2, #4
 8001704:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <USBD_HandleEP0_SETUP+0x8c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <USBD_HandleEP0_SETUP+0x90>)
 8001710:	88d2      	ldrh	r2, [r2, #6]
 8001712:	b292      	uxth	r2, r2
 8001714:	4611      	mov	r1, r2
 8001716:	2000      	movs	r0, #0
 8001718:	4798      	blx	r3
 800171a:	e000      	b.n	800171e <USBD_HandleEP0_SETUP+0x86>
		return;
 800171c:	bf00      	nop
		}
	}
}
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000d90 	.word	0x20000d90
 8001728:	200010e0 	.word	0x200010e0

0800172c <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b09      	cmp	r3, #9
 800173a:	f200 80fd 	bhi.w	8001938 <USBD_SignalDeviceEventHandler+0x20c>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <USBD_SignalDeviceEventHandler+0x18>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	0800189b 	.word	0x0800189b
 8001748:	08001889 	.word	0x08001889
 800174c:	08001877 	.word	0x08001877
 8001750:	0800187d 	.word	0x0800187d
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001939 	.word	0x08001939
 800175c:	08001921 	.word	0x08001921
 8001760:	08001911 	.word	0x08001911
 8001764:	08001939 	.word	0x08001939
 8001768:	08001871 	.word	0x08001871
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 800176c:	4b74      	ldr	r3, [pc, #464]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001774:	2201      	movs	r2, #1
 8001776:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 800177c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8001780:	f36f 0382 	bfc	r3, #2, #1
 8001784:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e050      	b.n	8001830 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 800178e:	4a6d      	ldr	r2, [pc, #436]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	441a      	add	r2, r3
 800179a:	8913      	ldrh	r3, [r2, #8]
 800179c:	f36f 1304 	bfc	r3, #4, #1
 80017a0:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 80017a2:	4a68      	ldr	r2, [pc, #416]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	441a      	add	r2, r3
 80017ae:	8913      	ldrh	r3, [r2, #8]
 80017b0:	f36f 03c3 	bfc	r3, #3, #1
 80017b4:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 80017b6:	4a63      	ldr	r2, [pc, #396]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	441a      	add	r2, r3
 80017c2:	7a13      	ldrb	r3, [r2, #8]
 80017c4:	f36f 0382 	bfc	r3, #2, #1
 80017c8:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02c      	beq.n	800182a <USBD_SignalDeviceEventHandler+0xfe>
 80017d0:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	7a1b      	ldrb	r3, [r3, #8]
 80017de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 80017e8:	4b56      	ldr	r3, [pc, #344]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4955      	ldr	r1, [pc, #340]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	202c      	movs	r0, #44	; 0x2c
 80017f4:	fb00 f202 	mul.w	r2, r0, r2
 80017f8:	440a      	add	r2, r1
 80017fa:	3204      	adds	r2, #4
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	4610      	mov	r0, r2
 8001800:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8001802:	4a50      	ldr	r2, [pc, #320]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	441a      	add	r2, r3
 800180e:	7a13      	ldrb	r3, [r2, #8]
 8001810:	f36f 0300 	bfc	r3, #0, #1
 8001814:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8001816:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	441a      	add	r2, r3
 8001822:	7a13      	ldrb	r3, [r2, #8]
 8001824:	f36f 0341 	bfc	r3, #1, #1
 8001828:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b06      	cmp	r3, #6
 8001834:	ddab      	ble.n	800178e <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e009      	b.n	8001858 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8001844:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	ddf2      	ble.n	8001844 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001866:	7912      	ldrb	r2, [r2, #4]
 8001868:	2118      	movs	r1, #24
 800186a:	4610      	mov	r0, r2
 800186c:	4798      	blx	r3
		break;
 800186e:	e064      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8001870:	f7ff fc28 	bl	80010c4 <EVENT_USB_Device_StartOfFrame>
		break;
 8001874:	e061      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8001876:	f7ff fbcd 	bl	8001014 <EVENT_USB_Device_Connect>
		break;
 800187a:	e05e      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8001882:	f7ff fbce 	bl	8001022 <EVENT_USB_Device_Disconnect>
		break;
 8001886:	e058      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	2000      	movs	r0, #0
 8001896:	4798      	blx	r3
		 break;
 8001898:	e04f      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 80018a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018a4:	2100      	movs	r1, #0
 80018a6:	4827      	ldr	r0, [pc, #156]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018a8:	f005 fcb4 	bl	8007214 <memset>
		 device.Driver = &Driver_USBD0;
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <USBD_SignalDeviceEventHandler+0x21c>)
 80018b0:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018bc:	4a23      	ldr	r2, [pc, #140]	; (800194c <USBD_SignalDeviceEventHandler+0x220>)
 80018be:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018ca:	4a21      	ldr	r2, [pc, #132]	; (8001950 <USBD_SignalDeviceEventHandler+0x224>)
 80018cc:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018d8:	7913      	ldrb	r3, [r2, #4]
 80018da:	f36f 13c7 	bfc	r3, #7, #1
 80018de:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018e2:	7a13      	ldrb	r3, [r2, #8]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018ec:	7a13      	ldrb	r3, [r2, #8]
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 80018f6:	8913      	ldrh	r3, [r2, #8]
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	f361 138c 	bfi	r3, r1, #6, #7
 80018fe:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	2000      	movs	r0, #0
 800190c:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 800190e:	e014      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001912:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 8001918:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 800191a:	f7ff fbda 	bl	80010d2 <EVENT_USB_Device_WakeUp>
		break;
 800191e:	e00c      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <USBD_SignalDeviceEventHandler+0x218>)
 8001928:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <USBD_SignalDeviceEventHandler+0x214>)
 800192e:	2205      	movs	r2, #5
 8001930:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8001932:	f7ff fbd5 	bl	80010e0 <EVENT_USB_Device_Suspend>
		break;
 8001936:	e000      	b.n	800193a <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8001938:	bf00      	nop
	}
}
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200010dd 	.word	0x200010dd
 8001944:	20000d90 	.word	0x20000d90
 8001948:	0800e5d4 	.word	0x0800e5d4
 800194c:	20000b90 	.word	0x20000b90
 8001950:	20000c90 	.word	0x20000c90

08001954 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	222c      	movs	r2, #44	; 0x2c
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8001978:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 800197a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800197e:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001982:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8001986:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001992:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80019a0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d013      	beq.n	80019d2 <USBD_SignalEndpointEvent_Handler+0x7e>
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d03a      	beq.n	8001a24 <USBD_SignalEndpointEvent_Handler+0xd0>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 808e 	bne.w	8001ad0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	8893      	ldrh	r3, [r2, #4]
 80019b8:	f36f 03c3 	bfc	r3, #3, #1
 80019bc:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80019c0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d000      	beq.n	80019ca <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 80019c8:	e002      	b.n	80019d0 <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 80019ca:	f7ff fe65 	bl	8001698 <USBD_HandleEP0_SETUP>
			break;
 80019ce:	bf00      	nop
		}
		break;
 80019d0:	e07e      	b.n	8001ad0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	8893      	ldrh	r3, [r2, #4]
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d110      	bne.n	8001a06 <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80019ea:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	7810      	ldrb	r0, [r2, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	6911      	ldr	r1, [r2, #16]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	6952      	ldr	r2, [r2, #20]
 80019fc:	4798      	blx	r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	8893      	ldrh	r3, [r2, #4]
 8001a0a:	f36f 03c3 	bfc	r3, #3, #1
 8001a0e:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001a12:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d000      	beq.n	8001a1c <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 8001a1a:	e002      	b.n	8001a22 <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 8001a1c:	f7ff fe12 	bl	8001644 <USBD_HandleEP0_OUT>
			break;
 8001a20:	bf00      	nop
		}
		break;
 8001a22:	e055      	b.n	8001ad0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	7810      	ldrb	r0, [r2, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a3e:	4798      	blx	r3
 8001a40:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	441a      	add	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 8001a5a:	e041      	b.n	8001ae0 <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d120      	bne.n	8001aac <USBD_SignalEndpointEvent_Handler+0x158>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01c      	beq.n	8001aac <USBD_SignalEndpointEvent_Handler+0x158>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <USBD_SignalEndpointEvent_Handler+0x198>)
 8001a78:	88d2      	ldrh	r2, [r2, #6]
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d015      	beq.n	8001aac <USBD_SignalEndpointEvent_Handler+0x158>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	8892      	ldrh	r2, [r2, #4]
 8001a88:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a92:	fb02 f201 	mul.w	r2, r2, r1
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	7810      	ldrb	r0, [r2, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	8893      	ldrh	r3, [r2, #4]
 8001ab6:	f36f 1304 	bfc	r3, #4, #1
 8001aba:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001abe:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d000      	beq.n	8001ac8 <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 8001ac6:	e002      	b.n	8001ace <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 8001ac8:	f7ff fd96 	bl	80015f8 <USBD_HandleEP0_IN>
			break;
 8001acc:	bf00      	nop
		}
		break;
 8001ace:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 8001ad0:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001ad2:	7cfb      	ldrb	r3, [r7, #19]
 8001ad4:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001ada:	7cbb      	ldrb	r3, [r7, #18]
 8001adc:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000d90 	.word	0x20000d90
 8001aec:	200010e0 	.word	0x200010e0

08001af0 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 8001afc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b00:	2100      	movs	r1, #0
 8001b02:	4829      	ldr	r0, [pc, #164]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b04:	f005 fb86 	bl	8007214 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <USBD_Initialize+0xbc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <USBD_Initialize+0xc0>)
 8001b12:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <USBD_Initialize+0xc4>)
 8001b20:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b2c:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <USBD_Initialize+0xc8>)
 8001b2e:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b36:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b3a:	7913      	ldrb	r3, [r2, #4]
 8001b3c:	f36f 13c7 	bfc	r3, #7, #1
 8001b40:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 8001b42:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b44:	7a13      	ldrb	r3, [r2, #8]
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b4e:	7a13      	ldrb	r3, [r2, #8]
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b58:	8913      	ldrh	r3, [r2, #8]
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	f361 138c 	bfi	r3, r1, #6, #7
 8001b60:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <USBD_Initialize+0x8c>
		return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7a:	e011      	b.n	8001ba0 <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <USBD_Initialize+0xb8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4798      	blx	r3
		return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9c:	e000      	b.n	8001ba0 <USBD_Initialize+0xb0>
	}

	return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000d90 	.word	0x20000d90
 8001bac:	200010dd 	.word	0x200010dd
 8001bb0:	0800e5d4 	.word	0x0800e5d4
 8001bb4:	20000b90 	.word	0x20000b90
 8001bb8:	20000c90 	.word	0x20000c90

08001bbc <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <USB_IsEnumDone+0x1c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	4798      	blx	r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <USB_IsEnumDone+0x16>
		return 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <USB_IsEnumDone+0x18>
	else
		return 0;
 8001bd2:	2300      	movs	r3, #0
 }
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000d90 	.word	0x20000d90

08001bdc <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da12      	bge.n	8001c22 <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <USBD_SetEndpointBuffer+0x78>)
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3320      	adds	r3, #32
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	88ba      	ldrh	r2, [r7, #4]
 8001c12:	4910      	ldr	r1, [pc, #64]	; (8001c54 <USBD_SetEndpointBuffer+0x78>)
 8001c14:	202c      	movs	r0, #44	; 0x2c
 8001c16:	fb00 f303 	mul.w	r3, r0, r3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3324      	adds	r3, #36	; 0x24
 8001c1e:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 8001c20:	e011      	b.n	8001c46 <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <USBD_SetEndpointBuffer+0x78>)
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3314      	adds	r3, #20
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <USBD_SetEndpointBuffer+0x78>)
 8001c3a:	202c      	movs	r0, #44	; 0x2c
 8001c3c:	fb00 f303 	mul.w	r3, r0, r3
 8001c40:	440b      	add	r3, r1
 8001c42:	3318      	adds	r3, #24
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000d90 	.word	0x20000d90

08001c58 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e01c      	b.n	8001ca4 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <XMC_USBD_lDeviceActive+0x64>)
 8001c6e:	2134      	movs	r1, #52	; 0x34
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <XMC_USBD_lDeviceActive+0x42>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <XMC_USBD_lDeviceActive+0x64>)
 8001c86:	2134      	movs	r1, #52	; 0x34
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7b1b      	ldrb	r3, [r3, #12]
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3dd      	bcc.n	8001c6a <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	20000ed4 	.word	0x20000ed4

08001cc0 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2234      	movs	r2, #52	; 0x34
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <XMC_USBD_lReadFifo+0xe4>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <XMC_USBD_lReadFifo+0xe4>)
 8001cda:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <XMC_USBD_lReadFifo+0xe4>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3370      	adds	r3, #112	; 0x70
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001cfc:	7b7b      	ldrb	r3, [r7, #13]
 8001cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d047      	beq.n	8001d98 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	e00a      	b.n	8001d2c <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3f0      	bcc.n	8001d16 <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d021      	beq.n	8001d80 <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	e015      	b.n	8001d74 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	22ff      	movs	r2, #255	; 0xff
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	401a      	ands	r2, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	fa22 f003 	lsr.w	r0, r2, r3
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	440b      	add	r3, r1
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2c2      	uxtb	r2, r0
 8001d6c:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	4413      	add	r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8e3      	bhi.n	8001d48 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	441a      	add	r2, r3
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	441a      	add	r2, r3
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001d98:	bf00      	nop
 8001d9a:	372c      	adds	r7, #44	; 0x2c
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000ed4 	.word	0x20000ed4

08001da8 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <XMC_USBD_lWriteFifo+0xa0>)
 8001dbc:	3378      	adds	r3, #120	; 0x78
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <XMC_USBD_lWriteFifo+0xa0>)
 8001dd0:	336a      	adds	r3, #106	; 0x6a
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e023      	b.n	8001e3a <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3303      	adds	r3, #3
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001dfa:	893b      	ldrh	r3, [r7, #8]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d904      	bls.n	8001e0e <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001e04:	893b      	ldrh	r3, [r7, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e00c      	b.n	8001e2e <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]
      i++;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	3301      	adds	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	1d1a      	adds	r2, r3, #4
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3ee      	bcc.n	8001e14 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	617b      	str	r3, [r7, #20]
  }
  return result;
 8001e3a:	697b      	ldr	r3, [r7, #20]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000ed4 	.word	0x20000ed4

08001e4c <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f362 138a 	bfi	r3, r2, #6, #5
 8001e70:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <XMC_USBD_lFlushTXFifo+0x78>)
 8001e74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e002      	b.n	8001e88 <XMC_USBD_lFlushTXFifo+0x3c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8e:	d3f8      	bcc.n	8001e82 <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <XMC_USBD_lFlushTXFifo+0x78>)
 8001e92:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f4      	bne.n	8001e90 <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001eaa:	bf00      	nop
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	60fa      	str	r2, [r7, #12]
 8001eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb6:	d3f9      	bcc.n	8001eac <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	20000ed4 	.word	0x20000ed4

08001ec8 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <XMC_USBD_lFlushRXFifo+0x64>)
 8001edc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	e002      	b.n	8001ef0 <XMC_USBD_lFlushRXFifo+0x28>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef6:	d3f8      	bcc.n	8001eea <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <XMC_USBD_lFlushRXFifo+0x64>)
 8001efa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ea      	bne.n	8001ee4 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8001f12:	bf00      	nop
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f1e:	d3f9      	bcc.n	8001f14 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000ed4 	.word	0x20000ed4

08001f30 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 8001f36:	2301      	movs	r3, #1
 8001f38:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001f42:	e005      	b.n	8001f50 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	80fb      	strh	r3, [r7, #6]
    i++;
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d807      	bhi.n	8001f66 <XMC_USBD_lAssignTXFifo+0x36>
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <XMC_USBD_lAssignTXFifo+0x6c>)
 8001f58:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ee      	bne.n	8001f44 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <XMC_USBD_lAssignTXFifo+0x6c>)
 8001f68:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <XMC_USBD_lAssignTXFifo+0x6c>)
 8001f78:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <XMC_USBD_lAssignTXFifo+0x6c>)
 8001f84:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8001f88:	797b      	ldrb	r3, [r7, #5]
 8001f8a:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001f8c:	793b      	ldrb	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000ed4 	.word	0x20000ed4

08001fa0 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <XMC_USBD_lUnassignFifo+0x34>)
 8001fac:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <XMC_USBD_lUnassignFifo+0x34>)
 8001fc4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	20000ed4 	.word	0x20000ed4

08001fd8 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6892      	ldr	r2, [r2, #8]
 8001ff2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d909      	bls.n	800200e <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6892      	ldr	r2, [r2, #8]
 8002002:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002006:	441a      	add	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
 800200c:	e003      	b.n	8002016 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d118      	bne.n	8002056 <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	7893      	ldrb	r3, [r2, #2]
 800202e:	2101      	movs	r1, #1
 8002030:	f361 03c4 	bfi	r3, r1, #3, #2
 8002034:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	78d3      	ldrb	r3, [r2, #3]
 800203a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800203e:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002048:	b2d9      	uxtb	r1, r3
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	7813      	ldrb	r3, [r2, #0]
 800204e:	f361 0306 	bfi	r3, r1, #0, #7
 8002052:	7013      	strb	r3, [r2, #0]
 8002054:	e032      	b.n	80020bc <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f36f 0312 	bfc	r3, #0, #19
 8002064:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8002066:	8a7b      	ldrh	r3, [r7, #18]
 8002068:	2201      	movs	r2, #1
 800206a:	f362 03cc 	bfi	r3, r2, #3, #10
 800206e:	827b      	strh	r3, [r7, #18]
 8002070:	e024      	b.n	80020bc <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6852      	ldr	r2, [r2, #4]
 8002080:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4413      	add	r3, r2
 8002088:	3b01      	subs	r3, #1
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6852      	ldr	r2, [r2, #4]
 800208e:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	fbb3 f3f2 	udiv	r3, r3, r2
 8002098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209c:	b29a      	uxth	r2, r3
 800209e:	8a7b      	ldrh	r3, [r7, #18]
 80020a0:	f362 03cc 	bfi	r3, r2, #3, #10
 80020a4:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f362 0312 	bfi	r3, r2, #0, #19
 80020ba:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <XMC_USBD_lStartReadXfer+0x170>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	7b5b      	ldrb	r3, [r3, #13]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <XMC_USBD_lStartReadXfer+0x174>)
 80020d6:	3370      	adds	r3, #112	; 0x70
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	460a      	mov	r2, r1
 80020e0:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <XMC_USBD_lStartReadXfer+0x174>)
 80020ee:	3370      	adds	r3, #112	; 0x70
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <XMC_USBD_lStartReadXfer+0x174>)
 8002106:	3370      	adds	r3, #112	; 0x70
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002120:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <XMC_USBD_lStartReadXfer+0x174>)
 800212e:	3370      	adds	r3, #112	; 0x70
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000ed0 	.word	0x20000ed0
 800214c:	20000ed4 	.word	0x20000ed4

08002150 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8002168:	336a      	adds	r3, #106	; 0x6a
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6892      	ldr	r2, [r2, #8]
 8002180:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002184:	4293      	cmp	r3, r2
 8002186:	d204      	bcs.n	8002192 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
 8002190:	e008      	b.n	80021a4 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800219e:	441a      	add	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f36f 0312 	bfc	r3, #0, #19
 80021b2:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f362 03cc 	bfi	r3, r2, #3, #10
 80021bc:	81fb      	strh	r3, [r7, #14]
 80021be:	e06b      	b.n	8002298 <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d110      	bne.n	80021f0 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f362 03cc 	bfi	r3, r2, #3, #10
 80021d6:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f362 0312 	bfi	r3, r2, #0, #19
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e02a      	b.n	8002246 <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f362 0312 	bfi	r3, r2, #0, #19
 8002204:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	b29b      	uxth	r3, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8002220:	b2db      	uxtb	r3, r3
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6852      	ldr	r2, [r2, #4]
 800222e:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8002232:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8002234:	fb93 f3f2 	sdiv	r3, r3, r2
 8002238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223c:	b29a      	uxth	r2, r3
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	f362 03cc 	bfi	r3, r2, #3, #10
 8002244:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <XMC_USBD_lStartWriteXfer+0x194>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	7b5b      	ldrb	r3, [r3, #13]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10c      	bne.n	800226a <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8002260:	336a      	adds	r3, #106	; 0x6a
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	460a      	mov	r2, r1
 8002268:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <XMC_USBD_lStartWriteXfer+0x194>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	7b5b      	ldrb	r3, [r3, #13]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d111      	bne.n	8002298 <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8002276:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800227a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	2301      	movs	r3, #1
 800228a:	fa03 f202 	lsl.w	r2, r3, r2
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8002290:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002294:	430a      	orrs	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 80022a4:	336a      	adds	r3, #106	; 0x6a
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <XMC_USBD_lStartWriteXfer+0x190>)
 80022ca:	336a      	adds	r3, #106	; 0x6a
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000ed4 	.word	0x20000ed4
 80022e4:	20000ed0 	.word	0x20000ed0

080022e8 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 80022f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 80022fa:	7d3b      	ldrb	r3, [r7, #20]
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8002302:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002304:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e01a      	b.n	8002348 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8002312:	4a48      	ldr	r2, [pc, #288]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3370      	adds	r3, #112	; 0x70
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 8002322:	7efb      	ldrb	r3, [r7, #27]
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 800232a:	7ebb      	ldrb	r3, [r7, #26]
 800232c:	f36f 1345 	bfc	r3, #5, #1
 8002330:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8002332:	4a40      	ldr	r2, [pc, #256]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3370      	adds	r3, #112	; 0x70
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b06      	cmp	r3, #6
 800234c:	d9e1      	bls.n	8002312 <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 800234e:	4b39      	ldr	r3, [pc, #228]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002350:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 800235c:	2310      	movs	r3, #16
 800235e:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8002364:	4b33      	ldr	r3, [pc, #204]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002366:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e011      	b.n	8002398 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3304      	adds	r3, #4
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	089a      	lsrs	r2, r3, #2
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 800237e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b01      	subs	r3, #1
 8002386:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800238a:	3340      	adds	r3, #64	; 0x40
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b06      	cmp	r3, #6
 800239c:	d9ea      	bls.n	8002374 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800239e:	2010      	movs	r0, #16
 80023a0:	f7ff fd54 	bl	8001e4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fd51 	bl	8001e4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80023aa:	f7ff fd8d 	bl	8001ec8 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 80023b2:	7b3b      	ldrb	r3, [r7, #12]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 80023c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 80023cc:	200f      	movs	r0, #15
 80023ce:	f000 fbfd 	bl	8002bcc <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 80023d2:	200f      	movs	r0, #15
 80023d4:	f000 fc12 	bl	8002bfc <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 80023da:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 80023e2:	893b      	ldrh	r3, [r7, #8]
 80023e4:	f36f 130a 	bfc	r3, #4, #7
 80023e8:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 80023ec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7b5b      	ldrb	r3, [r3, #13]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d104      	bne.n	8002406 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 80023fe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002408:	6853      	ldr	r3, [r2, #4]
 800240a:	f36f 1304 	bfc	r3, #4, #1
 800240e:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8002410:	4a08      	ldr	r2, [pc, #32]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002412:	6853      	ldr	r3, [r2, #4]
 8002414:	f36f 03c3 	bfc	r3, #3, #1
 8002418:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <XMC_USBD_lHandleUSBReset+0x14c>)
 800241c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002420:	2004      	movs	r0, #4
 8002422:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8002424:	2004      	movs	r0, #4
 8002426:	f000 fb25 	bl	8002a74 <XMC_USBD_ClearEvent>
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000ed4 	.word	0x20000ed4

08002438 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <XMC_USBD_lHandleOTGInt+0x44>)
 8002440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8002448:	793b      	ldrb	r3, [r7, #4]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <XMC_USBD_lHandleOTGInt+0x44>)
 8002456:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800245a:	f36f 0382 	bfc	r3, #2, #1
 800245e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <XMC_USBD_lHandleOTGInt+0x44>)
 8002464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002468:	2001      	movs	r0, #1
 800246a:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fb66 	bl	8002b40 <XMC_USBD_lClearEventOTG>

}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000ed4 	.word	0x20000ed4

08002480 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 8002488:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	f36f 030a 	bfc	r3, #0, #11
 8002496:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 800249a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80024a4:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80024b2:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80024c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c4:	2002      	movs	r0, #2
 80024c6:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80024ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 80024d2:	787b      	ldrb	r3, [r7, #1]
 80024d4:	2209      	movs	r2, #9
 80024d6:	f362 0385 	bfi	r3, r2, #2, #4
 80024da:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80024de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 80024e6:	200b      	movs	r0, #11
 80024e8:	f000 fac4 	bl	8002a74 <XMC_USBD_ClearEvent>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000ed4 	.word	0x20000ed4

080024f8 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8002500:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002502:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 800250a:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800250c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002516:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 800251e:	8bfa      	ldrh	r2, [r7, #30]
 8002520:	8b7b      	ldrh	r3, [r7, #26]
 8002522:	4013      	ands	r3, r2
 8002524:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8002530:	e0ae      	b.n	8002690 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8002532:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002538:	fa42 f303 	asr.w	r3, r2, r3
 800253c:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 800253e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8002546:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 809c 	beq.w	8002686 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 800254e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002552:	2234      	movs	r2, #52	; 0x34
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800255a:	4413      	add	r3, r2
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800255e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002562:	4a53      	ldr	r2, [pc, #332]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002564:	3370      	adds	r3, #112	; 0x70
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7b5b      	ldrb	r3, [r3, #13]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 800257c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002582:	3370      	adds	r3, #112	; 0x70
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800258e:	7c3b      	ldrb	r3, [r7, #16]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d033      	beq.n	8002602 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	7913      	ldrb	r3, [r2, #4]
 800259e:	f36f 1345 	bfc	r3, #5, #1
 80025a2:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10e      	bne.n	80025ca <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	78db      	ldrb	r3, [r3, #3]
 80025b2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80025ba:	4613      	mov	r3, r2
 80025bc:	075b      	lsls	r3, r3, #29
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f103 0218 	add.w	r2, r3, #24
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b5b      	ldrb	r3, [r3, #13]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d106      	bne.n	80025e0 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	441a      	add	r2, r3
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	6853      	ldr	r3, [r2, #4]
 80025e4:	f36f 1304 	bfc	r3, #4, #1
 80025e8:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 80025ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025f0:	2100      	movs	r1, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 80025f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025fa:	4619      	mov	r1, r3
 80025fc:	2008      	movs	r0, #8
 80025fe:	f000 facd 	bl	8002b9c <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8002602:	7c3b      	ldrb	r3, [r7, #16]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d034      	beq.n	8002678 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7b5b      	ldrb	r3, [r3, #13]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	441a      	add	r2, r3
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	441a      	add	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	429a      	cmp	r2, r3
 800264c:	d111      	bne.n	8002672 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6853      	ldr	r3, [r2, #4]
 800265a:	f36f 1304 	bfc	r3, #4, #1
 800265e:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002662:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002666:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800266a:	2101      	movs	r1, #1
 800266c:	4610      	mov	r0, r2
 800266e:	4798      	blx	r3
 8002670:	e002      	b.n	8002678 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8002672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002674:	f7ff fcb0 	bl	8001fd8 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fa8b 	bl	8002b9c <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8002686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800268a:	3301      	adds	r3, #1
 800268c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8002690:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002696:	fa42 f303 	asr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f af49 	bne.w	8002532 <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80026a0:	200d      	movs	r0, #13
 80026a2:	f000 f9e7 	bl	8002a74 <XMC_USBD_ClearEvent>
}
 80026a6:	bf00      	nop
 80026a8:	3730      	adds	r7, #48	; 0x30
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000ed4 	.word	0x20000ed4

080026b4 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 80026bc:	4b6b      	ldr	r3, [pc, #428]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 80026be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 80026c6:	4b69      	ldr	r3, [pc, #420]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 80026c8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 80026d4:	8abb      	ldrh	r3, [r7, #20]
 80026d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 80026de:	e0b6      	b.n	800284e <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 80026e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80026e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e6:	fa42 f303 	asr.w	r3, r2, r3
 80026ea:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 80026ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 80026f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80a4 	beq.w	8002844 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 80026fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002700:	2234      	movs	r2, #52	; 0x34
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	4a59      	ldr	r2, [pc, #356]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8002708:	4413      	add	r3, r2
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800270c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002710:	4a56      	ldr	r2, [pc, #344]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8002712:	336a      	adds	r3, #106	; 0x6a
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 800271e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8002730:	01db      	lsls	r3, r3, #7
 8002732:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7b5b      	ldrb	r3, [r3, #13]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8002748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 800274e:	336a      	adds	r3, #106	; 0x6a
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7b5b      	ldrb	r3, [r3, #13]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d115      	bne.n	800278c <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 8002760:	7b3b      	ldrb	r3, [r7, #12]
 8002762:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 800276c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800276e:	f7ff fb1b 	bl	8001da8 <XMC_USBD_lWriteFifo>
 8002772:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	441a      	add	r2, r3
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	441a      	add	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 800278c:	7b3b      	ldrb	r3, [r7, #12]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d04e      	beq.n	8002836 <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b5b      	ldrb	r3, [r3, #13]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11d      	bne.n	80027dc <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 80027a0:	897a      	ldrh	r2, [r7, #10]
 80027a2:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <XMC_USBD_lHandleIEPInt+0x128>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	441a      	add	r2, r3
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	441a      	add	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d123      	bne.n	8002830 <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	6853      	ldr	r3, [r2, #4]
 80027ec:	f36f 03c3 	bfc	r3, #3, #1
 80027f0:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7b5b      	ldrb	r3, [r3, #13]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 80027fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002806:	2201      	movs	r2, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8002810:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8002814:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8002816:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <XMC_USBD_lHandleIEPInt+0x1b8>)
 800281a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800281e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	2102      	movs	r1, #2
 800282a:	4610      	mov	r0, r2
 800282c:	4798      	blx	r3
 800282e:	e002      	b.n	8002836 <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8002830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002832:	f7ff fc8d 	bl	8002150 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f994 	bl	8002b6c <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8002844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002848:	3301      	adds	r3, #1
 800284a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 800284e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002854:	fa42 f303 	asr.w	r3, r2, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	f47f af41 	bne.w	80026e0 <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 800285e:	200e      	movs	r0, #14
 8002860:	f000 f908 	bl	8002a74 <XMC_USBD_ClearEvent>
}
 8002864:	bf00      	nop
 8002866:	3730      	adds	r7, #48	; 0x30
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000ed4 	.word	0x20000ed4

08002870 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <XMC_USBD_lHandleRxFLvl+0x80>)
 8002878:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	2b05      	cmp	r3, #5
 800288c:	d82a      	bhi.n	80028e4 <XMC_USBD_lHandleRxFLvl+0x74>
 800288e:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <XMC_USBD_lHandleRxFLvl+0x24>)
 8002890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002894:	080028e5 	.word	0x080028e5
 8002898:	080028ad 	.word	0x080028ad
 800289c:	080028e5 	.word	0x080028e5
 80028a0:	080028e5 	.word	0x080028e5
 80028a4:	080028e5 	.word	0x080028e5
 80028a8:	080028c9 	.word	0x080028c9
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80028ac:	793b      	ldrb	r3, [r7, #4]
 80028ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	88bb      	ldrh	r3, [r7, #4]
 80028b8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7ff f9fd 	bl	8001cc0 <XMC_USBD_lReadFifo>
      break;
 80028c6:	e00e      	b.n	80028e6 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80028c8:	793b      	ldrb	r3, [r7, #4]
 80028ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff f9ef 	bl	8001cc0 <XMC_USBD_lReadFifo>
      break;
 80028e2:	e000      	b.n	80028e6 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 80028e4:	bf00      	nop
	}
  /* no need to clear */
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000ed4 	.word	0x20000ed4

080028f4 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 80028fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 8002908:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8002914:	7a3b      	ldrb	r3, [r7, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 8002922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002926:	2009      	movs	r0, #9
 8002928:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 800292a:	2009      	movs	r0, #9
 800292c:	f000 f8a2 	bl	8002a74 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7b5b      	ldrb	r3, [r3, #13]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d119      	bne.n	800296c <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8002938:	7a3b      	ldrb	r3, [r7, #8]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8002944:	7b3b      	ldrb	r3, [r7, #12]
 8002946:	f36f 1304 	bfc	r3, #4, #1
 800294a:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800294c:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 800294e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8002956:	f7ff ff8b 	bl	8002870 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 800295a:	7b3b      	ldrb	r3, [r7, #12]
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 8002964:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8002978:	200a      	movs	r0, #10
 800297a:	f000 f87b 	bl	8002a74 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 800297e:	7a7b      	ldrb	r3, [r7, #9]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 800298c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002990:	2006      	movs	r0, #6
 8002992:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8002994:	2006      	movs	r0, #6
 8002996:	f000 f86d 	bl	8002a74 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 80029a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ac:	2008      	movs	r0, #8
 80029ae:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80029b0:	2008      	movs	r0, #8
 80029b2:	f000 f85f 	bl	8002a74 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 80029c4:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <XMC_USBD_IRQHandler+0x14c>)
 80029d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029d6:	2000      	movs	r0, #0
 80029d8:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f84a 	bl	8002a74 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 80029e0:	7a7b      	ldrb	r3, [r7, #9]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fc7b 	bl	80022e8 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 80029f2:	7a7b      	ldrb	r3, [r7, #9]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 80029fe:	f7ff fd3f 	bl	8002480 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8002a02:	7abb      	ldrb	r3, [r7, #10]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fe50 	bl	80026b4 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8002a14:	7abb      	ldrb	r3, [r7, #10]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fd69 	bl	80024f8 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8002a26:	7a3b      	ldrb	r3, [r7, #8]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8002a32:	f7ff fd01 	bl	8002438 <XMC_USBD_lHandleOTGInt>
  }

}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000ed4 	.word	0x20000ed4

08002a44 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8002a48:	4803      	ldr	r0, [pc, #12]	; (8002a58 <XMC_USBD_Enable+0x14>)
 8002a4a:	f002 fa55 	bl	8004ef8 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8002a4e:	f002 fe39 	bl	80056c4 <XMC_SCU_POWER_EnableUsb>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000080 	.word	0x20000080

08002a5c <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <XMC_USBD_Disable+0x14>)
 8002a62:	f002 fa2b 	bl	8004ebc <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8002a66:	f002 fe3b 	bl	80056e0 <XMC_SCU_POWER_DisableUsb>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000080 	.word	0x20000080

08002a74 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  switch(event)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b0d      	cmp	r3, #13
 8002a86:	d84c      	bhi.n	8002b22 <XMC_USBD_ClearEvent+0xae>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <XMC_USBD_ClearEvent+0x1c>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002ac9 	.word	0x08002ac9
 8002a94:	08002b23 	.word	0x08002b23
 8002a98:	08002b23 	.word	0x08002b23
 8002a9c:	08002b23 	.word	0x08002b23
 8002aa0:	08002ad3 	.word	0x08002ad3
 8002aa4:	08002b23 	.word	0x08002b23
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002ae7 	.word	0x08002ae7
 8002ab0:	08002af1 	.word	0x08002af1
 8002ab4:	08002afb 	.word	0x08002afb
 8002ab8:	08002b05 	.word	0x08002b05
 8002abc:	08002b0f 	.word	0x08002b0f
 8002ac0:	08002b23 	.word	0x08002b23
 8002ac4:	08002b19 	.word	0x08002b19
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ace:	73fb      	strb	r3, [r7, #15]
	  break;
 8002ad0:	e028      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8002ad2:	7b7b      	ldrb	r3, [r7, #13]
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	737b      	strb	r3, [r7, #13]
	  break;
 8002ada:	e023      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	737b      	strb	r3, [r7, #13]
	  break;
 8002ae4:	e01e      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	73fb      	strb	r3, [r7, #15]
	  break;
 8002aee:	e019      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	73fb      	strb	r3, [r7, #15]
	  break;
 8002af8:	e014      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8002afa:	7b3b      	ldrb	r3, [r7, #12]
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	733b      	strb	r3, [r7, #12]
	  break;
 8002b02:	e00f      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8002b04:	7b7b      	ldrb	r3, [r7, #13]
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	737b      	strb	r3, [r7, #13]
	  break;
 8002b0c:	e00a      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	737b      	strb	r3, [r7, #13]
	  break;
 8002b16:	e005      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
 8002b1a:	f043 0308 	orr.w	r3, r3, #8
 8002b1e:	73bb      	strb	r3, [r7, #14]
	  break;
 8002b20:	e000      	b.n	8002b24 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8002b22:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <XMC_USBD_ClearEvent+0xc8>)
 8002b26:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	615a      	str	r2, [r3, #20]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000ed4 	.word	0x20000ed4

08002b40 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <XMC_USBD_lClearEventOTG+0x28>)
 8002b52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000ed4 	.word	0x20000ed4

08002b6c <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <XMC_USBD_ClearEventINEP+0x2c>)
 8002b80:	336a      	adds	r3, #106	; 0x6a
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000ed4 	.word	0x20000ed4

08002b9c <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8002bb0:	3370      	adds	r3, #112	; 0x70
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	20000ed4 	.word	0x20000ed4

08002bcc <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002bda:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002bde:	6959      	ldr	r1, [r3, #20]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002be4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002be8:	430a      	orrs	r2, r1
 8002bea:	615a      	str	r2, [r3, #20]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	20000ed4 	.word	0x20000ed4

08002bfc <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <XMC_USBD_EnableEventINEP+0x2c>)
 8002c0a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c0e:	6919      	ldr	r1, [r3, #16]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <XMC_USBD_EnableEventINEP+0x2c>)
 8002c14:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	611a      	str	r2, [r3, #16]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	20000ed4 	.word	0x20000ed4

08002c2c <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8002c36:	793b      	ldrb	r3, [r7, #4]
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8002c3e:	793b      	ldrb	r3, [r7, #4]
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 8002c46:	793b      	ldrb	r3, [r7, #4]
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 8002c4e:	793b      	ldrb	r3, [r7, #4]
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 8002c56:	793b      	ldrb	r3, [r7, #4]
 8002c58:	f36f 1345 	bfc	r3, #5, #1
 8002c5c:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8002c5e:	797b      	ldrb	r3, [r7, #5]
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8002c66:	793b      	ldrb	r3, [r7, #4]
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8002c6e:	793b      	ldrb	r3, [r7, #4]
 8002c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c74:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8002c76:	793b      	ldrb	r3, [r7, #4]
 8002c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7c:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f36f 235f 	bfc	r3, #9, #23
 8002c84:	607b      	str	r3, [r7, #4]
  return cap;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8002c9c:	f7ff fed2 	bl	8002a44 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8002ca0:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <XMC_USBD_Init+0x22c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	e00c      	b.n	8002cc6 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8002cac:	4a85      	ldr	r2, [pc, #532]	; (8002ec4 <XMC_USBD_Init+0x230>)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8002cb6:	4a84      	ldr	r2, [pc, #528]	; (8002ec8 <XMC_USBD_Init+0x234>)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d9ef      	bls.n	8002cac <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8002ccc:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	487e      	ldr	r0, [pc, #504]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002cd4:	f004 fa9e 	bl	8007214 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a7b      	ldr	r2, [pc, #492]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002cde:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4a79      	ldr	r2, [pc, #484]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002ce8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002cf8:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002d04:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e00c      	b.n	8002d28 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	3348      	adds	r3, #72	; 0x48
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	441a      	add	r2, r3
 8002d18:	496c      	ldr	r1, [pc, #432]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	336a      	adds	r3, #106	; 0x6a
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d9ef      	bls.n	8002d0e <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	e00d      	b.n	8002d50 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	3358      	adds	r3, #88	; 0x58
 8002d38:	015b      	lsls	r3, r3, #5
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8002d3e:	4963      	ldr	r1, [pc, #396]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	3370      	adds	r3, #112	; 0x70
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d9ee      	bls.n	8002d34 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	e00c      	b.n	8002d76 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	3301      	adds	r3, #1
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8002d66:	4959      	ldr	r1, [pc, #356]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3378      	adds	r3, #120	; 0x78
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d9ef      	bls.n	8002d5c <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002d7e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8002d86:	7f3b      	ldrb	r3, [r7, #28]
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8002d8e:	7f3b      	ldrb	r3, [r7, #28]
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7b5b      	ldrb	r3, [r3, #13]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8002d9e:	7f3b      	ldrb	r3, [r7, #28]
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	773b      	strb	r3, [r7, #28]
 8002da6:	e003      	b.n	8002db0 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002da8:	7f3b      	ldrb	r3, [r7, #28]
 8002daa:	f36f 1345 	bfc	r3, #5, #1
 8002dae:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002db2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8002dba:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002dbc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002dc4:	7efb      	ldrb	r3, [r7, #27]
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dca:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8002dcc:	7e7b      	ldrb	r3, [r7, #25]
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002dd4:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002dd6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002de0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002de8:	7d3b      	ldrb	r3, [r7, #20]
 8002dea:	f043 0303 	orr.w	r3, r3, #3
 8002dee:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002df0:	7dbb      	ldrb	r3, [r7, #22]
 8002df2:	f36f 13c7 	bfc	r3, #7, #1
 8002df6:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002dfa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8002e02:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002e04:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8002e0c:	7c3b      	ldrb	r3, [r7, #16]
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002e16:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8002e1e:	2010      	movs	r0, #16
 8002e20:	f7ff f814 	bl	8001e4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8002e24:	f7ff f850 	bl	8001ec8 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002e2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002e34:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e3c:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8002e4a:	7b3b      	ldrb	r3, [r7, #12]
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e58:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f043 0310 	orr.w	r3, r3, #16
 8002e60:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8002e6a:	7b7b      	ldrb	r3, [r7, #13]
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8002e72:	7b7b      	ldrb	r3, [r7, #13]
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8002e82:	7b3b      	ldrb	r3, [r7, #12]
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7b5b      	ldrb	r3, [r3, #13]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d103      	bne.n	8002e9a <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8002e92:	7b3b      	ldrb	r3, [r7, #12]
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8002e9a:	7bbb      	ldrb	r3, [r7, #14]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <XMC_USBD_Init+0x238>)
 8002eac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000ed0 	.word	0x20000ed0
 8002ec4:	200009f0 	.word	0x200009f0
 8002ec8:	20000a0c 	.word	0x20000a0c
 8002ecc:	20000ed4 	.word	0x20000ed4

08002ed0 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <XMC_USBD_Uninitialize+0x38>)
 8002ed8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002ee0:	793b      	ldrb	r3, [r7, #4]
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <XMC_USBD_Uninitialize+0x38>)
 8002eea:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002ef2:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <XMC_USBD_Uninitialize+0x38>)
 8002efa:	f004 f98b 	bl	8007214 <memset>
  return XMC_USBD_STATUS_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000ed4 	.word	0x20000ed4

08002f0c <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <XMC_USBD_DeviceConnect+0x30>)
 8002f14:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8002f1c:	793b      	ldrb	r3, [r7, #4]
 8002f1e:	f36f 0341 	bfc	r3, #1, #1
 8002f22:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <XMC_USBD_DeviceConnect+0x30>)
 8002f26:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	20000ed4 	.word	0x20000ed4

08002f40 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <XMC_USBD_DeviceDisconnect+0x30>)
 8002f48:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002f50:	793b      	ldrb	r3, [r7, #4]
 8002f52:	f043 0302 	orr.w	r3, r3, #2
 8002f56:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <XMC_USBD_DeviceDisconnect+0x30>)
 8002f5a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	20000ed4 	.word	0x20000ed4

08002f74 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8002f80:	7b3b      	ldrb	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f362 03c4 	bfi	r3, r2, #3, #2
 8002f88:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <XMC_USBD_DeviceGetState+0x60>)
 8002f8c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002f90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	f362 0341 	bfi	r3, r2, #1, #1
 8002f9c:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fe5a 	bl	8001c58 <XMC_USBD_lDeviceActive>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	7b3b      	ldrb	r3, [r7, #12]
 8002fae:	f362 0382 	bfi	r3, r2, #2, #1
 8002fb2:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <XMC_USBD_DeviceGetState+0x60>)
 8002fb6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002fba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	7b3b      	ldrb	r3, [r7, #12]
 8002fc2:	f362 0300 	bfi	r3, r2, #0, #1
 8002fc6:	733b      	strb	r3, [r7, #12]
  return state;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000ed4 	.word	0x20000ed4

08002fd8 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	2234      	movs	r2, #52	; 0x34
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <XMC_USBD_EndpointReadStart+0x84>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <XMC_USBD_EndpointReadStart+0x3a>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	791b      	ldrb	r3, [r3, #4]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e01c      	b.n	8003052 <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d902      	bls.n	8003028 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8003048:	68b8      	ldr	r0, [r7, #8]
 800304a:	f7fe ffc5 	bl	8001fd8 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000ed4 	.word	0x20000ed4

08003060 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2234      	movs	r2, #52	; 0x34
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <XMC_USBD_EndpointRead+0x74>)
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d902      	bls.n	800308c <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4413      	add	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4619      	mov	r1, r3
 800309a:	68b8      	ldr	r0, [r7, #8]
 800309c:	f004 f820 	bl	80070e0 <memcpy>
  ep->outBytesAvailable -= length;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	441a      	add	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	619a      	str	r2, [r3, #24]
 80030c0:	e002      	b.n	80030c8 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000ed4 	.word	0x20000ed4

080030d8 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	2234      	movs	r2, #52	; 0x34
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <XMC_USBD_EndpointWrite+0xa0>)
 80030f4:	4413      	add	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e030      	b.n	800316e <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e026      	b.n	800316e <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d902      	bls.n	8003130 <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 ffd1 	bl	80070e0 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2200      	movs	r2, #0
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	6853      	ldr	r3, [r2, #4]
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	f7fe fff4 	bl	8002150 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	617b      	str	r3, [r7, #20]
  }
  return result;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000ed4 	.word	0x20000ed4

0800317c <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	460a      	mov	r2, r1
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	4613      	mov	r3, r2
 800318a:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <XMC_USBD_DeviceSetAddress+0x48>)
 800318e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8003196:	79bb      	ldrb	r3, [r7, #6]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	89bb      	ldrh	r3, [r7, #12]
 80031a6:	f362 130a 	bfi	r3, r2, #4, #7
 80031aa:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <XMC_USBD_DeviceSetAddress+0x48>)
 80031ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20000ed4 	.word	0x20000ed4

080031c8 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	2234      	movs	r2, #52	; 0x34
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  if (stall)
 80031ea:	79bb      	ldrb	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d040      	beq.n	8003272 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da1a      	bge.n	800322e <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4a43      	ldr	r2, [pc, #268]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 8003204:	336a      	adds	r3, #106	; 0x6a
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 800320e:	7abb      	ldrb	r3, [r7, #10]
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 8003222:	336a      	adds	r3, #106	; 0x6a
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e01b      	b.n	8003266 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4a35      	ldr	r2, [pc, #212]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 800323a:	3370      	adds	r3, #112	; 0x70
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8003246:	7abb      	ldrb	r3, [r7, #10]
 8003248:	f043 0320 	orr.w	r3, r3, #32
 800324c:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 800325a:	3370      	adds	r3, #112	; 0x70
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	7913      	ldrb	r3, [r2, #4]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	7113      	strb	r3, [r2, #4]
 8003270:	e047      	b.n	8003302 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da1e      	bge.n	80032b8 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 8003286:	336a      	adds	r3, #106	; 0x6a
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8003290:	7abb      	ldrb	r3, [r7, #10]
 8003292:	f36f 1345 	bfc	r3, #5, #1
 8003296:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f043 0310 	orr.w	r3, r3, #16
 800329e:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 80032ac:	336a      	adds	r3, #106	; 0x6a
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e01f      	b.n	80032f8 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 80032c4:	3370      	adds	r3, #112	; 0x70
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 80032d0:	7abb      	ldrb	r3, [r7, #10]
 80032d2:	f36f 1345 	bfc	r3, #5, #1
 80032d6:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <XMC_USBD_EndpointStall+0x148>)
 80032ec:	3370      	adds	r3, #112	; 0x70
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	7913      	ldrb	r3, [r2, #4]
 80032fc:	f36f 1345 	bfc	r3, #5, #1
 8003300:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20000ed4 	.word	0x20000ed4

08003314 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	2234      	movs	r2, #52	; 0x34
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <XMC_USBD_EndpointAbort+0x84>)
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6853      	ldr	r3, [r2, #4]
 8003342:	f36f 03c3 	bfc	r3, #3, #1
 8003346:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6853      	ldr	r3, [r2, #4]
 800335a:	f36f 1304 	bfc	r3, #4, #1
 800335e:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	7913      	ldrb	r3, [r2, #4]
 8003364:	f36f 1345 	bfc	r3, #5, #1
 8003368:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000ed4 	.word	0x20000ed4

0800339c <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	460b      	mov	r3, r1
 80033a8:	71bb      	strb	r3, [r7, #6]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80033ae:	4bb0      	ldr	r3, [pc, #704]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 80033b0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	2234      	movs	r2, #52	; 0x34
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	4aaa      	ldr	r2, [pc, #680]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80033ca:	2234      	movs	r2, #52	; 0x34
 80033cc:	2100      	movs	r1, #0
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f003 ff20 	bl	8007214 <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	79fa      	ldrb	r2, [r7, #7]
 80033d8:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	7913      	ldrb	r3, [r2, #4]
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 80033e4:	88bb      	ldrh	r3, [r7, #4]
 80033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ea:	b2d9      	uxtb	r1, r3
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f361 23d1 	bfi	r3, r1, #11, #7
 80033f4:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	6893      	ldr	r3, [r2, #8]
 8003402:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8003406:	f361 0312 	bfi	r3, r1, #0, #19
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	e005      	b.n	800341a <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	6893      	ldr	r3, [r2, #8]
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	f361 0312 	bfi	r3, r1, #0, #19
 8003418:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003422:	b2db      	uxtb	r3, r3
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	4a93      	ldr	r2, [pc, #588]	; (8003674 <XMC_USBD_EndpointConfigure+0x2d8>)
 8003428:	441a      	add	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003436:	b2db      	uxtb	r3, r3
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4a8f      	ldr	r2, [pc, #572]	; (8003678 <XMC_USBD_EndpointConfigure+0x2dc>)
 800343c:	441a      	add	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <XMC_USBD_EndpointConfigure+0x2e0>)
 8003450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	4b86      	ldr	r3, [pc, #536]	; (8003680 <XMC_USBD_EndpointConfigure+0x2e4>)
 8003466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <XMC_USBD_EndpointConfigure+0xe6>
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d179      	bne.n	8003576 <XMC_USBD_EndpointConfigure+0x1da>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4a78      	ldr	r2, [pc, #480]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 800348e:	336a      	adds	r3, #106	; 0x6a
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8003498:	7b7b      	ldrb	r3, [r7, #13]
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80034a0:	79bb      	ldrb	r3, [r7, #6]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	f362 0383 	bfi	r3, r2, #2, #2
 80034ae:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d123      	bne.n	80034fe <XMC_USBD_EndpointConfigure+0x162>
    {
			switch(ep_max_packet_size)
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d014      	beq.n	80034e6 <XMC_USBD_EndpointConfigure+0x14a>
 80034bc:	2b10      	cmp	r3, #16
 80034be:	dc02      	bgt.n	80034c6 <XMC_USBD_EndpointConfigure+0x12a>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d016      	beq.n	80034f2 <XMC_USBD_EndpointConfigure+0x156>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 80034c4:	e023      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
			switch(ep_max_packet_size)
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d007      	beq.n	80034da <XMC_USBD_EndpointConfigure+0x13e>
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d000      	beq.n	80034d0 <XMC_USBD_EndpointConfigure+0x134>
				break;
 80034ce:	e01e      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x0U;
 80034d0:	89bb      	ldrh	r3, [r7, #12]
 80034d2:	f36f 030a 	bfc	r3, #0, #11
 80034d6:	81bb      	strh	r3, [r7, #12]
				break;
 80034d8:	e019      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x1U;
 80034da:	89bb      	ldrh	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f362 030a 	bfi	r3, r2, #0, #11
 80034e2:	81bb      	strh	r3, [r7, #12]
				break;
 80034e4:	e013      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x2U;
 80034e6:	89bb      	ldrh	r3, [r7, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f362 030a 	bfi	r3, r2, #0, #11
 80034ee:	81bb      	strh	r3, [r7, #12]
				break;
 80034f0:	e00d      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x3U;
 80034f2:	89bb      	ldrh	r3, [r7, #12]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f362 030a 	bfi	r3, r2, #0, #11
 80034fa:	81bb      	strh	r3, [r7, #12]
				break;
 80034fc:	e007      	b.n	800350e <XMC_USBD_EndpointConfigure+0x172>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80034fe:	88bb      	ldrh	r3, [r7, #4]
 8003500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003504:	b29a      	uxth	r2, r3
 8003506:	89bb      	ldrh	r3, [r7, #12]
 8003508:	f362 030a 	bfi	r3, r2, #0, #11
 800350c:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8003516:	7bbb      	ldrb	r3, [r7, #14]
 8003518:	f36f 1345 	bfc	r3, #5, #1
 800351c:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800351e:	f7fe fd07 	bl	8001f30 <XMC_USBD_lAssignTXFifo>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	b2d9      	uxtb	r1, r3
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	8893      	ldrh	r3, [r2, #4]
 800352e:	f361 1389 	bfi	r3, r1, #6, #4
 8003532:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	889b      	ldrh	r3, [r3, #4]
 8003538:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800353c:	b2da      	uxtb	r2, r3
 800353e:	89fb      	ldrh	r3, [r7, #14]
 8003540:	f362 1389 	bfi	r3, r2, #6, #4
 8003544:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4a47      	ldr	r2, [pc, #284]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 8003552:	336a      	adds	r3, #106	; 0x6a
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800355c:	8a3a      	ldrh	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	2301      	movs	r3, #1
 800356c:	408b      	lsls	r3, r1
 800356e:	b29b      	uxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <XMC_USBD_EndpointConfigure+0x1ee>
 8003584:	79bb      	ldrb	r3, [r7, #6]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d167      	bne.n	800365a <XMC_USBD_EndpointConfigure+0x2be>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4a36      	ldr	r2, [pc, #216]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 8003596:	3370      	adds	r3, #112	; 0x70
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80035a2:	7a7b      	ldrb	r3, [r7, #9]
 80035a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a8:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80035aa:	79bb      	ldrb	r3, [r7, #6]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	7abb      	ldrb	r3, [r7, #10]
 80035b4:	f362 0383 	bfi	r3, r2, #2, #2
 80035b8:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80035ba:	79bb      	ldrb	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d123      	bne.n	8003608 <XMC_USBD_EndpointConfigure+0x26c>
		{
			switch(ep_max_packet_size)
 80035c0:	88bb      	ldrh	r3, [r7, #4]
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d014      	beq.n	80035f0 <XMC_USBD_EndpointConfigure+0x254>
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	dc02      	bgt.n	80035d0 <XMC_USBD_EndpointConfigure+0x234>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d016      	beq.n	80035fc <XMC_USBD_EndpointConfigure+0x260>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 80035ce:	e023      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
			switch(ep_max_packet_size)
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d007      	beq.n	80035e4 <XMC_USBD_EndpointConfigure+0x248>
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d000      	beq.n	80035da <XMC_USBD_EndpointConfigure+0x23e>
					break;
 80035d8:	e01e      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x0U;
 80035da:	893b      	ldrh	r3, [r7, #8]
 80035dc:	f36f 030a 	bfc	r3, #0, #11
 80035e0:	813b      	strh	r3, [r7, #8]
					break;
 80035e2:	e019      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x1U;
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f362 030a 	bfi	r3, r2, #0, #11
 80035ec:	813b      	strh	r3, [r7, #8]
					break;
 80035ee:	e013      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x2U;
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f362 030a 	bfi	r3, r2, #0, #11
 80035f8:	813b      	strh	r3, [r7, #8]
					break;
 80035fa:	e00d      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x3U;
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	2203      	movs	r2, #3
 8003600:	f362 030a 	bfi	r3, r2, #0, #11
 8003604:	813b      	strh	r3, [r7, #8]
					break;
 8003606:	e007      	b.n	8003618 <XMC_USBD_EndpointConfigure+0x27c>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8003608:	88bb      	ldrh	r3, [r7, #4]
 800360a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360e:	b29a      	uxth	r2, r3
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	f362 030a 	bfi	r3, r2, #0, #11
 8003616:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	f043 0310 	orr.w	r3, r3, #16
 800361e:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8003620:	7abb      	ldrb	r3, [r7, #10]
 8003622:	f36f 1345 	bfc	r3, #5, #1
 8003626:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 8003634:	3370      	adds	r3, #112	; 0x70
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8003640:	8a7a      	ldrh	r2, [r7, #18]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	2301      	movs	r3, #1
 8003650:	408b      	lsls	r3, r1
 8003652:	b29b      	uxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <XMC_USBD_EndpointConfigure+0x2d4>)
 800365c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000ed4 	.word	0x20000ed4
 8003674:	30000700 	.word	0x30000700
 8003678:	30000000 	.word	0x30000000
 800367c:	20000a0c 	.word	0x20000a0c
 8003680:	200009f0 	.word	0x200009f0

08003684 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	2234      	movs	r2, #52	; 0x34
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a54      	ldr	r2, [pc, #336]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 800369c:	4413      	add	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80036a4:	4b51      	ldr	r3, [pc, #324]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80036a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	2301      	movs	r3, #1
 80036bc:	4093      	lsls	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e085      	b.n	80037e0 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 80036d4:	7c7b      	ldrb	r3, [r7, #17]
 80036d6:	f36f 13c7 	bfc	r3, #7, #1
 80036da:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e2:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 80036ec:	7cbb      	ldrb	r3, [r7, #18]
 80036ee:	f36f 1345 	bfc	r3, #5, #1
 80036f2:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	7913      	ldrb	r3, [r2, #4]
 80036f8:	f36f 0382 	bfc	r3, #2, #1
 80036fc:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	7913      	ldrb	r3, [r2, #4]
 8003702:	f36f 1345 	bfc	r3, #5, #1
 8003706:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	6853      	ldr	r3, [r2, #4]
 800370c:	f36f 1304 	bfc	r3, #4, #1
 8003710:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	6853      	ldr	r3, [r2, #4]
 8003716:	f36f 03c3 	bfc	r3, #3, #1
 800371a:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <XMC_USBD_EndpointUnconfigure+0xb4>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	791b      	ldrb	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d112      	bne.n	800375e <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 8003744:	336a      	adds	r3, #106	; 0x6a
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800374e:	89ba      	ldrh	r2, [r7, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	b29b      	uxth	r3, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	b29b      	uxth	r3, r3
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <XMC_USBD_EndpointUnconfigure+0xf6>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	791b      	ldrb	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d123      	bne.n	80037c2 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 8003786:	3370      	adds	r3, #112	; 0x70
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	b29b      	uxth	r3, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	b29b      	uxth	r3, r3
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <XMC_USBD_EndpointUnconfigure+0x16c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	7b5b      	ldrb	r3, [r3, #13]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10a      	bne.n	80037c2 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80037ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80037b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80037ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80037be:	400a      	ands	r2, r1
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80037c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	889b      	ldrh	r3, [r3, #4]
 80037d0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fbe2 	bl	8001fa0 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000ed4 	.word	0x20000ed4
 80037f0:	20000ed0 	.word	0x20000ed0

080037f4 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <XMC_USBD_GetFrameNumber+0x28>)
 80037fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800380a:	b29b      	uxth	r3, r3
 800380c:	80fb      	strh	r3, [r7, #6]
  return result;
 800380e:	88fb      	ldrh	r3, [r7, #6]
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	20000ed4 	.word	0x20000ed4

08003820 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <XMC_USBD_IsEnumDone+0x34>)
 8003826:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <XMC_USBD_IsEnumDone+0x28>
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <XMC_USBD_IsEnumDone+0x34>)
 8003836:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <XMC_USBD_IsEnumDone+0x28>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <XMC_USBD_IsEnumDone+0x2a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	20000ed4 	.word	0x20000ed4

08003858 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8003860:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 8003862:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 8003876:	f083 0301 	eor.w	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 80d4 	bne.w	8003a2a <CDC_Device_ProcessControlRequest+0x1d2>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003884:	889b      	ldrh	r3, [r3, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	429a      	cmp	r2, r3
 8003890:	f040 80cd 	bne.w	8003a2e <CDC_Device_ProcessControlRequest+0x1d6>
	  return;

	switch (USB_ControlRequest.bRequest)
 8003894:	4b6e      	ldr	r3, [pc, #440]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	3b20      	subs	r3, #32
 800389a:	2b03      	cmp	r3, #3
 800389c:	f200 80d2 	bhi.w	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <CDC_Device_ProcessControlRequest+0x50>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	08003949 	.word	0x08003949
 80038ac:	080038b9 	.word	0x080038b9
 80038b0:	080039d9 	.word	0x080039d9
 80038b4:	08003a01 	.word	0x08003a01
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80038b8:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2ba1      	cmp	r3, #161	; 0xa1
 80038be:	f040 80b8 	bne.w	8003a32 <CDC_Device_ProcessControlRequest+0x1da>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80038c2:	4a62      	ldr	r2, [pc, #392]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 80038c4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80038c8:	f36f 0341 	bfc	r3, #1, #1
 80038cc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 80038d0:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80038d2:	4b5e      	ldr	r3, [pc, #376]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 80038d4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80038d8:	461a      	mov	r2, r3
 80038da:	232c      	movs	r3, #44	; 0x2c
 80038dc:	fb03 f302 	mul.w	r3, r3, r2
 80038e0:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <CDC_Device_ProcessControlRequest+0xb0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <CDC_Device_ProcessControlRequest+0xb0>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <CDC_Device_ProcessControlRequest+0xb2>
 8003908:	2300      	movs	r3, #0
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1db      	bne.n	80038d2 <CDC_Device_ProcessControlRequest+0x7a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fe10 	bl	8004544 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7f1b      	ldrb	r3, [r3, #28]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fd9f 	bl	800446c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7f5b      	ldrb	r3, [r3, #29]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fd9a 	bl	800446c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7f9b      	ldrb	r3, [r3, #30]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fd95 	bl	800446c <Endpoint_Write_8>

				Endpoint_ClearIN();
 8003942:	f000 fce9 	bl	8004318 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 8003946:	e074      	b.n	8003a32 <CDC_Device_ProcessControlRequest+0x1da>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b21      	cmp	r3, #33	; 0x21
 800394e:	d172      	bne.n	8003a36 <CDC_Device_ProcessControlRequest+0x1de>
		device.IsSetupRecieved = 0;
 8003950:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 8003952:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003956:	f36f 0341 	bfc	r3, #1, #1
 800395a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 800395e:	e004      	b.n	800396a <CDC_Device_ProcessControlRequest+0x112>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003960:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <CDC_Device_ProcessControlRequest+0x1fc>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d067      	beq.n	8003a3a <CDC_Device_ProcessControlRequest+0x1e2>
	 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 800396c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003970:	461a      	mov	r2, r3
 8003972:	232c      	movs	r3, #44	; 0x2c
 8003974:	fb03 f302 	mul.w	r3, r3, r2
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	60bb      	str	r3, [r7, #8]
		return ep->IsOutRecieved;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
				while (!(Endpoint_IsOUTReceived()))
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e0      	bne.n	8003960 <CDC_Device_ProcessControlRequest+0x108>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800399e:	f000 fe05 	bl	80045ac <Endpoint_Read_32_LE>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80039a8:	f000 fd94 	bl	80044d4 <Endpoint_Read_8>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	771a      	strb	r2, [r3, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80039b4:	f000 fd8e 	bl	80044d4 <Endpoint_Read_8>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	775a      	strb	r2, [r3, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80039c0:	f000 fd88 	bl	80044d4 <Endpoint_Read_8>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	779a      	strb	r2, [r3, #30]

				Endpoint_ClearOUT();
 80039cc:	f000 fc58 	bl	8004280 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb1b 	bl	800400c <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
 80039d6:	e02e      	b.n	8003a36 <CDC_Device_ProcessControlRequest+0x1de>
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80039d8:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b21      	cmp	r3, #33	; 0x21
 80039de:	d12e      	bne.n	8003a3e <CDC_Device_ProcessControlRequest+0x1e6>
		device.IsSetupRecieved = 0;
 80039e0:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 80039e2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80039e6:	f36f 0341 	bfc	r3, #1, #1
 80039ea:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 80039f0:	885b      	ldrh	r3, [r3, #2]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	829a      	strh	r2, [r3, #20]

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fb11 	bl	8004020 <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
 80039fe:	e01e      	b.n	8003a3e <CDC_Device_ProcessControlRequest+0x1e6>
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b21      	cmp	r3, #33	; 0x21
 8003a06:	d11c      	bne.n	8003a42 <CDC_Device_ProcessControlRequest+0x1ea>
 8003a08:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <CDC_Device_ProcessControlRequest+0x1f4>)
 8003a0a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003a0e:	f36f 0341 	bfc	r3, #1, #1
 8003a12:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003a18:	885b      	ldrh	r3, [r3, #2]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb07 	bl	8004034 <EVENT_CDC_Device_BreakSent>
			}

			break;
 8003a26:	bf00      	nop
 8003a28:	e00b      	b.n	8003a42 <CDC_Device_ProcessControlRequest+0x1ea>
	  return;
 8003a2a:	bf00      	nop
 8003a2c:	e00a      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
	  return;
 8003a2e:	bf00      	nop
 8003a30:	e008      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 8003a32:	bf00      	nop
 8003a34:	e006      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
					  return;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 8003a42:	bf00      	nop
	}
}
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000d90 	.word	0x20000d90
 8003a50:	200010e0 	.word	0x200010e0
 8003a54:	200010dd 	.word	0x200010dd

08003a58 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3314      	adds	r3, #20
 8003a64:	220c      	movs	r2, #12
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fbd3 	bl	8007214 <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	719a      	strb	r2, [r3, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	731a      	strb	r2, [r3, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	749a      	strb	r2, [r3, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3302      	adds	r3, #2
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fdc8 	bl	800461c <Endpoint_ConfigureEndpointTable>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f083 0301 	eor.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <CDC_Device_ConfigureEndpoints+0x44>
	  return false;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e01c      	b.n	8003ad6 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fdba 	bl	800461c <Endpoint_ConfigureEndpointTable>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f083 0301 	eor.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <CDC_Device_ConfigureEndpoints+0x60>
	  return false;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e00e      	b.n	8003ad6 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	330e      	adds	r3, #14
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fdac 	bl	800461c <Endpoint_ConfigureEndpointTable>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f083 0301 	eor.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <CDC_Device_ConfigureEndpoints+0x7c>
	  return false;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <CDC_Device_ConfigureEndpoints+0x7e>

	return true;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <CDC_Device_USBTask+0x90>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d139      	bne.n	8003b66 <CDC_Device_USBTask+0x86>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d035      	beq.n	8003b66 <CDC_Device_USBTask+0x86>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	789b      	ldrb	r3, [r3, #2]
 8003afe:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <CDC_Device_USBTask+0x94>)
 8003b0a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003b0e:	7afb      	ldrb	r3, [r7, #11]
 8003b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <CDC_Device_USBTask+0x94>)
 8003b18:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <CDC_Device_USBTask+0x94>)
 8003b1e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b22:	461a      	mov	r2, r3
 8003b24:	232c      	movs	r3, #44	; 0x2c
 8003b26:	fb03 f302 	mul.w	r3, r3, r2
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <CDC_Device_USBTask+0x94>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d108      	bne.n	8003b52 <CDC_Device_USBTask+0x72>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <CDC_Device_USBTask+0x72>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <CDC_Device_USBTask+0x74>
 8003b52:	2300      	movs	r3, #0
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3

	if (Endpoint_IsINReady())
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <CDC_Device_USBTask+0x88>
	  CDC_Device_Flush(CDCInterfaceInfo);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8b2 	bl	8003cc8 <CDC_Device_Flush>
 8003b64:	e000      	b.n	8003b68 <CDC_Device_USBTask+0x88>
	  return;
 8003b66:	bf00      	nop
	#endif
}
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200010dd 	.word	0x200010dd
 8003b74:	20000d90 	.word	0x20000d90

08003b78 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <CDC_Device_SendString+0x60>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d103      	bne.n	8003b94 <CDC_Device_SendString+0x1c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <CDC_Device_SendString+0x20>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003b94:	2302      	movs	r3, #2
 8003b96:	e01b      	b.n	8003bd0 <CDC_Device_SendString+0x58>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <CDC_Device_SendString+0x64>)
 8003ba8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <CDC_Device_SendString+0x64>)
 8003bb6:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	f003 fba0 	bl	8007300 <strlen>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6838      	ldr	r0, [r7, #0]
 8003bca:	f002 fa2b 	bl	8006024 <Endpoint_Write_Stream_LE>
 8003bce:	4603      	mov	r3, r0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200010dd 	.word	0x200010dd
 8003bdc:	20000d90 	.word	0x20000d90

08003be0 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <CDC_Device_SendData+0x5c>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d103      	bne.n	8003c00 <CDC_Device_SendData+0x20>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <CDC_Device_SendData+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003c00:	2302      	movs	r3, #2
 8003c02:	e017      	b.n	8003c34 <CDC_Device_SendData+0x54>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <CDC_Device_SendData+0x60>)
 8003c14:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <CDC_Device_SendData+0x60>)
 8003c22:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68b8      	ldr	r0, [r7, #8]
 8003c2e:	f002 f9f9 	bl	8006024 <Endpoint_Write_Stream_LE>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200010dd 	.word	0x200010dd
 8003c40:	20000d90 	.word	0x20000d90

08003c44 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <CDC_Device_SendByte+0x7c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d103      	bne.n	8003c62 <CDC_Device_SendByte+0x1e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <CDC_Device_SendByte+0x22>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003c62:	2302      	movs	r3, #2
 8003c64:	e028      	b.n	8003cb8 <CDC_Device_SendByte+0x74>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	789b      	ldrb	r3, [r3, #2]
 8003c6a:	73bb      	strb	r3, [r7, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003c6c:	7bbb      	ldrb	r3, [r7, #14]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <CDC_Device_SendByte+0x80>)
 8003c76:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <CDC_Device_SendByte+0x80>)
 8003c84:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8003c88:	f000 fbbe 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <CDC_Device_SendByte+0x6a>
	{
		Endpoint_ClearIN();
 8003c98:	f000 fb3e 	bl	8004318 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003c9c:	f000 fa5e 	bl	800415c <Endpoint_WaitUntilReady>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <CDC_Device_SendByte+0x6a>
		  return ErrorCode;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	e004      	b.n	8003cb8 <CDC_Device_SendByte+0x74>
	}

	Endpoint_Write_8(Data);
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fbdb 	bl	800446c <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200010dd 	.word	0x200010dd
 8003cc4:	20000d90 	.word	0x20000d90

08003cc8 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <CDC_Device_Flush+0xc4>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d103      	bne.n	8003ce2 <CDC_Device_Flush+0x1a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <CDC_Device_Flush+0x1e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e04e      	b.n	8003d84 <CDC_Device_Flush+0xbc>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <CDC_Device_Flush+0xc8>)
 8003cf6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <CDC_Device_Flush+0xc8>)
 8003d04:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <CDC_Device_Flush+0xc8>)
 8003d0a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003d0e:	461a      	mov	r2, r3
 8003d10:	232c      	movs	r3, #44	; 0x2c
 8003d12:	fb03 f302 	mul.w	r3, r3, r2
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <CDC_Device_Flush+0xc8>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <CDC_Device_Flush+0x6c>
			return ep->InBytesAvailable;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	e002      	b.n	8003d3a <CDC_Device_Flush+0x72>
		else
			return ep->OutBytesAvailable;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	b29b      	uxth	r3, r3

	if (!(Endpoint_BytesInEndpoint()))
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <CDC_Device_Flush+0x7a>
	  return ENDPOINT_READYWAIT_NoError;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e020      	b.n	8003d84 <CDC_Device_Flush+0xbc>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 8003d42:	f000 fb61 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f083 0301 	eor.w	r3, r3, #1
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	75fb      	strb	r3, [r7, #23]
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]

	Endpoint_ClearIN();
 8003d62:	f000 fad9 	bl	8004318 <Endpoint_ClearIN>

	if (BankFull)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <CDC_Device_Flush+0xba>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003d6c:	f000 f9f6 	bl	800415c <Endpoint_WaitUntilReady>
 8003d70:	4603      	mov	r3, r0
 8003d72:	75bb      	strb	r3, [r7, #22]
 8003d74:	7dbb      	ldrb	r3, [r7, #22]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <CDC_Device_Flush+0xb6>
		  return ErrorCode;
 8003d7a:	7dbb      	ldrb	r3, [r7, #22]
 8003d7c:	e002      	b.n	8003d84 <CDC_Device_Flush+0xbc>

		Endpoint_ClearIN();
 8003d7e:	f000 facb 	bl	8004318 <Endpoint_ClearIN>
	}

	return ENDPOINT_READYWAIT_NoError;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200010dd 	.word	0x200010dd
 8003d90:	20000d90 	.word	0x20000d90

08003d94 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <CDC_Device_BytesReceived+0xec>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d103      	bne.n	8003dae <CDC_Device_BytesReceived+0x1a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <CDC_Device_BytesReceived+0x1e>
	  return 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e061      	b.n	8003e76 <CDC_Device_BytesReceived+0xe2>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7a1b      	ldrb	r3, [r3, #8]
 8003db6:	74fb      	strb	r3, [r7, #19]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003dc2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003dd0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003dd6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003dda:	461a      	mov	r2, r3
 8003ddc:	232c      	movs	r3, #44	; 0x2c
 8003dde:	fb03 f302 	mul.w	r3, r3, r2
 8003de2:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003de4:	4413      	add	r3, r2
 8003de6:	3304      	adds	r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
		return ep->IsOutRecieved;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d038      	beq.n	8003e74 <CDC_Device_BytesReceived+0xe0>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e02:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003e04:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e08:	461a      	mov	r2, r3
 8003e0a:	232c      	movs	r3, #44	; 0x2c
 8003e0c:	fb03 f302 	mul.w	r3, r3, r2
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <CDC_Device_BytesReceived+0x9a>
			return ep->InBytesAvailable;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	e002      	b.n	8003e34 <CDC_Device_BytesReceived+0xa0>
			return ep->OutBytesAvailable;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	b29b      	uxth	r3, r3
	{
		if (!(Endpoint_BytesInEndpoint()))
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <CDC_Device_BytesReceived+0xac>
		{
			Endpoint_ClearOUT();
 8003e38:	f000 fa22 	bl	8004280 <Endpoint_ClearOUT>
			return 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e01a      	b.n	8003e76 <CDC_Device_BytesReceived+0xe2>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003e42:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e46:	461a      	mov	r2, r3
 8003e48:	232c      	movs	r3, #44	; 0x2c
 8003e4a:	fb03 f302 	mul.w	r3, r3, r2
 8003e4e:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <CDC_Device_BytesReceived+0xf0>)
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60bb      	str	r3, [r7, #8]
		if (ep->Direction)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <CDC_Device_BytesReceived+0xd8>
			return ep->InBytesAvailable;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	b29b      	uxth	r3, r3
		}
		else
		{
			return Endpoint_BytesInEndpoint();
 8003e6a:	e004      	b.n	8003e76 <CDC_Device_BytesReceived+0xe2>
			return ep->OutBytesAvailable;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	e000      	b.n	8003e76 <CDC_Device_BytesReceived+0xe2>
		}
	}
	else
	{
		return 0;
 8003e74:	2300      	movs	r3, #0
	}
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200010dd 	.word	0x200010dd
 8003e84:	20000d90 	.word	0x20000d90

08003e88 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003e90:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <CDC_Device_ReceiveByte+0xfc>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d103      	bne.n	8003ea2 <CDC_Device_ReceiveByte+0x1a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <CDC_Device_ReceiveByte+0x20>
	  return -1;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea6:	e068      	b.n	8003f7a <CDC_Device_ReceiveByte+0xf2>

	int16_t ReceivedByte = -1;
 8003ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eac:	83fb      	strh	r3, [r7, #30]

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7a1b      	ldrb	r3, [r3, #8]
 8003eb2:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003ebe:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003ecc:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003ed2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	232c      	movs	r3, #44	; 0x2c
 8003eda:	fb03 f302 	mul.w	r3, r3, r2
 8003ede:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
		return ep->IsOutRecieved;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d03b      	beq.n	8003f76 <CDC_Device_ReceiveByte+0xee>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003f00:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f04:	461a      	mov	r2, r3
 8003f06:	232c      	movs	r3, #44	; 0x2c
 8003f08:	fb03 f302 	mul.w	r3, r3, r2
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <CDC_Device_ReceiveByte+0xa2>
			return ep->InBytesAvailable;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	e002      	b.n	8003f30 <CDC_Device_ReceiveByte+0xa8>
			return ep->OutBytesAvailable;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	b29b      	uxth	r3, r3
	{
		if (Endpoint_BytesInEndpoint())
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <CDC_Device_ReceiveByte+0xb4>
		  ReceivedByte = Endpoint_Read_8();
 8003f34:	f000 face 	bl	80044d4 <Endpoint_Read_8>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	83fb      	strh	r3, [r7, #30]
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003f3e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f42:	461a      	mov	r2, r3
 8003f44:	232c      	movs	r3, #44	; 0x2c
 8003f46:	fb03 f302 	mul.w	r3, r3, r2
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <CDC_Device_ReceiveByte+0x100>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <CDC_Device_ReceiveByte+0xe0>
			return ep->InBytesAvailable;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	e002      	b.n	8003f6e <CDC_Device_ReceiveByte+0xe6>
			return ep->OutBytesAvailable;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	b29b      	uxth	r3, r3

		if (!(Endpoint_BytesInEndpoint()))
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <CDC_Device_ReceiveByte+0xee>
		  Endpoint_ClearOUT();
 8003f72:	f000 f985 	bl	8004280 <Endpoint_ClearOUT>
	}

	return ReceivedByte;
 8003f76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200010dd 	.word	0x200010dd
 8003f88:	20000d90 	.word	0x20000d90

08003f8c <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <CDC_Device_SendControlLineStateChange+0x74>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d12c      	bne.n	8003ff8 <CDC_Device_SendControlLineStateChange+0x6c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <CDC_Device_SendControlLineStateChange+0x6c>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7b9b      	ldrb	r3, [r3, #14]
 8003faa:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <CDC_Device_SendControlLineStateChange+0x78>)
 8003fb6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <CDC_Device_SendControlLineStateChange+0x78>)
 8003fc4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <CDC_Device_SendControlLineStateChange+0x7c>)
 8003fca:	f107 030c 	add.w	r3, r7, #12
 8003fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd2:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 f820 	bl	8006024 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3316      	adds	r3, #22
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 f819 	bl	8006024 <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 8003ff2:	f000 f991 	bl	8004318 <Endpoint_ClearIN>
 8003ff6:	e000      	b.n	8003ffa <CDC_Device_SendControlLineStateChange+0x6e>
	  return;
 8003ff8:	bf00      	nop
}
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200010dd 	.word	0x200010dd
 8004004:	20000d90 	.word	0x20000d90
 8004008:	0800e614 	.word	0x0800e614

0800400c <EVENT_CDC_Device_LineEncodingChanged>:
	return ReceivedByte;
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 8004050:	f000 f802 	bl	8004058 <USB_DeviceTask>
	#endif
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}

08004058 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <USB_DeviceTask+0x7c>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d030      	beq.n	80040ca <USB_DeviceTask+0x72>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <USB_DeviceTask+0x80>)
 800406a:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <USB_DeviceTask+0x80>)
 8004070:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004074:	4313      	orrs	r3, r2
 8004076:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8004078:	71fb      	strb	r3, [r7, #7]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800407a:	2200      	movs	r2, #0
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <USB_DeviceTask+0x80>)
 800407e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8004082:	2200      	movs	r2, #0
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <USB_DeviceTask+0x80>)
 8004086:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <USB_DeviceTask+0x80>)
 800408c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004090:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 80040a4:	f7fd f88a 	bl	80011bc <USB_Device_ProcessControlRequest>
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80040ac:	79bb      	ldrb	r3, [r7, #6]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <USB_DeviceTask+0x80>)
 80040b6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80040ba:	79bb      	ldrb	r3, [r7, #6]
 80040bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <USB_DeviceTask+0x80>)
 80040c4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 80040c8:	e000      	b.n	80040cc <USB_DeviceTask+0x74>
	  return;
 80040ca:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200010dd 	.word	0x200010dd
 80040d8:	20000d90 	.word	0x20000d90

080040dc <__NVIC_EnableIRQ>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	; (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_DisableIRQ>:
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db10      	blt.n	800414c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4909      	ldr	r1, [pc, #36]	; (8004158 <__NVIC_DisableIRQ+0x40>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	3320      	adds	r3, #32
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004148:	f3bf 8f6f 	isb	sy
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000e100 	.word	0xe000e100

0800415c <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8004162:	2364      	movs	r3, #100	; 0x64
 8004164:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	4798      	blx	r3
 800416e:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8004170:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 8004174:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004178:	461a      	mov	r2, r3
 800417a:	232c      	movs	r3, #44	; 0x2c
 800417c:	fb03 f302 	mul.w	r3, r3, r2
 8004180:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004190:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8004192:	2b80      	cmp	r3, #128	; 0x80
 8004194:	d122      	bne.n	80041dc <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004196:	4b38      	ldr	r3, [pc, #224]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 8004198:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800419c:	461a      	mov	r2, r3
 800419e:	232c      	movs	r3, #44	; 0x2c
 80041a0:	fb03 f302 	mul.w	r3, r3, r2
 80041a4:	4a34      	ldr	r2, [pc, #208]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <Endpoint_WaitUntilReady+0x70>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <Endpoint_WaitUntilReady+0x70>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Endpoint_WaitUntilReady+0x72>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 80041d8:	2300      	movs	r3, #0
 80041da:	e048      	b.n	800426e <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80041dc:	4b26      	ldr	r3, [pc, #152]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 80041de:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80041e2:	461a      	mov	r2, r3
 80041e4:	232c      	movs	r3, #44	; 0x2c
 80041e6:	fb03 f302 	mul.w	r3, r3, r2
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 800420a:	2300      	movs	r3, #0
 800420c:	e02f      	b.n	800426e <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <Endpoint_WaitUntilReady+0x120>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 800421a:	2302      	movs	r3, #2
 800421c:	e027      	b.n	800426e <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d101      	bne.n	8004228 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8004224:	2303      	movs	r3, #3
 8004226:	e022      	b.n	800426e <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 800422a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800422e:	4619      	mov	r1, r3
 8004230:	4a11      	ldr	r2, [pc, #68]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 8004232:	232c      	movs	r3, #44	; 0x2c
 8004234:	fb03 f301 	mul.w	r3, r3, r1
 8004238:	4413      	add	r3, r2
 800423a:	7a1b      	ldrb	r3, [r3, #8]
 800423c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004240:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8004246:	2301      	movs	r3, #1
 8004248:	e011      	b.n	800426e <Endpoint_WaitUntilReady+0x112>
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <Endpoint_WaitUntilReady+0x11c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	4798      	blx	r3
 8004252:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8004254:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8004256:	8a3a      	ldrh	r2, [r7, #16]
 8004258:	8abb      	ldrh	r3, [r7, #20]
 800425a:	429a      	cmp	r2, r3
 800425c:	d089      	beq.n	8004172 <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 800425e:	8a3b      	ldrh	r3, [r7, #16]
 8004260:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	75fa      	strb	r2, [r7, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d182      	bne.n	8004172 <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 800426c:	2304      	movs	r3, #4
		}
	}
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000d90 	.word	0x20000d90
 800427c:	200010dd 	.word	0x200010dd

08004280 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <Endpoint_ClearOUT+0x94>)
 8004288:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800428c:	461a      	mov	r2, r3
 800428e:	232c      	movs	r3, #44	; 0x2c
 8004290:	fb03 f302 	mul.w	r3, r3, r2
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <Endpoint_ClearOUT+0x94>)
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	791b      	ldrb	r3, [r3, #4]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02f      	beq.n	800430a <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <Endpoint_ClearOUT+0x94>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	7810      	ldrb	r0, [r2, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6911      	ldr	r1, [r2, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6952      	ldr	r2, [r2, #20]
 80042bc:	4798      	blx	r3
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <Endpoint_ClearOUT+0x8c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d114      	bne.n	800430c <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	8893      	ldrh	r3, [r2, #4]
 80042e6:	f043 0308 	orr.w	r3, r3, #8
 80042ea:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	8893      	ldrh	r3, [r2, #4]
 80042f0:	f36f 1345 	bfc	r3, #5, #1
 80042f4:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <Endpoint_ClearOUT+0x94>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	7810      	ldrb	r0, [r2, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6952      	ldr	r2, [r2, #20]
 8004304:	4611      	mov	r1, r2
 8004306:	4798      	blx	r3
 8004308:	e000      	b.n	800430c <Endpoint_ClearOUT+0x8c>
		return;
 800430a:	bf00      	nop
				ep->OutBufferLength);
	}
}
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000d90 	.word	0x20000d90

08004318 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <Endpoint_ClearIN+0xe8>)
 8004320:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004324:	461a      	mov	r2, r3
 8004326:	232c      	movs	r3, #44	; 0x2c
 8004328:	fb03 f302 	mul.w	r3, r3, r2
 800432c:	4a34      	ldr	r2, [pc, #208]	; (8004400 <Endpoint_ClearIN+0xe8>)
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d059      	beq.n	80043f6 <Endpoint_ClearIN+0xde>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	791b      	ldrb	r3, [r3, #4]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d052      	beq.n	80043f6 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	8893      	ldrh	r3, [r2, #4]
 8004354:	f043 0310 	orr.w	r3, r3, #16
 8004358:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8004370:	206b      	movs	r0, #107	; 0x6b
 8004372:	f7ff fed1 	bl	8004118 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <Endpoint_ClearIN+0xe8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004388:	4798      	blx	r3
 800438a:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 80043a4:	206b      	movs	r0, #107	; 0x6b
 80043a6:	f7ff fe99 	bl	80040dc <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <Endpoint_ClearIN+0xec>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d121      	bne.n	80043f8 <Endpoint_ClearIN+0xe0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01a      	beq.n	80043f8 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 80043c2:	bf00      	nop
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f8      	bne.n	80043c4 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	8893      	ldrh	r3, [r2, #4]
 80043d6:	f043 0310 	orr.w	r3, r3, #16
 80043da:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <Endpoint_ClearIN+0xe8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 80043ea:	2200      	movs	r2, #0
 80043ec:	4798      	blx	r3
	  zlp_flag = false;
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <Endpoint_ClearIN+0xec>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e000      	b.n	80043f8 <Endpoint_ClearIN+0xe0>
		return;
 80043f6:	bf00      	nop
	}
}
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000d90 	.word	0x20000d90
 8004404:	20000a28 	.word	0x20000a28

08004408 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <Endpoint_IsReadWriteAllowed+0x60>)
 8004410:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004414:	461a      	mov	r2, r3
 8004416:	232c      	movs	r3, #44	; 0x2c
 8004418:	fb03 f302 	mul.w	r3, r3, r2
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <Endpoint_IsReadWriteAllowed+0x60>)
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8004424:	2300      	movs	r3, #0
 8004426:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf34      	ite	cc
 8004442:	2301      	movcc	r3, #1
 8004444:	2300      	movcs	r3, #0
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	e006      	b.n	8004458 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8004458:	79fb      	ldrb	r3, [r7, #7]
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000d90 	.word	0x20000d90

0800446c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <Endpoint_Write_8+0x64>)
 8004478:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800447c:	461a      	mov	r2, r3
 800447e:	232c      	movs	r3, #44	; 0x2c
 8004480:	fb03 f302 	mul.w	r3, r3, r2
 8004484:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <Endpoint_Write_8+0x64>)
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	429a      	cmp	r2, r3
 800449a:	d20d      	bcs.n	80044b8 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	79fa      	ldrb	r2, [r7, #7]
 80044a8:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	619a      	str	r2, [r3, #24]

	      Success = true;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	f083 0301 	eor.w	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <Endpoint_Write_8+0x24>
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000d90 	.word	0x20000d90

080044d4 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <Endpoint_Read_8+0x6c>)
 80044dc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80044e0:	461a      	mov	r2, r3
 80044e2:	232c      	movs	r3, #44	; 0x2c
 80044e4:	fb03 f302 	mul.w	r3, r3, r2
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <Endpoint_Read_8+0x6c>)
 80044ea:	4413      	add	r3, r2
 80044ec:	3304      	adds	r3, #4
 80044ee:	603b      	str	r3, [r7, #0]
	bool Success = false;
 80044f0:	2300      	movs	r3, #0
 80044f2:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4413      	add	r3, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	609a      	str	r2, [r3, #8]
		  Success = true;
 8004522:	2301      	movs	r3, #1
 8004524:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e2      	bne.n	80044f8 <Endpoint_Read_8+0x24>
	 return data;
 8004532:	79bb      	ldrb	r3, [r7, #6]
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000d90 	.word	0x20000d90

08004544 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <Endpoint_Write_32_LE+0x64>)
 800454e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004552:	461a      	mov	r2, r3
 8004554:	232c      	movs	r3, #44	; 0x2c
 8004556:	fb03 f302 	mul.w	r3, r3, r2
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <Endpoint_Write_32_LE+0x64>)
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	3b03      	subs	r3, #3
 8004570:	429a      	cmp	r2, r3
 8004572:	d20d      	bcs.n	8004590 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4413      	add	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	619a      	str	r2, [r3, #24]

			Success = true;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e4      	bne.n	8004566 <Endpoint_Write_32_LE+0x22>
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000d90 	.word	0x20000d90

080045ac <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <Endpoint_Read_32_LE+0x6c>)
 80045b4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80045b8:	461a      	mov	r2, r3
 80045ba:	232c      	movs	r3, #44	; 0x2c
 80045bc:	fb03 f302 	mul.w	r3, r3, r2
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <Endpoint_Read_32_LE+0x6c>)
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	607b      	str	r3, [r7, #4]
	bool Success = false;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d912      	bls.n	80045fe <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	1f1a      	subs	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]

			Success = true;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e2      	bne.n	80045d0 <Endpoint_Read_32_LE+0x24>
	return data;
 800460a:	68bb      	ldr	r3, [r7, #8]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20000d90 	.word	0x20000d90

0800461c <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e091      	b.n	8004752 <Endpoint_ConfigureEndpointTable+0x136>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69dc      	ldr	r4, [r3, #28]
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	7818      	ldrb	r0, [r3, #0]
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	461a      	mov	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	7919      	ldrb	r1, [r3, #4]
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4413      	add	r3, r2
 8004680:	885b      	ldrh	r3, [r3, #2]
 8004682:	461a      	mov	r2, r3
 8004684:	47a0      	blx	r4
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 800468c:	2300      	movs	r3, #0
 800468e:	e066      	b.n	800475e <Endpoint_ConfigureEndpointTable+0x142>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	441a      	add	r2, r3
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	7810      	ldrb	r0, [r2, #0]
 80046a4:	4a30      	ldr	r2, [pc, #192]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	4602      	mov	r2, r0
 80046b2:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	885a      	ldrh	r2, [r3, #2]
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046cc:	b2d1      	uxtb	r1, r2
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 80046d0:	202c      	movs	r0, #44	; 0x2c
 80046d2:	fb00 f303 	mul.w	r3, r0, r3
 80046d6:	441a      	add	r2, r3
 80046d8:	8913      	ldrh	r3, [r2, #8]
 80046da:	f361 138c 	bfi	r3, r1, #6, #7
 80046de:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	4a21      	ldr	r2, [pc, #132]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	441a      	add	r2, r3
 80046ec:	7a13      	ldrb	r3, [r2, #8]
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	441a      	add	r2, r3
 8004700:	7a13      	ldrb	r3, [r2, #8]
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	4613      	mov	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b25b      	sxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	db15      	blt.n	800474c <Endpoint_ConfigureEndpointTable+0x130>
			device.Driver->EndpointReadStart(Table[i].Address,
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	7818      	ldrb	r0, [r3, #0]
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <Endpoint_ConfigureEndpointTable+0x14c>)
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	3318      	adds	r3, #24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4619      	mov	r1, r3
 800474a:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	3301      	adds	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	429a      	cmp	r2, r3
 8004758:	f4ff af69 	bcc.w	800462e <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 800475c:	2301      	movs	r3, #1
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	20000d90 	.word	0x20000d90

0800476c <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	50004600 	.word	0x50004600

08004788 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	50004600 	.word	0x50004600

080047a4 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	b2db      	uxtb	r3, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	50004600 	.word	0x50004600

080047c4 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000ffc0 	.word	0x2000ffc0
 80047e8:	50004600 	.word	0x50004600

080047ec <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000ffc0 	.word	0x2000ffc0

08004804 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <XMC_SCU_GetMirrorStatus+0x14>)
 800480a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	50004000 	.word	0x50004000

0800481c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8004824:	f002 fb82 	bl	8006f2c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <XMC_SCU_lDelay+0x40>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <XMC_SCU_lDelay+0x44>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0c9a      	lsrs	r2, r3, #18
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e003      	b.n	800484a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8004842:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3f7      	bcc.n	8004842 <XMC_SCU_lDelay+0x26>
  }
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2000ffc0 	.word	0x2000ffc0
 8004860:	431bde83 	.word	0x431bde83

08004864 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4904      	ldr	r1, [pc, #16]	; (8004884 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	50004074 	.word	0x50004074

08004888 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	43db      	mvns	r3, r3
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800489a:	4013      	ands	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	50004074 	.word	0x50004074

080048b0 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	4904      	ldr	r1, [pc, #16]	; (80048d0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	50004074 	.word	0x50004074

080048d4 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80048da:	685b      	ldr	r3, [r3, #4]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	50004074 	.word	0x50004074

080048ec <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60d3      	str	r3, [r2, #12]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	50004074 	.word	0x50004074

0800490c <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <XMC_SCU_GetBootMode+0x18>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	50004000 	.word	0x50004000

08004928 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8004932:	4a04      	ldr	r2, [pc, #16]	; (8004944 <XMC_SCU_SetBootMode+0x1c>)
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	6113      	str	r3, [r2, #16]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	50004000 	.word	0x50004000

08004948 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8004950:	4a05      	ldr	r2, [pc, #20]	; (8004968 <XMC_SCU_ReadGPR+0x20>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	330a      	adds	r3, #10
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	685b      	ldr	r3, [r3, #4]
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	50004000 	.word	0x50004000

0800496c <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <XMC_SCU_WriteGPR+0x24>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	330a      	adds	r3, #10
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	50004000 	.word	0x50004000

08004994 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3328      	adds	r3, #40	; 0x28
 80049a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049a8:	2101      	movs	r1, #1
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	4905      	ldr	r1, [pc, #20]	; (80049c8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3328      	adds	r3, #40	; 0x28
 80049b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	50004000 	.word	0x50004000

080049cc <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 80049d6:	4a0b      	ldr	r2, [pc, #44]	; (8004a04 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3328      	adds	r3, #40	; 0x28
 80049dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049e0:	2101      	movs	r1, #1
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	4906      	ldr	r1, [pc, #24]	; (8004a04 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80049ec:	401a      	ands	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3328      	adds	r3, #40	; 0x28
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	50004000 	.word	0x50004000

08004a08 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8004a1e:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8004a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	50004000 	.word	0x50004000

08004a38 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8004a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a42:	4a05      	ldr	r2, [pc, #20]	; (8004a58 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	50004000 	.word	0x50004000

08004a5c <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a66:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	50004000 	.word	0x50004000

08004a80 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8004a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	50004000 	.word	0x50004000

08004aa8 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8004aac:	4b07      	ldr	r3, [pc, #28]	; (8004acc <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	50004000 	.word	0x50004000

08004ad0 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8004ada:	f7ff ffd1 	bl	8004a80 <XMC_SCU_IsTemperatureSensorEnabled>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f083 0301 	eor.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8004aee:	f000 f831 	bl	8004b54 <XMC_SCU_IsTemperatureSensorBusy>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	50004000 	.word	0x50004000

08004b1c <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8004b22:	f7ff ffad 	bl	8004a80 <XMC_SCU_IsTemperatureSensorEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f083 0301 	eor.w	r3, r3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8004b32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	e005      	b.n	8004b46 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b44:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8004b46:	687b      	ldr	r3, [r7, #4]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	50004000 	.word	0x50004000

08004b54 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	50004000 	.word	0x50004000

08004b7c <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004b8e:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8004b98:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004ba8:	bf00      	nop
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004bac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f8      	bne.n	8004baa <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	50004000 	.word	0x50004000

08004bc8 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004bd8:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004bea:	bf00      	nop
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004bee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f8      	bne.n	8004bec <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004bfc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	50004000 	.word	0x50004000

08004c10 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f000 faf1 	bl	8005200 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8004c1e:	f000 fd7f 	bl	8005720 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	79db      	ldrb	r3, [r3, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8004c2a:	f000 ff77 	bl	8005b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8004c2e:	bf00      	nop
 8004c30:	f000 ff62 	bl	8005af8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f083 0301 	eor.w	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f7      	bne.n	8004c30 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7a5b      	ldrb	r3, [r3, #9]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb6f 	bl	8005328 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8004c4a:	bf00      	nop
 8004c4c:	f7ff fdda 	bl	8004804 <XMC_SCU_GetMirrorStatus>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1fa      	bne.n	8004c4c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7a1b      	ldrb	r3, [r3, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fd0c 	bl	8005678 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7c1b      	ldrb	r3, [r3, #16]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fb7f 	bl	8005368 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7c5b      	ldrb	r3, [r3, #17]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fba6 	bl	80053c0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c9b      	ldrb	r3, [r3, #18]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fb8b 	bl	8005394 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7cdb      	ldrb	r3, [r3, #19]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fbb2 	bl	80053ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	799b      	ldrb	r3, [r3, #6]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8004c90:	f000 ffd8 	bl	8005c44 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8004c94:	bf00      	nop
 8004c96:	f000 fffd 	bl	8005c94 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f083 0301 	eor.w	r3, r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f7      	bne.n	8004c96 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	78db      	ldrb	r3, [r3, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8004cae:	f001 f855 	bl	8005d5c <XMC_SCU_CLOCK_DisableSystemPll>
 8004cb2:	e011      	b.n	8004cd8 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8004cb4:	f001 f840 	bl	8005d38 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8898      	ldrh	r0, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004cc4:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004cca:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	f001 f854 	bl	8005d80 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce0:	d103      	bne.n	8004cea <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8004ce2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ce6:	f000 fa8b 	bl	8005200 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8004cea:	f002 f91f 	bl	8006f2c <SystemCoreClockUpdate>
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd90      	pop	{r4, r7, pc}
	...

08004cf8 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <XMC_SCU_TRAP_Enable+0x24>)
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	4904      	ldr	r1, [pc, #16]	; (8004d1c <XMC_SCU_TRAP_Enable+0x24>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	50004160 	.word	0x50004160

08004d20 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <XMC_SCU_TRAP_Disable+0x20>)
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4904      	ldr	r1, [pc, #16]	; (8004d40 <XMC_SCU_TRAP_Disable+0x20>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	50004160 	.word	0x50004160

08004d44 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <XMC_SCU_TRAP_GetStatus+0x14>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	50004160 	.word	0x50004160

08004d5c <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <XMC_SCU_TRAP_Trigger+0x1c>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6113      	str	r3, [r2, #16]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	50004160 	.word	0x50004160

08004d7c <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60d3      	str	r3, [r2, #12]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	50004160 	.word	0x50004160

08004d9c <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	614b      	str	r3, [r1, #20]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	5000413c 	.word	0x5000413c

08004dc0 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8004dc4:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <XMC_SCU_PARITY_GetStatus+0x14>)
 8004dc6:	695b      	ldr	r3, [r3, #20]
} 
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	5000413c 	.word	0x5000413c

08004dd8 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <XMC_SCU_PARITY_Enable+0x20>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4904      	ldr	r1, [pc, #16]	; (8004df8 <XMC_SCU_PARITY_Enable+0x20>)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	5000413c 	.word	0x5000413c

08004dfc <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <XMC_SCU_PARITY_Disable+0x24>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <XMC_SCU_PARITY_Disable+0x24>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	5000413c 	.word	0x5000413c

08004e24 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4904      	ldr	r1, [pc, #16]	; (8004e44 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	5000413c 	.word	0x5000413c

08004e48 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	4904      	ldr	r1, [pc, #16]	; (8004e6c <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	5000413c 	.word	0x5000413c

08004e70 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	4904      	ldr	r1, [pc, #16]	; (8004e90 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	614b      	str	r3, [r1, #20]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	50004074 	.word	0x50004074

08004e94 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	614b      	str	r3, [r1, #20]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	50004074 	.word	0x50004074

08004ebc <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0f1b      	lsrs	r3, r3, #28
 8004ec8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ed0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8004ee0:	4413      	add	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	50004410 	.word	0x50004410

08004ef8 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f0c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8004f1c:	4413      	add	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	50004414 	.word	0x50004414

08004f34 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0f1b      	lsrs	r3, r3, #28
 8004f40:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f48:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	5000440c 	.word	0x5000440c

08004f7c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8004f82:	f000 f839 	bl	8004ff8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8004f86:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9c:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e01f      	b.n	8004fe8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	0e1b      	lsrs	r3, r3, #24
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	3301      	adds	r3, #1
 8004fd0:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	fb02 f203 	mul.w	r2, r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	50004710 	.word	0x50004710

08004ff8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 800500a:	f001 fff9 	bl	8007000 <OSCHP_GetFrequency>
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	e001      	b.n	8005016 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8005014:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8005016:	687b      	ldr	r3, [r7, #4]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	50004710 	.word	0x50004710
 8005024:	016e3600 	.word	0x016e3600

08005028 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 800502e:	f001 ffe7 	bl	8007000 <OSCHP_GetFrequency>
 8005032:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8005034:	4b10      	ldr	r3, [pc, #64]	; (8005078 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504a:	3301      	adds	r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	0e1b      	lsrs	r3, r3, #24
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	3301      	adds	r3, #1
 800505a:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	fb02 f203 	mul.w	r2, r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	50004710 	.word	0x50004710

0800507c <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8005086:	f7ff fb9d 	bl	80047c4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800508a:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	50004600 	.word	0x50004600

080050a8 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 80050b2:	f7ff fb5b 	bl	800476c <XMC_SCU_CLOCK_GetUsbClockSource>
 80050b6:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050be:	d103      	bne.n	80050c8 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80050c0:	f7ff ff5c 	bl	8004f7c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	e005      	b.n	80050d4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80050ce:	f7ff ffab 	bl	8005028 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80050d2:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 80050dc:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	50004600 	.word	0x50004600

080050f0 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80050f6:	f7ff ff41 	bl	8004f7c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80050fa:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8005104:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	50004600 	.word	0x50004600

08005118 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8005122:	f7ff fb31 	bl	8004788 <XMC_SCU_CLOCK_GetWdtClockSource>
 8005126:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512e:	d103      	bne.n	8005138 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8005130:	f7ff ff24 	bl	8004f7c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	e00c      	b.n	8005152 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	e006      	b.n	8005152 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d102      	bne.n	8005152 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 800514c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005150:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8005158:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	016e3600 	.word	0x016e3600
 800516c:	50004600 	.word	0x50004600

08005170 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 800517a:	f7ff fb13 	bl	80047a4 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 800517e:	4603      	mov	r3, r0
 8005180:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d10d      	bne.n	80051a4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8005188:	f7ff fef8 	bl	8004f7c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800518c:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8005198:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	e016      	b.n	80051d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 80051aa:	f7ff fb0b 	bl	80047c4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	e00f      	b.n	80051d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d10c      	bne.n	80051d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80051b8:	f7ff ff36 	bl	8005028 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80051bc:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80051c8:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 80051d2:	687b      	ldr	r3, [r7, #4]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	50004600 	.word	0x50004600

080051e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80051e4:	f7ff fb02 	bl	80047ec <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80051e8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	50004600 	.word	0x50004600

08005200 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005210:	4904      	ldr	r1, [pc, #16]	; (8005224 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4313      	orrs	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	50004600 	.word	0x50004600

08005228 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005238:	4904      	ldr	r1, [pc, #16]	; (800524c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4313      	orrs	r3, r2
 800523e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	50004600 	.word	0x50004600

08005250 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005260:	4904      	ldr	r1, [pc, #16]	; (8005274 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4313      	orrs	r3, r2
 8005266:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	50004600 	.word	0x50004600

08005278 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 800528a:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 800528e:	4313      	orrs	r3, r2
 8005290:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	50004600 	.word	0x50004600

080052a4 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d108      	bne.n	80052c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80052ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 80052c4:	e007      	b.n	80052d6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	60d3      	str	r3, [r2, #12]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	50004710 	.word	0x50004710

080052e8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80052f2:	bf00      	nop
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80052f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f8      	bne.n	80052f4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800530a:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800530c:	4905      	ldr	r1, [pc, #20]	; (8005324 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	50004000 	.word	0x50004000
 8005324:	50004300 	.word	0x50004300

08005328 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005332:	bf00      	nop
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8005336:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f8      	bne.n	8005334 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800534a:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800534c:	4905      	ldr	r1, [pc, #20]	; (8005364 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	60cb      	str	r3, [r1, #12]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	50004000 	.word	0x50004000
 8005364:	50004300 	.word	0x50004300

08005368 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800537c:	4904      	ldr	r1, [pc, #16]	; (8005390 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800537e:	4313      	orrs	r3, r2
 8005380:	60cb      	str	r3, [r1, #12]
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	50004600 	.word	0x50004600

08005394 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80053a8:	4904      	ldr	r1, [pc, #16]	; (80053bc <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	620b      	str	r3, [r1, #32]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	50004600 	.word	0x50004600

080053c0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80053c8:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	50004600 	.word	0x50004600

080053ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8005400:	4904      	ldr	r1, [pc, #16]	; (8005414 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8005402:	4313      	orrs	r3, r2
 8005404:	614b      	str	r3, [r1, #20]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	50004600 	.word	0x50004600

08005418 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800542c:	4904      	ldr	r1, [pc, #16]	; (8005440 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 800542e:	4313      	orrs	r3, r2
 8005430:	618b      	str	r3, [r1, #24]
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	50004600 	.word	0x50004600

08005444 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8005458:	4904      	ldr	r1, [pc, #16]	; (800546c <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	50004600 	.word	0x50004600

08005470 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8005484:	4904      	ldr	r1, [pc, #16]	; (8005498 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8005486:	4313      	orrs	r3, r2
 8005488:	624b      	str	r3, [r1, #36]	; 0x24
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	50004600 	.word	0x50004600

0800549c <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	3a01      	subs	r2, #1
 80054b4:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80054b6:	4904      	ldr	r1, [pc, #16]	; (80054c8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	628b      	str	r3, [r1, #40]	; 0x28
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	50004600 	.word	0x50004600

080054cc <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	6053      	str	r3, [r2, #4]
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	50004600 	.word	0x50004600

080054ec <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80054f6:	4a04      	ldr	r2, [pc, #16]	; (8005508 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	6093      	str	r3, [r2, #8]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	50004600 	.word	0x50004600

0800550c <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	50004600 	.word	0x50004600

08005538 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005564 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 800554e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005552:	ee17 3a90 	vmov	r3, s15
}
 8005556:	4618      	mov	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	50004200 	.word	0x50004200
 8005564:	3bbe0ded 	.word	0x3bbe0ded

08005568 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	b2db      	uxtb	r3, r3
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005598 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8005580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005584:	ee17 3a90 	vmov	r3, s15
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	50004200 	.word	0x50004200
 8005598:	3cb851ec 	.word	0x3cb851ec

0800559c <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	4a05      	ldr	r2, [pc, #20]	; (80055bc <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055aa:	f023 0302 	bic.w	r3, r3, #2
 80055ae:	6153      	str	r3, [r2, #20]
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	50004710 	.word	0x50004710

080055c0 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	6153      	str	r3, [r2, #20]
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	50004710 	.word	0x50004710

080055e4 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4a19      	ldr	r2, [pc, #100]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80055fa:	4b17      	ldr	r3, [pc, #92]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005600:	f043 0310 	orr.w	r3, r3, #16
 8005604:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	3b01      	subs	r3, #1
 800560a:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3b01      	subs	r3, #1
 8005610:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8005612:	4911      	ldr	r1, [pc, #68]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005614:	4313      	orrs	r3, r2
 8005616:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005622:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	4a08      	ldr	r2, [pc, #32]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800563a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800563c:	bf00      	nop
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f9      	beq.n	800563e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	50004710 	.word	0x50004710

0800565c <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8005664:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	50004710 	.word	0x50004710
 8005674:	00010003 	.word	0x00010003

08005678 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10e      	bne.n	80056b2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800569a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800569e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80056a0:	2064      	movs	r0, #100	; 0x64
 80056a2:	f7ff f8bb 	bl	800481c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80056ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056b0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80056b2:	2064      	movs	r0, #100	; 0x64
 80056b4:	f7ff f8b2 	bl	800481c <XMC_SCU_lDelay>
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	50004710 	.word	0x50004710

080056c4 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <XMC_SCU_POWER_EnableUsb+0x18>)
 80056ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056ce:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	50004200 	.word	0x50004200

080056e0 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <XMC_SCU_POWER_DisableUsb+0x18>)
 80056e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056ea:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	50004200 	.word	0x50004200

080056fc <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	b2db      	uxtb	r3, r3
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	50004710 	.word	0x50004710

08005720 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8005732:	2201      	movs	r2, #1
 8005734:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8005736:	bf00      	nop
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f9      	beq.n	8005738 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8005752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005756:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8005758:	bf00      	nop
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f9      	bne.n	800575a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	50004200 	.word	0x50004200
 8005774:	50004400 	.word	0x50004400

08005778 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 800577e:	2201      	movs	r2, #1
 8005780:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8005784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005788:	605a      	str	r2, [r3, #4]
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	50004200 	.word	0x50004200
 8005798:	50004400 	.word	0x50004400

0800579c <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 80057bc:	2300      	movs	r3, #0
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	b2db      	uxtb	r3, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	50004200 	.word	0x50004200
 80057d4:	50004400 	.word	0x50004400

080057d8 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80057dc:	bf00      	nop
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 80057e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f8      	bne.n	80057de <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	4a05      	ldr	r2, [pc, #20]	; (8005808 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6153      	str	r3, [r2, #20]
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	50004000 	.word	0x50004000
 8005808:	50004300 	.word	0x50004300

0800580c <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8005810:	bf00      	nop
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8005814:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f8      	bne.n	8005812 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4a05      	ldr	r2, [pc, #20]	; (800583c <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	6153      	str	r3, [r2, #20]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	50004000 	.word	0x50004000
 800583c:	50004300 	.word	0x50004300

08005840 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8005848:	bf00      	nop
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 800584c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f8      	bne.n	800584a <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8005858:	4a05      	ldr	r2, [pc, #20]	; (8005870 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6053      	str	r3, [r2, #4]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	50004000 	.word	0x50004000
 8005870:	50004300 	.word	0x50004300

08005874 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800587c:	bf00      	nop
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8005880:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f8      	bne.n	800587e <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <XMC_SCU_HIB_TriggerEvent+0x30>)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6093      	str	r3, [r2, #8]
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	50004000 	.word	0x50004000
 80058a4:	50004300 	.word	0x50004300

080058a8 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80058b0:	bf00      	nop
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <XMC_SCU_HIB_EnableEvent+0x30>)
 80058b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f8      	bne.n	80058b2 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <XMC_SCU_HIB_EnableEvent+0x34>)
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4905      	ldr	r1, [pc, #20]	; (80058dc <XMC_SCU_HIB_EnableEvent+0x34>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60cb      	str	r3, [r1, #12]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	50004000 	.word	0x50004000
 80058dc:	50004300 	.word	0x50004300

080058e0 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80058e8:	bf00      	nop
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <XMC_SCU_HIB_DisableEvent+0x34>)
 80058ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f8      	bne.n	80058ea <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <XMC_SCU_HIB_DisableEvent+0x38>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	43d2      	mvns	r2, r2
 8005900:	4611      	mov	r1, r2
 8005902:	4a05      	ldr	r2, [pc, #20]	; (8005918 <XMC_SCU_HIB_DisableEvent+0x38>)
 8005904:	400b      	ands	r3, r1
 8005906:	60d3      	str	r3, [r2, #12]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	50004000 	.word	0x50004000
 8005918:	50004300 	.word	0x50004300

0800591c <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005920:	bf00      	nop
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8005924:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f8      	bne.n	8005922 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a05      	ldr	r2, [pc, #20]	; (800594c <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8005936:	f043 0310 	orr.w	r3, r3, #16
 800593a:	60d3      	str	r3, [r2, #12]
}
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	50004000 	.word	0x50004000
 800594c:	50004300 	.word	0x50004300

08005950 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8005960:	f7ff ffdc 	bl	800591c <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005976:	bf00      	nop
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 800597a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f8      	bne.n	8005978 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005996:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8005998:	e005      	b.n	80059a6 <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a06      	ldr	r2, [pc, #24]	; (80059b8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80059a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a4:	60d3      	str	r3, [r2, #12]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	50004000 	.word	0x50004000
 80059b8:	50004300 	.word	0x50004300

080059bc <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	6039      	str	r1, [r7, #0]
 80059c6:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80059c8:	bf00      	nop
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <XMC_SCU_HIB_SetPinMode+0x4c>)
 80059cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f8      	bne.n	80059ca <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <XMC_SCU_HIB_SetPinMode+0x50>)
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80059e4:	fa01 f303 	lsl.w	r3, r1, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80059f6:	4905      	ldr	r1, [pc, #20]	; (8005a0c <XMC_SCU_HIB_SetPinMode+0x50>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60cb      	str	r3, [r1, #12]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	50004000 	.word	0x50004000
 8005a0c:	50004300 	.word	0x50004300

08005a10 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	460a      	mov	r2, r1
 8005a1a:	71fb      	strb	r3, [r7, #7]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005a20:	bf00      	nop
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8005a24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f8      	bne.n	8005a22 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	4013      	ands	r3, r2
                        (level << pin);
 8005a42:	88b9      	ldrh	r1, [r7, #4]
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8005a4c:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	60d3      	str	r3, [r2, #12]
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	50004000 	.word	0x50004000
 8005a64:	50004300 	.word	0x50004300

08005a68 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005a72:	bf00      	nop
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <XMC_SCU_HIB_SetInput0+0x48>)
 8005a76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f8      	bne.n	8005a74 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8005a94:	e005      	b.n	8005aa2 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa0:	60d3      	str	r3, [r2, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	50004000 	.word	0x50004000
 8005ab4:	50004300 	.word	0x50004300

08005ab8 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005ac2:	bf00      	nop
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <XMC_SCU_HIB_SetSR0Input+0x38>)
 8005ac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f8      	bne.n	8005ac4 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	4905      	ldr	r1, [pc, #20]	; (8005af4 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	50004000 	.word	0x50004000
 8005af4:	50004300 	.word	0x50004300

08005af8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	50004300 	.word	0x50004300

08005b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005b20:	bf00      	nop
 8005b22:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005b24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f8      	bne.n	8005b22 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005b30:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b3a:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005b3c:	bf00      	nop
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005b40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f8      	bne.n	8005b3e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005b52:	f043 0308 	orr.w	r3, r3, #8
 8005b56:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8005b58:	bf00      	nop
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005b5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f8      	bne.n	8005b5a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8005b6e:	bf00      	nop
 8005b70:	f7fe fe48 	bl	8004804 <XMC_SCU_GetMirrorStatus>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1fa      	bne.n	8005b70 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	50004000 	.word	0x50004000
 8005b84:	50004300 	.word	0x50004300

08005b88 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005b8c:	bf00      	nop
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8005b90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f8      	bne.n	8005b8e <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	4a05      	ldr	r2, [pc, #20]	; (8005bb8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005ba2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005ba6:	61d3      	str	r3, [r2, #28]
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	50004000 	.word	0x50004000
 8005bb8:	50004300 	.word	0x50004300

08005bbc <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005bc0:	bf00      	nop
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8005bc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f8      	bne.n	8005bc2 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4a05      	ldr	r2, [pc, #20]	; (8005bec <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005bd6:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8005bda:	61d3      	str	r3, [r2, #28]
}
 8005bdc:	bf00      	nop
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	50004000 	.word	0x50004000
 8005bec:	50004300 	.word	0x50004300

08005bf0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005bf4:	bf00      	nop
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005bf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f8      	bne.n	8005bf6 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8005c0c:	4a05      	ldr	r2, [pc, #20]	; (8005c24 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8005c0e:	f043 0320 	orr.w	r3, r3, #32
 8005c12:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	50004000 	.word	0x50004000
 8005c24:	50004300 	.word	0x50004300

08005c28 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0301 	and.w	r3, r3, #1
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	50004300 	.word	0x50004300

08005c44 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8005c44:	b598      	push	{r3, r4, r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c52:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8005c5c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8005c60:	f001 f9ce 	bl	8007000 <OSCHP_GetFrequency>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8005c68:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6c:	0d1b      	lsrs	r3, r3, #20
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8005c72:	4a06      	ldr	r2, [pc, #24]	; (8005c8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8005c74:	4323      	orrs	r3, r4
 8005c76:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a02      	ldr	r2, [pc, #8]	; (8005c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005c7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c82:	6053      	str	r3, [r2, #4]
}
 8005c84:	bf00      	nop
 8005c86:	bd98      	pop	{r3, r4, r7, pc}
 8005c88:	50004710 	.word	0x50004710
 8005c8c:	50004700 	.word	0x50004700
 8005c90:	6b5fca6b 	.word	0x6b5fca6b

08005c94 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005ca0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	50004710 	.word	0x50004710

08005cbc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8005cc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005cca:	6053      	str	r3, [r2, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	50004700 	.word	0x50004700

08005cdc <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6053      	str	r3, [r2, #4]
}
 8005cec:	bf00      	nop
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	50004700 	.word	0x50004700

08005cfc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a04      	ldr	r2, [pc, #16]	; (8005d18 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	6053      	str	r3, [r2, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	50004700 	.word	0x50004700

08005d1c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0301 	and.w	r3, r3, #1
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	50004700 	.word	0x50004700

08005d38 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a05      	ldr	r2, [pc, #20]	; (8005d58 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8005d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d46:	f023 0302 	bic.w	r3, r3, #2
 8005d4a:	6053      	str	r3, [r2, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	50004710 	.word	0x50004710

08005d5c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6a:	f043 0302 	orr.w	r3, r3, #2
 8005d6e:	6053      	str	r3, [r2, #4]
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	50004710 	.word	0x50004710

08005d80 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60ba      	str	r2, [r7, #8]
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	81fb      	strh	r3, [r7, #14]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8005d92:	89fb      	ldrh	r3, [r7, #14]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fa85 	bl	80052a4 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8005d9a:	7b7b      	ldrb	r3, [r7, #13]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f040 8084 	bne.w	8005eaa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8005da2:	89fb      	ldrh	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8005da8:	f001 f92a 	bl	8007000 <OSCHP_GetFrequency>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b4c      	ldr	r3, [pc, #304]	; (8005ee0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8005db0:	fba3 2302 	umull	r2, r3, r3, r2
 8005db4:	0c9b      	lsrs	r3, r3, #18
 8005db6:	059b      	lsls	r3, r3, #22
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e002      	b.n	8005dc2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8005dbc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005dc0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	fb02 f203 	mul.w	r2, r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	4a43      	ldr	r2, [pc, #268]	; (8005ee4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	0d9b      	lsrs	r3, r3, #22
 8005dde:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005de0:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a40      	ldr	r2, [pc, #256]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8005dec:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a3d      	ldr	r2, [pc, #244]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005df2:	f043 0310 	orr.w	r3, r3, #16
 8005df6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8005df8:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8005dfe:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	3a01      	subs	r2, #1
 8005e04:	0212      	lsls	r2, r2, #8
 8005e06:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005e0e:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8005e16:	4934      	ldr	r1, [pc, #208]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005e1c:	4b32      	ldr	r3, [pc, #200]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e26:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8005e28:	4b2f      	ldr	r3, [pc, #188]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e2e:	f023 0310 	bic.w	r3, r3, #16
 8005e32:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8005e34:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e3e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005e40:	bf00      	nop
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f9      	beq.n	8005e42 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005e4e:	4b26      	ldr	r3, [pc, #152]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8005e5a:	bf00      	nop
 8005e5c:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f9      	bne.n	8005e5c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	0d9b      	lsrs	r3, r3, #22
 8005e74:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d202      	bcs.n	8005e84 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005e7e:	6938      	ldr	r0, [r7, #16]
 8005e80:	f000 f84a 	bl	8005f18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	0d9b      	lsrs	r3, r3, #22
 8005e92:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8005e94:	6a3a      	ldr	r2, [r7, #32]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d202      	bcs.n	8005ea2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005e9c:	6938      	ldr	r0, [r7, #16]
 8005e9e:	f000 f83b 	bl	8005f18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8005ea2:	6a38      	ldr	r0, [r7, #32]
 8005ea4:	f000 f838 	bl	8005f18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8005ea8:	e015      	b.n	8005ed6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005eb6:	490c      	ldr	r1, [pc, #48]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8005ec8:	bf00      	nop
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f9      	beq.n	8005eca <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	431bde83 	.word	0x431bde83
 8005ee4:	aaaaaaab 	.word	0xaaaaaaab
 8005ee8:	50004710 	.word	0x50004710
 8005eec:	f08080ff 	.word	0xf08080ff
 8005ef0:	88888889 	.word	0x88888889
 8005ef4:	b60b60b7 	.word	0xb60b60b7

08005ef8 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f06:	6053      	str	r3, [r2, #4]
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	50004710 	.word	0x50004710

08005f18 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8005f2e:	4905      	ldr	r1, [pc, #20]	; (8005f44 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8005f34:	2032      	movs	r0, #50	; 0x32
 8005f36:	f7fe fc71 	bl	800481c <XMC_SCU_lDelay>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	50004710 	.word	0x50004710

08005f48 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	50004710 	.word	0x50004710

08005f6c <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005f7a:	e002      	b.n	8005f82 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b1f      	cmp	r3, #31
 8005f96:	d9f1      	bls.n	8005f7c <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d102      	bne.n	8005fa4 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	72fb      	strb	r3, [r7, #11]
 8005fa2:	e006      	b.n	8005fb2 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8005fa4:	4906      	ldr	r1, [pc, #24]	; (8005fc0 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8005fae:	2300      	movs	r3, #0
 8005fb0:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	200010e8 	.word	0x200010e8

08005fc4 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8005fd0:	f7fe fc80 	bl	80048d4 <XMC_SCU_INTERUPT_GetEventStatus>
 8005fd4:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8005fd6:	e01c      	b.n	8006012 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d011      	beq.n	800600c <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8005fe8:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <XMC_SCU_IRQHandler+0x5c>)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff0:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fc71 	bl	80048ec <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 800600a:	e005      	b.n	8006018 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b1f      	cmp	r3, #31
 8006016:	d9df      	bls.n	8005fd8 <XMC_SCU_IRQHandler+0x14>
  }
}
 8006018:	bf00      	nop
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	200010e8 	.word	0x200010e8

08006024 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	460b      	mov	r3, r1
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8006032:	4b3f      	ldr	r3, [pc, #252]	; (8006130 <Endpoint_Write_Stream_LE+0x10c>)
 8006034:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006038:	461a      	mov	r2, r3
 800603a:	232c      	movs	r3, #44	; 0x2c
 800603c:	fb03 f302 	mul.w	r3, r3, r2
 8006040:	4a3b      	ldr	r2, [pc, #236]	; (8006130 <Endpoint_Write_Stream_LE+0x10c>)
 8006042:	4413      	add	r3, r2
 8006044:	3304      	adds	r3, #4
 8006046:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d052      	beq.n	8006100 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	897a      	ldrh	r2, [r7, #10]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800606a:	e049      	b.n	8006100 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d000      	beq.n	800607c <Endpoint_Write_Stream_LE+0x58>
			continue;
 800607a:	e041      	b.n	8006100 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 800607c:	f7fe f9c4 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d029      	beq.n	80060da <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	897b      	ldrh	r3, [r7, #10]
 8006092:	4293      	cmp	r3, r2
 8006094:	bf28      	it	cs
 8006096:	4613      	movcs	r3, r2
 8006098:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	461a      	mov	r2, r3
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	4413      	add	r3, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	8bfa      	ldrh	r2, [r7, #30]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	8afb      	ldrh	r3, [r7, #22]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 fac0 	bl	8006638 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	8afb      	ldrh	r3, [r7, #22]
 80060be:	441a      	add	r2, r3
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 80060c4:	8bfa      	ldrh	r2, [r7, #30]
 80060c6:	8afb      	ldrh	r3, [r7, #22]
 80060c8:	4413      	add	r3, r2
 80060ca:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 80060cc:	897b      	ldrh	r3, [r7, #10]
 80060ce:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 80060d0:	897a      	ldrh	r2, [r7, #10]
 80060d2:	8afb      	ldrh	r3, [r7, #22]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	817b      	strh	r3, [r7, #10]
 80060d8:	e012      	b.n	8006100 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 80060da:	f7fe f91d 	bl	8004318 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8bfa      	ldrh	r2, [r7, #30]
 80060e8:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80060ea:	2305      	movs	r3, #5
 80060ec:	e01b      	b.n	8006126 <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80060ee:	f7fe f835 	bl	800415c <Endpoint_WaitUntilReady>
 80060f2:	4603      	mov	r3, r0
 80060f4:	757b      	strb	r3, [r7, #21]
 80060f6:	7d7b      	ldrb	r3, [r7, #21]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 80060fc:	7d7b      	ldrb	r3, [r7, #21]
 80060fe:	e012      	b.n	8006126 <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8006100:	897b      	ldrh	r3, [r7, #10]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1b2      	bne.n	800606c <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8006106:	897b      	ldrh	r3, [r7, #10]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <Endpoint_Write_Stream_LE+0x100>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	889b      	ldrh	r3, [r3, #4]
 8006110:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8006114:	b2db      	uxtb	r3, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	8bba      	ldrh	r2, [r7, #28]
 800611a:	429a      	cmp	r2, r3
 800611c:	d102      	bne.n	8006124 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <Endpoint_Write_Stream_LE+0x110>)
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000d90 	.word	0x20000d90
 8006134:	20000a28 	.word	0x20000a28

08006138 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8006148:	e00e      	b.n	8006168 <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	4619      	mov	r1, r3
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	3b01      	subs	r3, #1
 800615e:	780a      	ldrb	r2, [r1, #0]
 8006160:	701a      	strb	r2, [r3, #0]
		i++;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	3301      	adds	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d3ec      	bcc.n	800614a <SwapCopy+0x12>
	}
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	460b      	mov	r3, r1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800618a:	4b35      	ldr	r3, [pc, #212]	; (8006260 <Endpoint_Write_Stream_BE+0xe4>)
 800618c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006190:	461a      	mov	r2, r3
 8006192:	232c      	movs	r3, #44	; 0x2c
 8006194:	fb03 f302 	mul.w	r3, r3, r2
 8006198:	4a31      	ldr	r2, [pc, #196]	; (8006260 <Endpoint_Write_Stream_BE+0xe4>)
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d050      	beq.n	8006250 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	897a      	ldrh	r2, [r7, #10]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80061be:	e047      	b.n	8006250 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d000      	beq.n	80061d0 <Endpoint_Write_Stream_BE+0x54>
			continue;
 80061ce:	e03f      	b.n	8006250 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 80061d0:	f7fe f91a 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d027      	beq.n	800622a <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	6a1a      	ldr	r2, [r3, #32]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	897b      	ldrh	r3, [r7, #10]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bf28      	it	cs
 80061ea:	4613      	movcs	r3, r2
 80061ec:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	461a      	mov	r2, r3
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	4413      	add	r3, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	8bfa      	ldrh	r2, [r7, #30]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	4619      	mov	r1, r3
 8006204:	8afb      	ldrh	r3, [r7, #22]
 8006206:	461a      	mov	r2, r3
 8006208:	f7ff ff96 	bl	8006138 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	8afb      	ldrh	r3, [r7, #22]
 8006212:	441a      	add	r2, r3
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8006218:	8bfa      	ldrh	r2, [r7, #30]
 800621a:	8afb      	ldrh	r3, [r7, #22]
 800621c:	4413      	add	r3, r2
 800621e:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8006220:	897a      	ldrh	r2, [r7, #10]
 8006222:	8afb      	ldrh	r3, [r7, #22]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	817b      	strh	r3, [r7, #10]
 8006228:	e012      	b.n	8006250 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 800622a:	f7fe f875 	bl	8004318 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8bfa      	ldrh	r2, [r7, #30]
 8006238:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800623a:	2305      	movs	r3, #5
 800623c:	e00c      	b.n	8006258 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800623e:	f7fd ff8d 	bl	800415c <Endpoint_WaitUntilReady>
 8006242:	4603      	mov	r3, r0
 8006244:	757b      	strb	r3, [r7, #21]
 8006246:	7d7b      	ldrb	r3, [r7, #21]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 800624c:	7d7b      	ldrb	r3, [r7, #21]
 800624e:	e003      	b.n	8006258 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 8006250:	897b      	ldrh	r3, [r7, #10]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1b4      	bne.n	80061c0 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000d90 	.word	0x20000d90

08006264 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	460b      	mov	r3, r1
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <Endpoint_Read_Stream_LE+0xec>)
 8006274:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006278:	461a      	mov	r2, r3
 800627a:	232c      	movs	r3, #44	; 0x2c
 800627c:	fb03 f302 	mul.w	r3, r3, r2
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <Endpoint_Read_Stream_LE+0xec>)
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d053      	beq.n	800633e <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	897a      	ldrh	r2, [r7, #10]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80062a6:	e04a      	b.n	800633e <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d000      	beq.n	80062b8 <Endpoint_Read_Stream_LE+0x54>
			continue;
 80062b6:	e042      	b.n	800633e <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80062b8:	f7fe f8a6 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d02a      	beq.n	8006318 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	bf28      	it	cs
 80062cc:	4613      	movcs	r3, r2
 80062ce:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80062d0:	8bfa      	ldrh	r2, [r7, #30]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	461a      	mov	r2, r3
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	4619      	mov	r1, r3
 80062e6:	8afb      	ldrh	r3, [r7, #22]
 80062e8:	461a      	mov	r2, r3
 80062ea:	f000 f9a5 	bl	8006638 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	8afb      	ldrh	r3, [r7, #22]
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	8afb      	ldrh	r3, [r7, #22]
 8006300:	441a      	add	r2, r3
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8006306:	8bfa      	ldrh	r2, [r7, #30]
 8006308:	8afb      	ldrh	r3, [r7, #22]
 800630a:	4413      	add	r3, r2
 800630c:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 800630e:	897a      	ldrh	r2, [r7, #10]
 8006310:	8afb      	ldrh	r3, [r7, #22]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	817b      	strh	r3, [r7, #10]
 8006316:	e012      	b.n	800633e <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8006318:	f7fd ffb2 	bl	8004280 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8bfa      	ldrh	r2, [r7, #30]
 8006326:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8006328:	2305      	movs	r3, #5
 800632a:	e00c      	b.n	8006346 <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800632c:	f7fd ff16 	bl	800415c <Endpoint_WaitUntilReady>
 8006330:	4603      	mov	r3, r0
 8006332:	757b      	strb	r3, [r7, #21]
 8006334:	7d7b      	ldrb	r3, [r7, #21]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 800633a:	7d7b      	ldrb	r3, [r7, #21]
 800633c:	e003      	b.n	8006346 <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 800633e:	897b      	ldrh	r3, [r7, #10]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1b1      	bne.n	80062a8 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000d90 	.word	0x20000d90

08006354 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	460b      	mov	r3, r1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <Endpoint_Read_Stream_BE+0xec>)
 8006364:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006368:	461a      	mov	r2, r3
 800636a:	232c      	movs	r3, #44	; 0x2c
 800636c:	fb03 f302 	mul.w	r3, r3, r2
 8006370:	4a33      	ldr	r2, [pc, #204]	; (8006440 <Endpoint_Read_Stream_BE+0xec>)
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d053      	beq.n	800642e <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	897a      	ldrh	r2, [r7, #10]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8006396:	e04a      	b.n	800642e <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d000      	beq.n	80063a8 <Endpoint_Read_Stream_BE+0x54>
			continue;
 80063a6:	e042      	b.n	800642e <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80063a8:	f7fe f82e 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d02a      	beq.n	8006408 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	897b      	ldrh	r3, [r7, #10]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bf28      	it	cs
 80063bc:	4613      	movcs	r3, r2
 80063be:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80063c0:	8bfa      	ldrh	r2, [r7, #30]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	461a      	mov	r2, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	4619      	mov	r1, r3
 80063d6:	8afb      	ldrh	r3, [r7, #22]
 80063d8:	461a      	mov	r2, r3
 80063da:	f7ff fead 	bl	8006138 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	8afb      	ldrh	r3, [r7, #22]
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	8afb      	ldrh	r3, [r7, #22]
 80063f0:	441a      	add	r2, r3
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 80063f6:	8bfa      	ldrh	r2, [r7, #30]
 80063f8:	8afb      	ldrh	r3, [r7, #22]
 80063fa:	4413      	add	r3, r2
 80063fc:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80063fe:	897a      	ldrh	r2, [r7, #10]
 8006400:	8afb      	ldrh	r3, [r7, #22]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	817b      	strh	r3, [r7, #10]
 8006406:	e012      	b.n	800642e <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8006408:	f7fd ff3a 	bl	8004280 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8bfa      	ldrh	r2, [r7, #30]
 8006416:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8006418:	2305      	movs	r3, #5
 800641a:	e00c      	b.n	8006436 <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800641c:	f7fd fe9e 	bl	800415c <Endpoint_WaitUntilReady>
 8006420:	4603      	mov	r3, r0
 8006422:	757b      	strb	r3, [r7, #21]
 8006424:	7d7b      	ldrb	r3, [r7, #21]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 800642a:	7d7b      	ldrb	r3, [r7, #21]
 800642c:	e003      	b.n	8006436 <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1b1      	bne.n	8006398 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000d90 	.word	0x20000d90

08006444 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <Endpoint_Write_Control_Stream_LE+0x6c>)
 8006452:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 8006454:	e024      	b.n	80064a0 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11d      	bne.n	80064a0 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	429a      	cmp	r2, r3
 800646c:	d902      	bls.n	8006474 <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 800646e:	887b      	ldrh	r3, [r7, #2]
 8006470:	81fb      	strh	r3, [r7, #14]
 8006472:	e002      	b.n	800647a <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	89fa      	ldrh	r2, [r7, #14]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f8d8 	bl	8006638 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	89fb      	ldrh	r3, [r7, #14]
 800648e:	441a      	add	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	89fb      	ldrh	r3, [r7, #14]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 800649c:	f7fd ff3c 	bl	8004318 <Endpoint_ClearIN>
	while (Length) {
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d7      	bne.n	8006456 <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000d94 	.word	0x20000d94

080064b4 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ffbd 	bl	8006444 <Endpoint_Write_Control_Stream_LE>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 80064e0:	4b15      	ldr	r3, [pc, #84]	; (8006538 <Endpoint_Read_Control_Stream_LE+0x64>)
 80064e2:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 80064e4:	e020      	b.n	8006528 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d019      	beq.n	8006528 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689a      	ldr	r2, [r3, #8]
					? Length : EndPoint->OutBytesAvailable;
 80064f8:	887b      	ldrh	r3, [r7, #2]
 80064fa:	4293      	cmp	r3, r2
 80064fc:	bf28      	it	cs
 80064fe:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8006500:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	897a      	ldrh	r2, [r7, #10]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f894 	bl	8006638 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	897b      	ldrh	r3, [r7, #10]
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 800651c:	887a      	ldrh	r2, [r7, #2]
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8006524:	f7fd feac 	bl	8004280 <Endpoint_ClearOUT>
	while (Length) {
 8006528:	887b      	ldrh	r3, [r7, #2]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1db      	bne.n	80064e6 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000d94 	.word	0x20000d94

0800653c <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8006548:	887b      	ldrh	r3, [r7, #2]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ffc1 	bl	80064d4 <Endpoint_Read_Control_Stream_LE>
 8006552:	4603      	mov	r3, r0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	6039      	str	r1, [r7, #0]
 8006566:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8006568:	4b32      	ldr	r3, [pc, #200]	; (8006634 <Endpoint_Null_Stream+0xd8>)
 800656a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800656e:	461a      	mov	r2, r3
 8006570:	232c      	movs	r3, #44	; 0x2c
 8006572:	fb03 f302 	mul.w	r3, r3, r2
 8006576:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <Endpoint_Null_Stream+0xd8>)
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d04b      	beq.n	8006624 <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 800659c:	e042      	b.n	8006624 <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d000      	beq.n	80065ae <Endpoint_Null_Stream+0x52>
				continue;
 80065ac:	e03a      	b.n	8006624 <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 80065ae:	f7fd ff2b 	bl	8004408 <Endpoint_IsReadWriteAllowed>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d022      	beq.n	80065fe <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bf28      	it	cs
 80065c8:	4613      	movcs	r3, r2
 80065ca:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	4413      	add	r3, r2
 80065d6:	89fa      	ldrh	r2, [r7, #14]
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fe1a 	bl	8007214 <memset>
				ep->InBytesAvailable += Bytes;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	441a      	add	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 80065ec:	8afa      	ldrh	r2, [r7, #22]
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	4413      	add	r3, r2
 80065f2:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	89fb      	ldrh	r3, [r7, #14]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	80fb      	strh	r3, [r7, #6]
 80065fc:	e012      	b.n	8006624 <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 80065fe:	f7fd fe8b 	bl	8004318 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	8afa      	ldrh	r2, [r7, #22]
 800660c:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800660e:	2305      	movs	r3, #5
 8006610:	e00c      	b.n	800662c <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8006612:	f7fd fda3 	bl	800415c <Endpoint_WaitUntilReady>
 8006616:	4603      	mov	r3, r0
 8006618:	737b      	strb	r3, [r7, #13]
 800661a:	7b7b      	ldrb	r3, [r7, #13]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8006620:	7b7b      	ldrb	r3, [r7, #13]
 8006622:	e003      	b.n	800662c <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1b9      	bne.n	800659e <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000d90 	.word	0x20000d90

08006638 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8006638:	0913      	lsrs	r3, r2, #4
 800663a:	d011      	beq.n	8006660 <thumb2_memcpy+0x28>
 800663c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006640:	f840 cb04 	str.w	ip, [r0], #4
 8006644:	f851 cb04 	ldr.w	ip, [r1], #4
 8006648:	f840 cb04 	str.w	ip, [r0], #4
 800664c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006650:	f840 cb04 	str.w	ip, [r0], #4
 8006654:	f851 cb04 	ldr.w	ip, [r1], #4
 8006658:	f840 cb04 	str.w	ip, [r0], #4
 800665c:	3b01      	subs	r3, #1
 800665e:	d1ed      	bne.n	800663c <thumb2_memcpy+0x4>
 8006660:	f012 030f 	ands.w	r3, r2, #15
 8006664:	d005      	beq.n	8006672 <thumb2_memcpy+0x3a>
 8006666:	f811 cb01 	ldrb.w	ip, [r1], #1
 800666a:	f800 cb01 	strb.w	ip, [r0], #1
 800666e:	3b01      	subs	r3, #1
 8006670:	d1f9      	bne.n	8006666 <thumb2_memcpy+0x2e>
 8006672:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8006674:	bf00      	nop

08006676 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	460b      	mov	r3, r1
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f981 	bl	800698c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	210f      	movs	r1, #15
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	43db      	mvns	r3, r3
  eru->EXISEL = (eru->EXISEL & 
 800669a:	401a      	ands	r2, r3
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80066a8:	431a      	orrs	r2, r3
  eru->EXISEL = (eru->EXISEL & 
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]
  
  eru->EXICON[channel] = config->raw;
 80066ae:	7afa      	ldrb	r2, [r7, #11]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3204      	adds	r2, #4
 80066b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	460b      	mov	r3, r1
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f95a 	bl	800698c <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 80066d8:	7afa      	ldrb	r2, [r7, #11]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6819      	ldr	r1, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3208      	adds	r2, #8
 80066e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <XMC_ERU_ETL_SetInput>:
/* Configures the event source for path A and path B, with selected input_a and input_b respectively.*/
void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
                          const uint8_t channel,
                          const XMC_ERU_ETL_INPUT_A_t input_a,
                          const XMC_ERU_ETL_INPUT_B_t input_b)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	461a      	mov	r2, r3
 80066fc:	4603      	mov	r3, r0
 80066fe:	70fb      	strb	r3, [r7, #3]
 8006700:	460b      	mov	r3, r1
 8006702:	70bb      	strb	r3, [r7, #2]
 8006704:	4613      	mov	r3, r2
 8006706:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));

  eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	210f      	movs	r1, #15
 8006712:	fa01 f303 	lsl.w	r3, r1, r3
 8006716:	43db      	mvns	r3, r3
 8006718:	401a      	ands	r2, r3
                (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel * ERU_EXISEL_BITSIZE));
 800671a:	78bb      	ldrb	r3, [r7, #2]
 800671c:	7879      	ldrb	r1, [r7, #1]
 800671e:	0089      	lsls	r1, r1, #2
 8006720:	4319      	orrs	r1, r3
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
  eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <XMC_ERU_ETL_SetSource>:
/* Select input path combination along with polarity for event generation by setting (SS, NA, NB) bits of 
   EXICONx(x = [0 to 3]) register */
void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
                          const uint8_t channel,
                          const XMC_ERU_ETL_SOURCE_t source)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
 8006748:	4613      	mov	r3, r2
 800674a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));

  eru->EXICON_b[channel].SS = (uint8_t)source;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	78ba      	ldrb	r2, [r7, #2]
 8006750:	f002 020f 	and.w	r2, r2, #15
 8006754:	b2d0      	uxtb	r0, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	1d19      	adds	r1, r3, #4
 800675a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800675e:	f360 230b 	bfi	r3, r0, #8, #4
 8006762:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <XMC_ERU_ETL_SetEdgeDetection>:

/* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
                                  const uint8_t channel,
                                  const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
 800677e:	4613      	mov	r3, r2
 8006780:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge_detection));

  eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	78ba      	ldrb	r2, [r7, #2]
 8006786:	f002 0203 	and.w	r2, r2, #3
 800678a:	b2d0      	uxtb	r0, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	1d19      	adds	r1, r3, #4
 8006790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006794:	f360 0383 	bfi	r3, r0, #2, #2
 8006798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <XMC_ERU_ETL_GetEdgeDetection>:

/* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) register. */
XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t channel)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
  return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3204      	adds	r2, #4
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80067c2:	b2db      	uxtb	r3, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <XMC_ERU_ETL_SetStatusFlagMode>:

/* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
                                   const uint8_t channel,
                                   const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
 80067dc:	4613      	mov	r3, r2
 80067de:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode));

  eru->EXICON_b[channel].LD = (uint8_t)mode;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	78ba      	ldrb	r2, [r7, #2]
 80067e4:	f002 0201 	and.w	r2, r2, #1
 80067e8:	b2d0      	uxtb	r0, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	1d19      	adds	r1, r3, #4
 80067ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067f2:	f360 0341 	bfi	r3, r0, #1, #1
 80067f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <XMC_ERU_ETL_EnableOutputTrigger>:
/* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pulse generated by 
 * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
                                     const uint8_t channel,
                                     const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
 8006812:	4613      	mov	r3, r2
 8006814:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(trigger));

  eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	78ba      	ldrb	r2, [r7, #2]
 800681a:	f002 0207 	and.w	r2, r2, #7
 800681e:	b2d0      	uxtb	r0, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	1d19      	adds	r1, r3, #4
 8006824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006828:	f360 1306 	bfi	r3, r0, #4, #3
 800682c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  eru->EXICON_b[channel].PE = (uint8_t)true;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	1d19      	adds	r1, r3, #4
 8006836:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <XMC_ERU_ETL_DisableOutputTrigger>:

/* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));

  eru->EXICON_b[channel].PE = false;
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	1d19      	adds	r1, r3, #4
 8006860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006864:	f36f 0300 	bfc	r3, #0, #1
 8006868:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <XMC_ERU_OGU_EnablePatternDetection>:

/* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and GEEN bits. */
void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
                                        const uint8_t channel,
                                        const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
 8006884:	4613      	mov	r3, r2
 8006886:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_INPUT(input));

  eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	78ba      	ldrb	r2, [r7, #2]
 800688c:	f002 020f 	and.w	r2, r2, #15
 8006890:	b2d0      	uxtb	r0, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	f103 0108 	add.w	r1, r3, #8
 8006898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800689c:	f360 330f 	bfi	r3, r0, #12, #4
 80068a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  eru->EXOCON_b[channel].GEEN = true;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	f103 0108 	add.w	r1, r3, #8
 80068ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068b0:	f043 0304 	orr.w	r3, r3, #4
 80068b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <XMC_ERU_OGU_DisablePatternDetection>:

/* Disable the pattern detection by clearing (GEEN) bit. */
void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));

  eru->EXOCON_b[channel].GEEN = false;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	f103 0108 	add.w	r1, r3, #8
 80068d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068dc:	f36f 0382 	bfc	r3, #2, #1
 80068e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <XMC_ERU_OGU_EnablePeripheralTrigger>:

/* Configures peripheral trigger input, by setting (ISS) bit. */
void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
                                         const uint8_t channel,
                                         const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
 80068fc:	4613      	mov	r3, r2
 80068fe:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
              XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));

  eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	78ba      	ldrb	r2, [r7, #2]
 8006904:	f002 0203 	and.w	r2, r2, #3
 8006908:	b2d0      	uxtb	r0, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	f103 0108 	add.w	r1, r3, #8
 8006910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006914:	f360 0301 	bfi	r3, r0, #0, #2
 8006918:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <XMC_ERU_OGU_DisablePeripheralTrigger>:

/* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
                                          const uint8_t channel)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));

  eru->EXOCON_b[channel].ISS = (uint8_t)0;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	f103 0108 	add.w	r1, r3, #8
 800693c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006940:	f36f 0301 	bfc	r3, #0, #2
 8006944:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
 8006960:	4613      	mov	r3, r2
 8006962:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	78ba      	ldrb	r2, [r7, #2]
 8006968:	f002 0203 	and.w	r2, r2, #3
 800696c:	b2d0      	uxtb	r0, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	f103 0108 	add.w	r1, r3, #8
 8006974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006978:	f360 1305 	bfi	r3, r0, #4, #2
 800697c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a05      	ldr	r2, [pc, #20]	; (80069ac <XMC_ERU_Enable+0x20>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 800699c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80069a0:	f7fe faaa 	bl	8004ef8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40044000 	.word	0x40044000

080069b0 <XMC_ERU_Disable>:

/* Disable the clock and Reset the ERU module. */
void XMC_ERU_Disable(XMC_ERU_t *const eru)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <XMC_ERU_Disable+0x20>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <XMC_ERU_Disable+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80069c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80069c4:	f7fe fa7a 	bl	8004ebc <XMC_SCU_RESET_AssertPeripheralReset>
    #endif
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40044000 	.word	0x40044000

080069d4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
 80069e0:	4613      	mov	r3, r2
 80069e2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3204      	adds	r2, #4
 80069f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	21f8      	movs	r1, #248	; 0xf8
 80069fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006a02:	43db      	mvns	r3, r3
 8006a04:	78f9      	ldrb	r1, [r7, #3]
 8006a06:	0889      	lsrs	r1, r1, #2
 8006a08:	b2c9      	uxtb	r1, r1
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	ea02 0103 	and.w	r1, r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	1d02      	adds	r2, r0, #4
 8006a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	089b      	lsrs	r3, r3, #2
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3204      	adds	r2, #4
 8006a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a28:	78b9      	ldrb	r1, [r7, #2]
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	fa01 f303 	lsl.w	r3, r1, r3
 8006a36:	78f9      	ldrb	r1, [r7, #3]
 8006a38:	0889      	lsrs	r1, r1, #2
 8006a3a:	b2c9      	uxtb	r1, r1
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	ea42 0103 	orr.w	r1, r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1d02      	adds	r2, r0, #4
 8006a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
 8006a62:	4613      	mov	r3, r2
 8006a64:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	2103      	movs	r1, #3
 8006a70:	fa01 f303 	lsl.w	r3, r1, r3
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006a80:	78b9      	ldrb	r1, [r7, #2]
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	089b      	lsrs	r3, r3, #2
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3204      	adds	r2, #4
 8006ab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	21f8      	movs	r1, #248	; 0xf8
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	7af9      	ldrb	r1, [r7, #11]
 8006acc:	0889      	lsrs	r1, r1, #2
 8006ace:	b2c9      	uxtb	r1, r1
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	ea02 0103 	and.w	r1, r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1d02      	adds	r2, r0, #4
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	401a      	ands	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <XMC_GPIO_Init+0x13c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <XMC_GPIO_Init+0x68>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a37      	ldr	r2, [pc, #220]	; (8006bdc <XMC_GPIO_Init+0x140>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10a      	bne.n	8006b1a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	401a      	ands	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60
 8006b18:	e03c      	b.n	8006b94 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	409a      	lsls	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	08db      	lsrs	r3, r3, #3
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3210      	adds	r2, #16
 8006b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	2107      	movs	r1, #7
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	7af9      	ldrb	r1, [r7, #11]
 8006b48:	08c9      	lsrs	r1, r1, #3
 8006b4a:	b2c9      	uxtb	r1, r1
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	ea02 0103 	and.w	r1, r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f100 0210 	add.w	r2, r0, #16
 8006b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	08db      	lsrs	r3, r3, #3
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3210      	adds	r2, #16
 8006b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7a1b      	ldrb	r3, [r3, #8]
 8006b70:	4619      	mov	r1, r3
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	7af9      	ldrb	r1, [r7, #11]
 8006b80:	08c9      	lsrs	r1, r1, #3
 8006b82:	b2c9      	uxtb	r1, r1
 8006b84:	4608      	mov	r0, r1
 8006b86:	ea42 0103 	orr.w	r1, r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f100 0210 	add.w	r2, r0, #16
 8006b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3204      	adds	r2, #4
 8006ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb6:	7af9      	ldrb	r1, [r7, #11]
 8006bb8:	0889      	lsrs	r1, r1, #2
 8006bba:	b2c9      	uxtb	r1, r1
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	ea42 0103 	orr.w	r1, r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1d02      	adds	r2, r0, #4
 8006bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	48028e00 	.word	0x48028e00
 8006bdc:	48028f00 	.word	0x48028f00

08006be0 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
 8006bec:	4613      	mov	r3, r2
 8006bee:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	08db      	lsrs	r3, r3, #3
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3210      	adds	r2, #16
 8006bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	2107      	movs	r1, #7
 8006c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	78f9      	ldrb	r1, [r7, #3]
 8006c12:	08c9      	lsrs	r1, r1, #3
 8006c14:	b2c9      	uxtb	r1, r1
 8006c16:	4608      	mov	r0, r1
 8006c18:	ea02 0103 	and.w	r1, r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f100 0210 	add.w	r2, r0, #16
 8006c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3210      	adds	r2, #16
 8006c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c36:	78b9      	ldrb	r1, [r7, #2]
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	fa01 f303 	lsl.w	r3, r1, r3
 8006c44:	78f9      	ldrb	r1, [r7, #3]
 8006c46:	08c9      	lsrs	r1, r1, #3
 8006c48:	b2c9      	uxtb	r1, r1
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	ea42 0103 	orr.w	r1, r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f100 0210 	add.w	r2, r0, #16
 8006c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e003      	b.n	8006c7c <delay+0x16>
  {
    __NOP();
 8006c74:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d8f7      	bhi.n	8006c74 <delay+0xe>
  }
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8006c90:	b598      	push	{r3, r4, r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8006c94:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <SystemInit+0x20>)
 8006c96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8006ca2:	f000 f807 	bl	8006cb4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8006ca6:	f7fa f82d 	bl	8000d04 <SystemCoreClockSetup>
}
 8006caa:	bf00      	nop
 8006cac:	bd98      	pop	{r3, r4, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000ffc4 	.word	0x2000ffc4

08006cb4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006cba:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8006cbc:	4b16      	ldr	r3, [pc, #88]	; (8006d18 <SystemCoreSetup+0x64>)
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <SystemCoreSetup+0x68>)
 8006cc0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8006cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8006cc6:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8006cc8:	4b13      	ldr	r3, [pc, #76]	; (8006d18 <SystemCoreSetup+0x64>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cce:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <SystemCoreSetup+0x64>)
 8006cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <SystemCoreSetup+0x64>)
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	4a0e      	ldr	r2, [pc, #56]	; (8006d18 <SystemCoreSetup+0x64>)
 8006cde:	f023 0308 	bic.w	r3, r3, #8
 8006ce2:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <SystemCoreSetup+0x6c>)
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cea:	3314      	adds	r3, #20
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f023 030f 	bic.w	r3, r3, #15
 8006cf6:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f043 0303 	orr.w	r3, r3, #3
 8006cfe:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <SystemCoreSetup+0x6c>)
 8006d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d06:	3314      	adds	r3, #20
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000ed00 	.word	0xe000ed00
 8006d1c:	08000000 	.word	0x08000000
 8006d20:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006d28:	4b75      	ldr	r3, [pc, #468]	; (8006f00 <SystemCoreSetup+0x24c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8006d34:	4b72      	ldr	r3, [pc, #456]	; (8006f00 <SystemCoreSetup+0x24c>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a71      	ldr	r2, [pc, #452]	; (8006f00 <SystemCoreSetup+0x24c>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006d40:	bf00      	nop
 8006d42:	4b6f      	ldr	r3, [pc, #444]	; (8006f00 <SystemCoreSetup+0x24c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f9      	beq.n	8006d42 <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006d4e:	4b6d      	ldr	r3, [pc, #436]	; (8006f04 <SystemCoreSetup+0x250>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8006d5a:	4b6a      	ldr	r3, [pc, #424]	; (8006f04 <SystemCoreSetup+0x250>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4a69      	ldr	r2, [pc, #420]	; (8006f04 <SystemCoreSetup+0x250>)
 8006d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d64:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8006d66:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8006d6a:	f7ff ff7c 	bl	8006c66 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8006d6e:	4b66      	ldr	r3, [pc, #408]	; (8006f08 <SystemCoreSetup+0x254>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4a65      	ldr	r2, [pc, #404]	; (8006f08 <SystemCoreSetup+0x254>)
 8006d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d78:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8006d7a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006d7e:	f7ff ff72 	bl	8006c66 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006d82:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <SystemCoreSetup+0x254>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4a60      	ldr	r2, [pc, #384]	; (8006f08 <SystemCoreSetup+0x254>)
 8006d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8c:	f023 0302 	bic.w	r3, r3, #2
 8006d90:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8006d92:	4b5e      	ldr	r3, [pc, #376]	; (8006f0c <SystemCoreSetup+0x258>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d029      	beq.n	8006df2 <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8006d9e:	4b5b      	ldr	r3, [pc, #364]	; (8006f0c <SystemCoreSetup+0x258>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4a5a      	ldr	r2, [pc, #360]	; (8006f0c <SystemCoreSetup+0x258>)
 8006da4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006da8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006dac:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8006dae:	f000 f927 	bl	8007000 <OSCHP_GetFrequency>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <SystemCoreSetup+0x25c>)
 8006db6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dba:	0d1b      	lsrs	r3, r3, #20
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	041a      	lsls	r2, r3, #16
 8006dc0:	4b52      	ldr	r3, [pc, #328]	; (8006f0c <SystemCoreSetup+0x258>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4951      	ldr	r1, [pc, #324]	; (8006f0c <SystemCoreSetup+0x258>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8006dca:	4b4f      	ldr	r3, [pc, #316]	; (8006f08 <SystemCoreSetup+0x254>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	4a4e      	ldr	r2, [pc, #312]	; (8006f08 <SystemCoreSetup+0x254>)
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006dd6:	4b4c      	ldr	r3, [pc, #304]	; (8006f08 <SystemCoreSetup+0x254>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4a4b      	ldr	r2, [pc, #300]	; (8006f08 <SystemCoreSetup+0x254>)
 8006ddc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006de0:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8006de2:	bf00      	nop
 8006de4:	4b48      	ldr	r3, [pc, #288]	; (8006f08 <SystemCoreSetup+0x254>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006dec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006df0:	d1f8      	bne.n	8006de4 <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006df2:	4b45      	ldr	r3, [pc, #276]	; (8006f08 <SystemCoreSetup+0x254>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4a44      	ldr	r2, [pc, #272]	; (8006f08 <SystemCoreSetup+0x254>)
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4a41      	ldr	r2, [pc, #260]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e04:	f043 0310 	orr.w	r3, r3, #16
 8006e08:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e0a:	4b3f      	ldr	r3, [pc, #252]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e0c:	4a41      	ldr	r2, [pc, #260]	; (8006f14 <SystemCoreSetup+0x260>)
 8006e0e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006e10:	4b3d      	ldr	r3, [pc, #244]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a3c      	ldr	r2, [pc, #240]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006e1c:	4b3a      	ldr	r3, [pc, #232]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4a39      	ldr	r2, [pc, #228]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8006e28:	4b37      	ldr	r3, [pc, #220]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a36      	ldr	r2, [pc, #216]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e32:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006e34:	bf00      	nop
 8006e36:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f9      	beq.n	8006e36 <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006e4e:	bf00      	nop
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f9      	bne.n	8006e50 <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8006e5c:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e66:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8006e68:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8006e6e:	4b2a      	ldr	r3, [pc, #168]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8006e74:	4b28      	ldr	r3, [pc, #160]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8006e7a:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8006e80:	4b25      	ldr	r3, [pc, #148]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8006e86:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <SystemCoreSetup+0x264>)
 8006e88:	2203      	movs	r2, #3
 8006e8a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006e8c:	4b1e      	ldr	r3, [pc, #120]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4a1d      	ldr	r2, [pc, #116]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e96:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e98:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <SystemCoreSetup+0x254>)
 8006e9a:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <SystemCoreSetup+0x268>)
 8006e9c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8006e9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006ea2:	f7ff fee0 	bl	8006c66 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006ea6:	bf00      	nop
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <SystemCoreSetup+0x254>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f9      	beq.n	8006ea8 <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006eb4:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <SystemCoreSetup+0x254>)
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <SystemCoreSetup+0x26c>)
 8006eb8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8006eba:	f241 1094 	movw	r0, #4500	; 0x1194
 8006ebe:	f7ff fed2 	bl	8006c66 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006ec2:	bf00      	nop
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <SystemCoreSetup+0x254>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f9      	beq.n	8006ec4 <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <SystemCoreSetup+0x254>)
 8006ed2:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <SystemCoreSetup+0x270>)
 8006ed4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8006ed6:	f241 7070 	movw	r0, #6000	; 0x1770
 8006eda:	f7ff fec4 	bl	8006c66 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006ede:	bf00      	nop
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <SystemCoreSetup+0x254>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0f9      	beq.n	8006ee0 <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <SystemCoreSetup+0x274>)
 8006eee:	2205      	movs	r2, #5
 8006ef0:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <SystemCoreSetup+0x264>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006ef8:	f000 f818 	bl	8006f2c <SystemCoreClockUpdate>
}
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	50004200 	.word	0x50004200
 8006f04:	50004400 	.word	0x50004400
 8006f08:	50004710 	.word	0x50004710
 8006f0c:	50004700 	.word	0x50004700
 8006f10:	6b5fca6b 	.word	0x6b5fca6b
 8006f14:	01134f00 	.word	0x01134f00
 8006f18:	50004600 	.word	0x50004600
 8006f1c:	01074f00 	.word	0x01074f00
 8006f20:	01044f00 	.word	0x01044f00
 8006f24:	01034f00 	.word	0x01034f00
 8006f28:	50004160 	.word	0x50004160

08006f2c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <SystemCoreClockUpdate+0xc4>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d03e      	beq.n	8006fbc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8006f3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8006f4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ff8 <SystemCoreClockUpdate+0xcc>)
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e002      	b.n	8006f56 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8006f50:	f000 f856 	bl	8007000 <OSCHP_GetFrequency>
 8006f54:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8006f56:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d020      	beq.n	8006fa4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	0e1b      	lsrs	r3, r3, #24
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	0c1b      	lsrs	r3, r3, #16
 8006f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e00d      	b.n	8006fc0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <SystemCoreClockUpdate+0xc8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fac:	3301      	adds	r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e001      	b.n	8006fc0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <SystemCoreClockUpdate+0xcc>)
 8006fbe:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <SystemCoreClockUpdate+0xc4>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <SystemCoreClockUpdate+0xc4>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	3301      	adds	r3, #1
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8006fe2:	4a06      	ldr	r2, [pc, #24]	; (8006ffc <SystemCoreClockUpdate+0xd0>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6013      	str	r3, [r2, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	50004600 	.word	0x50004600
 8006ff4:	50004710 	.word	0x50004710
 8006ff8:	016e3600 	.word	0x016e3600
 8006ffc:	2000ffc0 	.word	0x2000ffc0

08007000 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8007004:	4b02      	ldr	r3, [pc, #8]	; (8007010 <OSCHP_GetFrequency+0x10>)
}
 8007006:	4618      	mov	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	00b71b00 	.word	0x00b71b00

08007014 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <_sbrk+0x5c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8007024:	4b12      	ldr	r3, [pc, #72]	; (8007070 <_sbrk+0x5c>)
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <_sbrk+0x60>)
 8007028:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <_sbrk+0x5c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3303      	adds	r3, #3
 8007034:	f023 0303 	bic.w	r3, r3, #3
 8007038:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <_sbrk+0x5c>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	4a0d      	ldr	r2, [pc, #52]	; (8007078 <_sbrk+0x64>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d207      	bcs.n	8007058 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8007048:	4b09      	ldr	r3, [pc, #36]	; (8007070 <_sbrk+0x5c>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	4a07      	ldr	r2, [pc, #28]	; (8007070 <_sbrk+0x5c>)
 8007052:	6013      	str	r3, [r2, #0]
    return (base);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	e006      	b.n	8007066 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8007058:	f000 f818 	bl	800708c <__errno>
 800705c:	4602      	mov	r2, r0
 800705e:	230c      	movs	r3, #12
 8007060:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000a30 	.word	0x20000a30
 8007074:	20001190 	.word	0x20001190
 8007078:	2000ffc0 	.word	0x2000ffc0

0800707c <_init>:

/* Init */
void _init(void)
{}
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
 8007080:	bf00      	nop
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	; (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000030 	.word	0x20000030

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0d      	ldr	r6, [pc, #52]	; (80070d0 <__libc_init_array+0x38>)
 800709c:	4d0d      	ldr	r5, [pc, #52]	; (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b76      	subs	r6, r6, r5
 80070a0:	10b6      	asrs	r6, r6, #2
 80070a2:	d006      	beq.n	80070b2 <__libc_init_array+0x1a>
 80070a4:	2400      	movs	r4, #0
 80070a6:	3401      	adds	r4, #1
 80070a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ac:	4798      	blx	r3
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d1f9      	bne.n	80070a6 <__libc_init_array+0xe>
 80070b2:	4e09      	ldr	r6, [pc, #36]	; (80070d8 <__libc_init_array+0x40>)
 80070b4:	4d09      	ldr	r5, [pc, #36]	; (80070dc <__libc_init_array+0x44>)
 80070b6:	1b76      	subs	r6, r6, r5
 80070b8:	f7ff ffe0 	bl	800707c <_init>
 80070bc:	10b6      	asrs	r6, r6, #2
 80070be:	d006      	beq.n	80070ce <__libc_init_array+0x36>
 80070c0:	2400      	movs	r4, #0
 80070c2:	3401      	adds	r4, #1
 80070c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c8:	4798      	blx	r3
 80070ca:	42a6      	cmp	r6, r4
 80070cc:	d1f9      	bne.n	80070c2 <__libc_init_array+0x2a>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	200009dc 	.word	0x200009dc
 80070d4:	200009dc 	.word	0x200009dc
 80070d8:	200009dc 	.word	0x200009dc
 80070dc:	200009dc 	.word	0x200009dc

080070e0 <memcpy>:
 80070e0:	4684      	mov	ip, r0
 80070e2:	ea41 0300 	orr.w	r3, r1, r0
 80070e6:	f013 0303 	ands.w	r3, r3, #3
 80070ea:	d16d      	bne.n	80071c8 <memcpy+0xe8>
 80070ec:	3a40      	subs	r2, #64	; 0x40
 80070ee:	d341      	bcc.n	8007174 <memcpy+0x94>
 80070f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80070f4:	f840 3b04 	str.w	r3, [r0], #4
 80070f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80070fc:	f840 3b04 	str.w	r3, [r0], #4
 8007100:	f851 3b04 	ldr.w	r3, [r1], #4
 8007104:	f840 3b04 	str.w	r3, [r0], #4
 8007108:	f851 3b04 	ldr.w	r3, [r1], #4
 800710c:	f840 3b04 	str.w	r3, [r0], #4
 8007110:	f851 3b04 	ldr.w	r3, [r1], #4
 8007114:	f840 3b04 	str.w	r3, [r0], #4
 8007118:	f851 3b04 	ldr.w	r3, [r1], #4
 800711c:	f840 3b04 	str.w	r3, [r0], #4
 8007120:	f851 3b04 	ldr.w	r3, [r1], #4
 8007124:	f840 3b04 	str.w	r3, [r0], #4
 8007128:	f851 3b04 	ldr.w	r3, [r1], #4
 800712c:	f840 3b04 	str.w	r3, [r0], #4
 8007130:	f851 3b04 	ldr.w	r3, [r1], #4
 8007134:	f840 3b04 	str.w	r3, [r0], #4
 8007138:	f851 3b04 	ldr.w	r3, [r1], #4
 800713c:	f840 3b04 	str.w	r3, [r0], #4
 8007140:	f851 3b04 	ldr.w	r3, [r1], #4
 8007144:	f840 3b04 	str.w	r3, [r0], #4
 8007148:	f851 3b04 	ldr.w	r3, [r1], #4
 800714c:	f840 3b04 	str.w	r3, [r0], #4
 8007150:	f851 3b04 	ldr.w	r3, [r1], #4
 8007154:	f840 3b04 	str.w	r3, [r0], #4
 8007158:	f851 3b04 	ldr.w	r3, [r1], #4
 800715c:	f840 3b04 	str.w	r3, [r0], #4
 8007160:	f851 3b04 	ldr.w	r3, [r1], #4
 8007164:	f840 3b04 	str.w	r3, [r0], #4
 8007168:	f851 3b04 	ldr.w	r3, [r1], #4
 800716c:	f840 3b04 	str.w	r3, [r0], #4
 8007170:	3a40      	subs	r2, #64	; 0x40
 8007172:	d2bd      	bcs.n	80070f0 <memcpy+0x10>
 8007174:	3230      	adds	r2, #48	; 0x30
 8007176:	d311      	bcc.n	800719c <memcpy+0xbc>
 8007178:	f851 3b04 	ldr.w	r3, [r1], #4
 800717c:	f840 3b04 	str.w	r3, [r0], #4
 8007180:	f851 3b04 	ldr.w	r3, [r1], #4
 8007184:	f840 3b04 	str.w	r3, [r0], #4
 8007188:	f851 3b04 	ldr.w	r3, [r1], #4
 800718c:	f840 3b04 	str.w	r3, [r0], #4
 8007190:	f851 3b04 	ldr.w	r3, [r1], #4
 8007194:	f840 3b04 	str.w	r3, [r0], #4
 8007198:	3a10      	subs	r2, #16
 800719a:	d2ed      	bcs.n	8007178 <memcpy+0x98>
 800719c:	320c      	adds	r2, #12
 800719e:	d305      	bcc.n	80071ac <memcpy+0xcc>
 80071a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071a4:	f840 3b04 	str.w	r3, [r0], #4
 80071a8:	3a04      	subs	r2, #4
 80071aa:	d2f9      	bcs.n	80071a0 <memcpy+0xc0>
 80071ac:	3204      	adds	r2, #4
 80071ae:	d008      	beq.n	80071c2 <memcpy+0xe2>
 80071b0:	07d2      	lsls	r2, r2, #31
 80071b2:	bf1c      	itt	ne
 80071b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80071b8:	f800 3b01 	strbne.w	r3, [r0], #1
 80071bc:	d301      	bcc.n	80071c2 <memcpy+0xe2>
 80071be:	880b      	ldrh	r3, [r1, #0]
 80071c0:	8003      	strh	r3, [r0, #0]
 80071c2:	4660      	mov	r0, ip
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	2a08      	cmp	r2, #8
 80071ca:	d313      	bcc.n	80071f4 <memcpy+0x114>
 80071cc:	078b      	lsls	r3, r1, #30
 80071ce:	d08d      	beq.n	80070ec <memcpy+0xc>
 80071d0:	f010 0303 	ands.w	r3, r0, #3
 80071d4:	d08a      	beq.n	80070ec <memcpy+0xc>
 80071d6:	f1c3 0304 	rsb	r3, r3, #4
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	bf1c      	itt	ne
 80071e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80071e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80071e8:	d380      	bcc.n	80070ec <memcpy+0xc>
 80071ea:	f831 3b02 	ldrh.w	r3, [r1], #2
 80071ee:	f820 3b02 	strh.w	r3, [r0], #2
 80071f2:	e77b      	b.n	80070ec <memcpy+0xc>
 80071f4:	3a04      	subs	r2, #4
 80071f6:	d3d9      	bcc.n	80071ac <memcpy+0xcc>
 80071f8:	3a01      	subs	r2, #1
 80071fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fe:	f800 3b01 	strb.w	r3, [r0], #1
 8007202:	d2f9      	bcs.n	80071f8 <memcpy+0x118>
 8007204:	780b      	ldrb	r3, [r1, #0]
 8007206:	7003      	strb	r3, [r0, #0]
 8007208:	784b      	ldrb	r3, [r1, #1]
 800720a:	7043      	strb	r3, [r0, #1]
 800720c:	788b      	ldrb	r3, [r1, #2]
 800720e:	7083      	strb	r3, [r0, #2]
 8007210:	4660      	mov	r0, ip
 8007212:	4770      	bx	lr

08007214 <memset>:
 8007214:	b4f0      	push	{r4, r5, r6, r7}
 8007216:	0786      	lsls	r6, r0, #30
 8007218:	d043      	beq.n	80072a2 <memset+0x8e>
 800721a:	1e54      	subs	r4, r2, #1
 800721c:	2a00      	cmp	r2, #0
 800721e:	d03e      	beq.n	800729e <memset+0x8a>
 8007220:	b2ca      	uxtb	r2, r1
 8007222:	4603      	mov	r3, r0
 8007224:	e002      	b.n	800722c <memset+0x18>
 8007226:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800722a:	d338      	bcc.n	800729e <memset+0x8a>
 800722c:	f803 2b01 	strb.w	r2, [r3], #1
 8007230:	079d      	lsls	r5, r3, #30
 8007232:	d1f8      	bne.n	8007226 <memset+0x12>
 8007234:	2c03      	cmp	r4, #3
 8007236:	d92b      	bls.n	8007290 <memset+0x7c>
 8007238:	b2cd      	uxtb	r5, r1
 800723a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800723e:	2c0f      	cmp	r4, #15
 8007240:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007244:	d916      	bls.n	8007274 <memset+0x60>
 8007246:	f1a4 0710 	sub.w	r7, r4, #16
 800724a:	093f      	lsrs	r7, r7, #4
 800724c:	f103 0620 	add.w	r6, r3, #32
 8007250:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007254:	f103 0210 	add.w	r2, r3, #16
 8007258:	e942 5504 	strd	r5, r5, [r2, #-16]
 800725c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007260:	3210      	adds	r2, #16
 8007262:	42b2      	cmp	r2, r6
 8007264:	d1f8      	bne.n	8007258 <memset+0x44>
 8007266:	f004 040f 	and.w	r4, r4, #15
 800726a:	3701      	adds	r7, #1
 800726c:	2c03      	cmp	r4, #3
 800726e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007272:	d90d      	bls.n	8007290 <memset+0x7c>
 8007274:	461e      	mov	r6, r3
 8007276:	4622      	mov	r2, r4
 8007278:	3a04      	subs	r2, #4
 800727a:	2a03      	cmp	r2, #3
 800727c:	f846 5b04 	str.w	r5, [r6], #4
 8007280:	d8fa      	bhi.n	8007278 <memset+0x64>
 8007282:	1f22      	subs	r2, r4, #4
 8007284:	f022 0203 	bic.w	r2, r2, #3
 8007288:	3204      	adds	r2, #4
 800728a:	4413      	add	r3, r2
 800728c:	f004 0403 	and.w	r4, r4, #3
 8007290:	b12c      	cbz	r4, 800729e <memset+0x8a>
 8007292:	b2c9      	uxtb	r1, r1
 8007294:	441c      	add	r4, r3
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	429c      	cmp	r4, r3
 800729c:	d1fb      	bne.n	8007296 <memset+0x82>
 800729e:	bcf0      	pop	{r4, r5, r6, r7}
 80072a0:	4770      	bx	lr
 80072a2:	4614      	mov	r4, r2
 80072a4:	4603      	mov	r3, r0
 80072a6:	e7c5      	b.n	8007234 <memset+0x20>

080072a8 <_printf_r>:
 80072a8:	b40e      	push	{r1, r2, r3}
 80072aa:	b500      	push	{lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	6881      	ldr	r1, [r0, #8]
 80072b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f000 f890 	bl	80073dc <_vfprintf_r>
 80072bc:	b002      	add	sp, #8
 80072be:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c2:	b003      	add	sp, #12
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop

080072c8 <printf>:
 80072c8:	b40f      	push	{r0, r1, r2, r3}
 80072ca:	b500      	push	{lr}
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <printf+0x24>)
 80072ce:	b083      	sub	sp, #12
 80072d0:	ab04      	add	r3, sp, #16
 80072d2:	6808      	ldr	r0, [r1, #0]
 80072d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d8:	6881      	ldr	r1, [r0, #8]
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	f000 f87e 	bl	80073dc <_vfprintf_r>
 80072e0:	b003      	add	sp, #12
 80072e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e6:	b004      	add	sp, #16
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000030 	.word	0x20000030
	...

08007300 <strlen>:
 8007300:	f890 f000 	pld	[r0]
 8007304:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8007308:	f020 0107 	bic.w	r1, r0, #7
 800730c:	f06f 0c00 	mvn.w	ip, #0
 8007310:	f010 0407 	ands.w	r4, r0, #7
 8007314:	f891 f020 	pld	[r1, #32]
 8007318:	f040 8049 	bne.w	80073ae <strlen+0xae>
 800731c:	f04f 0400 	mov.w	r4, #0
 8007320:	f06f 0007 	mvn.w	r0, #7
 8007324:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007328:	f891 f040 	pld	[r1, #64]	; 0x40
 800732c:	f100 0008 	add.w	r0, r0, #8
 8007330:	fa82 f24c 	uadd8	r2, r2, ip
 8007334:	faa4 f28c 	sel	r2, r4, ip
 8007338:	fa83 f34c 	uadd8	r3, r3, ip
 800733c:	faa2 f38c 	sel	r3, r2, ip
 8007340:	bb4b      	cbnz	r3, 8007396 <strlen+0x96>
 8007342:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8007346:	fa82 f24c 	uadd8	r2, r2, ip
 800734a:	f100 0008 	add.w	r0, r0, #8
 800734e:	faa4 f28c 	sel	r2, r4, ip
 8007352:	fa83 f34c 	uadd8	r3, r3, ip
 8007356:	faa2 f38c 	sel	r3, r2, ip
 800735a:	b9e3      	cbnz	r3, 8007396 <strlen+0x96>
 800735c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8007360:	fa82 f24c 	uadd8	r2, r2, ip
 8007364:	f100 0008 	add.w	r0, r0, #8
 8007368:	faa4 f28c 	sel	r2, r4, ip
 800736c:	fa83 f34c 	uadd8	r3, r3, ip
 8007370:	faa2 f38c 	sel	r3, r2, ip
 8007374:	b97b      	cbnz	r3, 8007396 <strlen+0x96>
 8007376:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800737a:	f101 0120 	add.w	r1, r1, #32
 800737e:	fa82 f24c 	uadd8	r2, r2, ip
 8007382:	f100 0008 	add.w	r0, r0, #8
 8007386:	faa4 f28c 	sel	r2, r4, ip
 800738a:	fa83 f34c 	uadd8	r3, r3, ip
 800738e:	faa2 f38c 	sel	r3, r2, ip
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0c6      	beq.n	8007324 <strlen+0x24>
 8007396:	2a00      	cmp	r2, #0
 8007398:	bf04      	itt	eq
 800739a:	3004      	addeq	r0, #4
 800739c:	461a      	moveq	r2, r3
 800739e:	ba12      	rev	r2, r2
 80073a0:	fab2 f282 	clz	r2, r2
 80073a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80073a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80073ac:	4770      	bx	lr
 80073ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80073b2:	f004 0503 	and.w	r5, r4, #3
 80073b6:	f1c4 0000 	rsb	r0, r4, #0
 80073ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80073be:	f014 0f04 	tst.w	r4, #4
 80073c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80073c6:	fa0c f505 	lsl.w	r5, ip, r5
 80073ca:	ea62 0205 	orn	r2, r2, r5
 80073ce:	bf1c      	itt	ne
 80073d0:	ea63 0305 	ornne	r3, r3, r5
 80073d4:	4662      	movne	r2, ip
 80073d6:	f04f 0400 	mov.w	r4, #0
 80073da:	e7a9      	b.n	8007330 <strlen+0x30>

080073dc <_vfprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	b0d9      	sub	sp, #356	; 0x164
 80073e2:	461c      	mov	r4, r3
 80073e4:	4689      	mov	r9, r1
 80073e6:	4617      	mov	r7, r2
 80073e8:	4605      	mov	r5, r0
 80073ea:	9007      	str	r0, [sp, #28]
 80073ec:	f003 f91c 	bl	800a628 <_localeconv_r>
 80073f0:	6803      	ldr	r3, [r0, #0]
 80073f2:	931c      	str	r3, [sp, #112]	; 0x70
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff83 	bl	8007300 <strlen>
 80073fa:	940c      	str	r4, [sp, #48]	; 0x30
 80073fc:	9018      	str	r0, [sp, #96]	; 0x60
 80073fe:	b11d      	cbz	r5, 8007408 <_vfprintf_r+0x2c>
 8007400:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8108 	beq.w	8007618 <_vfprintf_r+0x23c>
 8007408:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800740c:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
 8007410:	07c8      	lsls	r0, r1, #31
 8007412:	b293      	uxth	r3, r2
 8007414:	d402      	bmi.n	800741c <_vfprintf_r+0x40>
 8007416:	0599      	lsls	r1, r3, #22
 8007418:	f140 8120 	bpl.w	800765c <_vfprintf_r+0x280>
 800741c:	049e      	lsls	r6, r3, #18
 800741e:	d40a      	bmi.n	8007436 <_vfprintf_r+0x5a>
 8007420:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8007424:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8007428:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800742c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8007430:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8007434:	b29b      	uxth	r3, r3
 8007436:	071d      	lsls	r5, r3, #28
 8007438:	f140 80b3 	bpl.w	80075a2 <_vfprintf_r+0x1c6>
 800743c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007440:	2a00      	cmp	r2, #0
 8007442:	f000 80ae 	beq.w	80075a2 <_vfprintf_r+0x1c6>
 8007446:	f003 021a 	and.w	r2, r3, #26
 800744a:	2a0a      	cmp	r2, #10
 800744c:	f000 80ca 	beq.w	80075e4 <_vfprintf_r+0x208>
 8007450:	2300      	movs	r3, #0
 8007452:	4618      	mov	r0, r3
 8007454:	9314      	str	r3, [sp, #80]	; 0x50
 8007456:	9319      	str	r3, [sp, #100]	; 0x64
 8007458:	9317      	str	r3, [sp, #92]	; 0x5c
 800745a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 800745e:	931d      	str	r3, [sp, #116]	; 0x74
 8007460:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8007464:	9321      	str	r3, [sp, #132]	; 0x84
 8007466:	931e      	str	r3, [sp, #120]	; 0x78
 8007468:	9309      	str	r3, [sp, #36]	; 0x24
 800746a:	ab2f      	add	r3, sp, #188	; 0xbc
 800746c:	932c      	str	r3, [sp, #176]	; 0xb0
 800746e:	469b      	mov	fp, r3
 8007470:	783b      	ldrb	r3, [r7, #0]
 8007472:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8007476:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8254 	beq.w	8007928 <_vfprintf_r+0x54c>
 8007480:	2b25      	cmp	r3, #37	; 0x25
 8007482:	463c      	mov	r4, r7
 8007484:	d102      	bne.n	800748c <_vfprintf_r+0xb0>
 8007486:	e01d      	b.n	80074c4 <_vfprintf_r+0xe8>
 8007488:	2b25      	cmp	r3, #37	; 0x25
 800748a:	d003      	beq.n	8007494 <_vfprintf_r+0xb8>
 800748c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1f9      	bne.n	8007488 <_vfprintf_r+0xac>
 8007494:	1be5      	subs	r5, r4, r7
 8007496:	b18d      	cbz	r5, 80074bc <_vfprintf_r+0xe0>
 8007498:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 800749c:	3301      	adds	r3, #1
 800749e:	442a      	add	r2, r5
 80074a0:	2b07      	cmp	r3, #7
 80074a2:	f8cb 7000 	str.w	r7, [fp]
 80074a6:	f8cb 5004 	str.w	r5, [fp, #4]
 80074aa:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
 80074ae:	f300 80ca 	bgt.w	8007646 <_vfprintf_r+0x26a>
 80074b2:	f10b 0b08 	add.w	fp, fp, #8
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	442b      	add	r3, r5
 80074ba:	9309      	str	r3, [sp, #36]	; 0x24
 80074bc:	7823      	ldrb	r3, [r4, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8232 	beq.w	8007928 <_vfprintf_r+0x54c>
 80074c4:	2300      	movs	r3, #0
 80074c6:	7866      	ldrb	r6, [r4, #1]
 80074c8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ca:	4698      	mov	r8, r3
 80074cc:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 80074d0:	f104 0a01 	add.w	sl, r4, #1
 80074d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80074d8:	252b      	movs	r5, #43	; 0x2b
 80074da:	f10a 0a01 	add.w	sl, sl, #1
 80074de:	f1a6 0320 	sub.w	r3, r6, #32
 80074e2:	2b5a      	cmp	r3, #90	; 0x5a
 80074e4:	f200 841f 	bhi.w	8007d26 <_vfprintf_r+0x94a>
 80074e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074ec:	041d039f 	.word	0x041d039f
 80074f0:	0297041d 	.word	0x0297041d
 80074f4:	041d041d 	.word	0x041d041d
 80074f8:	02a2041d 	.word	0x02a2041d
 80074fc:	041d041d 	.word	0x041d041d
 8007500:	02cd02c1 	.word	0x02cd02c1
 8007504:	02d2041d 	.word	0x02d2041d
 8007508:	041d02d7 	.word	0x041d02d7
 800750c:	026802f1 	.word	0x026802f1
 8007510:	02680268 	.word	0x02680268
 8007514:	02680268 	.word	0x02680268
 8007518:	02680268 	.word	0x02680268
 800751c:	02680268 	.word	0x02680268
 8007520:	041d041d 	.word	0x041d041d
 8007524:	041d041d 	.word	0x041d041d
 8007528:	041d041d 	.word	0x041d041d
 800752c:	02f6041d 	.word	0x02f6041d
 8007530:	0333041d 	.word	0x0333041d
 8007534:	02f603e8 	.word	0x02f603e8
 8007538:	02f602f6 	.word	0x02f602f6
 800753c:	041d041d 	.word	0x041d041d
 8007540:	041d041d 	.word	0x041d041d
 8007544:	041d03e3 	.word	0x041d03e3
 8007548:	009a041d 	.word	0x009a041d
 800754c:	041d041d 	.word	0x041d041d
 8007550:	0347041d 	.word	0x0347041d
 8007554:	036e041d 	.word	0x036e041d
 8007558:	041d041d 	.word	0x041d041d
 800755c:	041d0385 	.word	0x041d0385
 8007560:	041d041d 	.word	0x041d041d
 8007564:	041d041d 	.word	0x041d041d
 8007568:	041d041d 	.word	0x041d041d
 800756c:	02f6041d 	.word	0x02f6041d
 8007570:	0333041d 	.word	0x0333041d
 8007574:	02f600c0 	.word	0x02f600c0
 8007578:	02f602f6 	.word	0x02f602f6
 800757c:	00c003c6 	.word	0x00c003c6
 8007580:	041d0070 	.word	0x041d0070
 8007584:	041d03aa 	.word	0x041d03aa
 8007588:	009c03b7 	.word	0x009c03b7
 800758c:	007003d3 	.word	0x007003d3
 8007590:	0347041d 	.word	0x0347041d
 8007594:	02270072 	.word	0x02270072
 8007598:	041d041d 	.word	0x041d041d
 800759c:	041d0277 	.word	0x041d0277
 80075a0:	0072      	.short	0x0072
 80075a2:	4649      	mov	r1, r9
 80075a4:	9807      	ldr	r0, [sp, #28]
 80075a6:	f001 fca7 	bl	8008ef8 <__swsetup_r>
 80075aa:	b1a0      	cbz	r0, 80075d6 <_vfprintf_r+0x1fa>
 80075ac:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80075b0:	07d8      	lsls	r0, r3, #31
 80075b2:	d404      	bmi.n	80075be <_vfprintf_r+0x1e2>
 80075b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80075b8:	0599      	lsls	r1, r3, #22
 80075ba:	f140 83ac 	bpl.w	8007d16 <_vfprintf_r+0x93a>
 80075be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
 80075c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c6:	b059      	add	sp, #356	; 0x164
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	f048 0820 	orr.w	r8, r8, #32
 80075d0:	f89a 6000 	ldrb.w	r6, [sl]
 80075d4:	e781      	b.n	80074da <_vfprintf_r+0xfe>
 80075d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80075da:	f003 021a 	and.w	r2, r3, #26
 80075de:	2a0a      	cmp	r2, #10
 80075e0:	f47f af36 	bne.w	8007450 <_vfprintf_r+0x74>
 80075e4:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	f6ff af31 	blt.w	8007450 <_vfprintf_r+0x74>
 80075ee:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80075f2:	07d2      	lsls	r2, r2, #31
 80075f4:	d405      	bmi.n	8007602 <_vfprintf_r+0x226>
 80075f6:	059b      	lsls	r3, r3, #22
 80075f8:	d403      	bmi.n	8007602 <_vfprintf_r+0x226>
 80075fa:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80075fe:	f003 f841 	bl	800a684 <__retarget_lock_release_recursive>
 8007602:	4623      	mov	r3, r4
 8007604:	463a      	mov	r2, r7
 8007606:	4649      	mov	r1, r9
 8007608:	9807      	ldr	r0, [sp, #28]
 800760a:	f001 fc33 	bl	8008e74 <__sbprintf>
 800760e:	9009      	str	r0, [sp, #36]	; 0x24
 8007610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007612:	b059      	add	sp, #356	; 0x164
 8007614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007618:	9807      	ldr	r0, [sp, #28]
 800761a:	f002 fdb5 	bl	800a188 <__sinit>
 800761e:	e6f3      	b.n	8007408 <_vfprintf_r+0x2c>
 8007620:	f048 0810 	orr.w	r8, r8, #16
 8007624:	f018 0f20 	tst.w	r8, #32
 8007628:	f000 8361 	beq.w	8007cee <_vfprintf_r+0x912>
 800762c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800762e:	3407      	adds	r4, #7
 8007630:	f024 0307 	bic.w	r3, r4, #7
 8007634:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007638:	f103 0208 	add.w	r2, r3, #8
 800763c:	920c      	str	r2, [sp, #48]	; 0x30
 800763e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8007642:	2200      	movs	r2, #0
 8007644:	e187      	b.n	8007956 <_vfprintf_r+0x57a>
 8007646:	aa2c      	add	r2, sp, #176	; 0xb0
 8007648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800764a:	9807      	ldr	r0, [sp, #28]
 800764c:	f004 f8f2 	bl	800b834 <__sprint_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	f041 8371 	bne.w	8008d38 <_vfprintf_r+0x195c>
 8007656:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 800765a:	e72c      	b.n	80074b6 <_vfprintf_r+0xda>
 800765c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007660:	f003 f808 	bl	800a674 <__retarget_lock_acquire_recursive>
 8007664:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
 8007668:	b293      	uxth	r3, r2
 800766a:	e6d7      	b.n	800741c <_vfprintf_r+0x40>
 800766c:	4643      	mov	r3, r8
 800766e:	069f      	lsls	r7, r3, #26
 8007670:	f140 8329 	bpl.w	8007cc6 <_vfprintf_r+0x8ea>
 8007674:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007676:	3407      	adds	r4, #7
 8007678:	f024 0407 	bic.w	r4, r4, #7
 800767c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007680:	f104 0208 	add.w	r2, r4, #8
 8007684:	920c      	str	r2, [sp, #48]	; 0x30
 8007686:	4604      	mov	r4, r0
 8007688:	460d      	mov	r5, r1
 800768a:	2800      	cmp	r0, #0
 800768c:	f171 0200 	sbcs.w	r2, r1, #0
 8007690:	da05      	bge.n	800769e <_vfprintf_r+0x2c2>
 8007692:	222d      	movs	r2, #45	; 0x2d
 8007694:	4264      	negs	r4, r4
 8007696:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800769a:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 800769e:	aa58      	add	r2, sp, #352	; 0x160
 80076a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80076a4:	9208      	str	r2, [sp, #32]
 80076a6:	f000 84af 	beq.w	8008008 <_vfprintf_r+0xc2c>
 80076aa:	2201      	movs	r2, #1
 80076ac:	ea54 0105 	orrs.w	r1, r4, r5
 80076b0:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 80076b4:	f040 8159 	bne.w	800796a <_vfprintf_r+0x58e>
 80076b8:	f1b9 0f00 	cmp.w	r9, #0
 80076bc:	f040 861a 	bne.w	80082f4 <_vfprintf_r+0xf18>
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	f040 8505 	bne.w	80080d0 <_vfprintf_r+0xcf4>
 80076c6:	f013 0301 	ands.w	r3, r3, #1
 80076ca:	af58      	add	r7, sp, #352	; 0x160
 80076cc:	930d      	str	r3, [sp, #52]	; 0x34
 80076ce:	d002      	beq.n	80076d6 <_vfprintf_r+0x2fa>
 80076d0:	2330      	movs	r3, #48	; 0x30
 80076d2:	f807 3d01 	strb.w	r3, [r7, #-1]!
 80076d6:	2300      	movs	r3, #0
 80076d8:	9310      	str	r3, [sp, #64]	; 0x40
 80076da:	9313      	str	r3, [sp, #76]	; 0x4c
 80076dc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80076e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e2:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 80076e6:	454b      	cmp	r3, r9
 80076e8:	bfb8      	it	lt
 80076ea:	464b      	movlt	r3, r9
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	b112      	cbz	r2, 80076f6 <_vfprintf_r+0x31a>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	3301      	adds	r3, #1
 80076f4:	9308      	str	r3, [sp, #32]
 80076f6:	f018 0302 	ands.w	r3, r8, #2
 80076fa:	930e      	str	r3, [sp, #56]	; 0x38
 80076fc:	d002      	beq.n	8007704 <_vfprintf_r+0x328>
 80076fe:	9b08      	ldr	r3, [sp, #32]
 8007700:	3302      	adds	r3, #2
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8007708:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800770a:	9311      	str	r3, [sp, #68]	; 0x44
 800770c:	d13f      	bne.n	800778e <_vfprintf_r+0x3b2>
 800770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007710:	9908      	ldr	r1, [sp, #32]
 8007712:	1a5d      	subs	r5, r3, r1
 8007714:	2d00      	cmp	r5, #0
 8007716:	dd3a      	ble.n	800778e <_vfprintf_r+0x3b2>
 8007718:	2d10      	cmp	r5, #16
 800771a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800771c:	dd29      	ble.n	8007772 <_vfprintf_r+0x396>
 800771e:	4659      	mov	r1, fp
 8007720:	4620      	mov	r0, r4
 8007722:	9622      	str	r6, [sp, #136]	; 0x88
 8007724:	2310      	movs	r3, #16
 8007726:	9c07      	ldr	r4, [sp, #28]
 8007728:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800772a:	46bb      	mov	fp, r7
 800772c:	e004      	b.n	8007738 <_vfprintf_r+0x35c>
 800772e:	3d10      	subs	r5, #16
 8007730:	2d10      	cmp	r5, #16
 8007732:	f101 0108 	add.w	r1, r1, #8
 8007736:	dd18      	ble.n	800776a <_vfprintf_r+0x38e>
 8007738:	3201      	adds	r2, #1
 800773a:	4fba      	ldr	r7, [pc, #744]	; (8007a24 <_vfprintf_r+0x648>)
 800773c:	3010      	adds	r0, #16
 800773e:	2a07      	cmp	r2, #7
 8007740:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 8007744:	e9c1 7300 	strd	r7, r3, [r1]
 8007748:	ddf1      	ble.n	800772e <_vfprintf_r+0x352>
 800774a:	aa2c      	add	r2, sp, #176	; 0xb0
 800774c:	4631      	mov	r1, r6
 800774e:	4620      	mov	r0, r4
 8007750:	9312      	str	r3, [sp, #72]	; 0x48
 8007752:	f004 f86f 	bl	800b834 <__sprint_r>
 8007756:	2800      	cmp	r0, #0
 8007758:	f040 843a 	bne.w	8007fd0 <_vfprintf_r+0xbf4>
 800775c:	3d10      	subs	r5, #16
 800775e:	2d10      	cmp	r5, #16
 8007760:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 8007764:	a92f      	add	r1, sp, #188	; 0xbc
 8007766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007768:	dce6      	bgt.n	8007738 <_vfprintf_r+0x35c>
 800776a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800776c:	465f      	mov	r7, fp
 800776e:	4604      	mov	r4, r0
 8007770:	468b      	mov	fp, r1
 8007772:	3201      	adds	r2, #1
 8007774:	4bab      	ldr	r3, [pc, #684]	; (8007a24 <_vfprintf_r+0x648>)
 8007776:	442c      	add	r4, r5
 8007778:	2a07      	cmp	r2, #7
 800777a:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 800777e:	e9cb 3500 	strd	r3, r5, [fp]
 8007782:	f300 84ff 	bgt.w	8008184 <_vfprintf_r+0xda8>
 8007786:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 800778a:	f10b 0b08 	add.w	fp, fp, #8
 800778e:	b172      	cbz	r2, 80077ae <_vfprintf_r+0x3d2>
 8007790:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007792:	3201      	adds	r2, #1
 8007794:	3401      	adds	r4, #1
 8007796:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 800779a:	2101      	movs	r1, #1
 800779c:	2a07      	cmp	r2, #7
 800779e:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 80077a2:	e9cb 0100 	strd	r0, r1, [fp]
 80077a6:	f300 8415 	bgt.w	8007fd4 <_vfprintf_r+0xbf8>
 80077aa:	f10b 0b08 	add.w	fp, fp, #8
 80077ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b0:	b16b      	cbz	r3, 80077ce <_vfprintf_r+0x3f2>
 80077b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80077b4:	3301      	adds	r3, #1
 80077b6:	3402      	adds	r4, #2
 80077b8:	a925      	add	r1, sp, #148	; 0x94
 80077ba:	2202      	movs	r2, #2
 80077bc:	2b07      	cmp	r3, #7
 80077be:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 80077c2:	e9cb 1200 	strd	r1, r2, [fp]
 80077c6:	f300 8412 	bgt.w	8007fee <_vfprintf_r+0xc12>
 80077ca:	f10b 0b08 	add.w	fp, fp, #8
 80077ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	f000 832b 	beq.w	8007e2c <_vfprintf_r+0xa50>
 80077d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d8:	eba9 0503 	sub.w	r5, r9, r3
 80077dc:	2d00      	cmp	r5, #0
 80077de:	dd37      	ble.n	8007850 <_vfprintf_r+0x474>
 80077e0:	2d10      	cmp	r5, #16
 80077e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80077e4:	4b90      	ldr	r3, [pc, #576]	; (8007a28 <_vfprintf_r+0x64c>)
 80077e6:	dd28      	ble.n	800783a <_vfprintf_r+0x45e>
 80077e8:	4659      	mov	r1, fp
 80077ea:	4620      	mov	r0, r4
 80077ec:	46bb      	mov	fp, r7
 80077ee:	f04f 0910 	mov.w	r9, #16
 80077f2:	4637      	mov	r7, r6
 80077f4:	461c      	mov	r4, r3
 80077f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077f8:	e004      	b.n	8007804 <_vfprintf_r+0x428>
 80077fa:	3d10      	subs	r5, #16
 80077fc:	2d10      	cmp	r5, #16
 80077fe:	f101 0108 	add.w	r1, r1, #8
 8007802:	dd15      	ble.n	8007830 <_vfprintf_r+0x454>
 8007804:	3201      	adds	r2, #1
 8007806:	3010      	adds	r0, #16
 8007808:	2a07      	cmp	r2, #7
 800780a:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 800780e:	e9c1 4900 	strd	r4, r9, [r1]
 8007812:	ddf2      	ble.n	80077fa <_vfprintf_r+0x41e>
 8007814:	aa2c      	add	r2, sp, #176	; 0xb0
 8007816:	4631      	mov	r1, r6
 8007818:	9807      	ldr	r0, [sp, #28]
 800781a:	f004 f80b 	bl	800b834 <__sprint_r>
 800781e:	2800      	cmp	r0, #0
 8007820:	f040 83d6 	bne.w	8007fd0 <_vfprintf_r+0xbf4>
 8007824:	3d10      	subs	r5, #16
 8007826:	2d10      	cmp	r5, #16
 8007828:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 800782c:	a92f      	add	r1, sp, #188	; 0xbc
 800782e:	dce9      	bgt.n	8007804 <_vfprintf_r+0x428>
 8007830:	463e      	mov	r6, r7
 8007832:	4623      	mov	r3, r4
 8007834:	465f      	mov	r7, fp
 8007836:	4604      	mov	r4, r0
 8007838:	468b      	mov	fp, r1
 800783a:	3201      	adds	r2, #1
 800783c:	442c      	add	r4, r5
 800783e:	2a07      	cmp	r2, #7
 8007840:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8007844:	e9cb 3500 	strd	r3, r5, [fp]
 8007848:	f300 83ec 	bgt.w	8008024 <_vfprintf_r+0xc48>
 800784c:	f10b 0b08 	add.w	fp, fp, #8
 8007850:	f418 7f80 	tst.w	r8, #256	; 0x100
 8007854:	f040 827a 	bne.w	8007d4c <_vfprintf_r+0x970>
 8007858:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800785a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800785c:	f8cb 7000 	str.w	r7, [fp]
 8007860:	3301      	adds	r3, #1
 8007862:	4414      	add	r4, r2
 8007864:	2b07      	cmp	r3, #7
 8007866:	942e      	str	r4, [sp, #184]	; 0xb8
 8007868:	f8cb 2004 	str.w	r2, [fp, #4]
 800786c:	932d      	str	r3, [sp, #180]	; 0xb4
 800786e:	f300 838f 	bgt.w	8007f90 <_vfprintf_r+0xbb4>
 8007872:	f10b 0b08 	add.w	fp, fp, #8
 8007876:	f018 0f04 	tst.w	r8, #4
 800787a:	d03b      	beq.n	80078f4 <_vfprintf_r+0x518>
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	9a08      	ldr	r2, [sp, #32]
 8007880:	1a9d      	subs	r5, r3, r2
 8007882:	2d00      	cmp	r5, #0
 8007884:	dd36      	ble.n	80078f4 <_vfprintf_r+0x518>
 8007886:	2d10      	cmp	r5, #16
 8007888:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800788a:	dd21      	ble.n	80078d0 <_vfprintf_r+0x4f4>
 800788c:	2610      	movs	r6, #16
 800788e:	9f07      	ldr	r7, [sp, #28]
 8007890:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007894:	e004      	b.n	80078a0 <_vfprintf_r+0x4c4>
 8007896:	3d10      	subs	r5, #16
 8007898:	2d10      	cmp	r5, #16
 800789a:	f10b 0b08 	add.w	fp, fp, #8
 800789e:	dd17      	ble.n	80078d0 <_vfprintf_r+0x4f4>
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a60      	ldr	r2, [pc, #384]	; (8007a24 <_vfprintf_r+0x648>)
 80078a4:	3410      	adds	r4, #16
 80078a6:	2b07      	cmp	r3, #7
 80078a8:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 80078ac:	e9cb 2600 	strd	r2, r6, [fp]
 80078b0:	ddf1      	ble.n	8007896 <_vfprintf_r+0x4ba>
 80078b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80078b4:	4641      	mov	r1, r8
 80078b6:	4638      	mov	r0, r7
 80078b8:	f003 ffbc 	bl	800b834 <__sprint_r>
 80078bc:	2800      	cmp	r0, #0
 80078be:	f040 856c 	bne.w	800839a <_vfprintf_r+0xfbe>
 80078c2:	3d10      	subs	r5, #16
 80078c4:	2d10      	cmp	r5, #16
 80078c6:	e9dd 342d 	ldrd	r3, r4, [sp, #180]	; 0xb4
 80078ca:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80078ce:	dce7      	bgt.n	80078a0 <_vfprintf_r+0x4c4>
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a54      	ldr	r2, [pc, #336]	; (8007a24 <_vfprintf_r+0x648>)
 80078d4:	442c      	add	r4, r5
 80078d6:	2b07      	cmp	r3, #7
 80078d8:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 80078dc:	e9cb 2500 	strd	r2, r5, [fp]
 80078e0:	dd08      	ble.n	80078f4 <_vfprintf_r+0x518>
 80078e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80078e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078e6:	9807      	ldr	r0, [sp, #28]
 80078e8:	f003 ffa4 	bl	800b834 <__sprint_r>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f040 82e3 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80078f2:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80078f4:	9908      	ldr	r1, [sp, #32]
 80078f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078fa:	428a      	cmp	r2, r1
 80078fc:	bfac      	ite	ge
 80078fe:	189b      	addge	r3, r3, r2
 8007900:	185b      	addlt	r3, r3, r1
 8007902:	9309      	str	r3, [sp, #36]	; 0x24
 8007904:	2c00      	cmp	r4, #0
 8007906:	f040 82cf 	bne.w	8007ea8 <_vfprintf_r+0xacc>
 800790a:	2300      	movs	r3, #0
 800790c:	932d      	str	r3, [sp, #180]	; 0xb4
 800790e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007910:	b11b      	cbz	r3, 800791a <_vfprintf_r+0x53e>
 8007912:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007914:	9807      	ldr	r0, [sp, #28]
 8007916:	f002 fd41 	bl	800a39c <_free_r>
 800791a:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 800791e:	4657      	mov	r7, sl
 8007920:	783b      	ldrb	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f47f adac 	bne.w	8007480 <_vfprintf_r+0xa4>
 8007928:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800792a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800792e:	2b00      	cmp	r3, #0
 8007930:	f041 80e3 	bne.w	8008afa <_vfprintf_r+0x171e>
 8007934:	2300      	movs	r3, #0
 8007936:	932d      	str	r3, [sp, #180]	; 0xb4
 8007938:	e2c5      	b.n	8007ec6 <_vfprintf_r+0xaea>
 800793a:	4643      	mov	r3, r8
 800793c:	069a      	lsls	r2, r3, #26
 800793e:	f140 8148 	bpl.w	8007bd2 <_vfprintf_r+0x7f6>
 8007942:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007944:	3407      	adds	r4, #7
 8007946:	f024 0207 	bic.w	r2, r4, #7
 800794a:	f102 0108 	add.w	r1, r2, #8
 800794e:	e9d2 4500 	ldrd	r4, r5, [r2]
 8007952:	910c      	str	r1, [sp, #48]	; 0x30
 8007954:	2201      	movs	r2, #1
 8007956:	2100      	movs	r1, #0
 8007958:	f88d 1093 	strb.w	r1, [sp, #147]	; 0x93
 800795c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8007960:	a958      	add	r1, sp, #352	; 0x160
 8007962:	9108      	str	r1, [sp, #32]
 8007964:	f47f aea2 	bne.w	80076ac <_vfprintf_r+0x2d0>
 8007968:	4698      	mov	r8, r3
 800796a:	2a01      	cmp	r2, #1
 800796c:	f000 834d 	beq.w	800800a <_vfprintf_r+0xc2e>
 8007970:	2a02      	cmp	r2, #2
 8007972:	f000 8318 	beq.w	8007fa6 <_vfprintf_r+0xbca>
 8007976:	a958      	add	r1, sp, #352	; 0x160
 8007978:	e000      	b.n	800797c <_vfprintf_r+0x5a0>
 800797a:	4639      	mov	r1, r7
 800797c:	08e2      	lsrs	r2, r4, #3
 800797e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8007982:	08e8      	lsrs	r0, r5, #3
 8007984:	f004 0307 	and.w	r3, r4, #7
 8007988:	4605      	mov	r5, r0
 800798a:	4614      	mov	r4, r2
 800798c:	3330      	adds	r3, #48	; 0x30
 800798e:	ea54 0205 	orrs.w	r2, r4, r5
 8007992:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007996:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800799a:	d1ee      	bne.n	800797a <_vfprintf_r+0x59e>
 800799c:	f018 0f01 	tst.w	r8, #1
 80079a0:	f000 8311 	beq.w	8007fc6 <_vfprintf_r+0xbea>
 80079a4:	2b30      	cmp	r3, #48	; 0x30
 80079a6:	f000 830e 	beq.w	8007fc6 <_vfprintf_r+0xbea>
 80079aa:	9a08      	ldr	r2, [sp, #32]
 80079ac:	3902      	subs	r1, #2
 80079ae:	2330      	movs	r3, #48	; 0x30
 80079b0:	1a52      	subs	r2, r2, r1
 80079b2:	f807 3c01 	strb.w	r3, [r7, #-1]
 80079b6:	920d      	str	r2, [sp, #52]	; 0x34
 80079b8:	460f      	mov	r7, r1
 80079ba:	e68c      	b.n	80076d6 <_vfprintf_r+0x2fa>
 80079bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079c0:	2200      	movs	r2, #0
 80079c2:	f81a 6b01 	ldrb.w	r6, [sl], #1
 80079c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80079ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80079ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d9f5      	bls.n	80079c2 <_vfprintf_r+0x5e6>
 80079d6:	920a      	str	r2, [sp, #40]	; 0x28
 80079d8:	e581      	b.n	80074de <_vfprintf_r+0x102>
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <_vfprintf_r+0x650>)
 80079dc:	931d      	str	r3, [sp, #116]	; 0x74
 80079de:	f018 0f20 	tst.w	r8, #32
 80079e2:	f000 810e 	beq.w	8007c02 <_vfprintf_r+0x826>
 80079e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80079e8:	3407      	adds	r4, #7
 80079ea:	f024 0307 	bic.w	r3, r4, #7
 80079ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079f2:	f103 0208 	add.w	r2, r3, #8
 80079f6:	920c      	str	r2, [sp, #48]	; 0x30
 80079f8:	f018 0f01 	tst.w	r8, #1
 80079fc:	d009      	beq.n	8007a12 <_vfprintf_r+0x636>
 80079fe:	ea54 0305 	orrs.w	r3, r4, r5
 8007a02:	d006      	beq.n	8007a12 <_vfprintf_r+0x636>
 8007a04:	2330      	movs	r3, #48	; 0x30
 8007a06:	f88d 6095 	strb.w	r6, [sp, #149]	; 0x95
 8007a0a:	f048 0802 	orr.w	r8, r8, #2
 8007a0e:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8007a12:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8007a16:	2202      	movs	r2, #2
 8007a18:	e79d      	b.n	8007956 <_vfprintf_r+0x57a>
 8007a1a:	f048 0801 	orr.w	r8, r8, #1
 8007a1e:	f89a 6000 	ldrb.w	r6, [sl]
 8007a22:	e55a      	b.n	80074da <_vfprintf_r+0xfe>
 8007a24:	0800e664 	.word	0x0800e664
 8007a28:	0800e674 	.word	0x0800e674
 8007a2c:	0800e630 	.word	0x0800e630
 8007a30:	9e07      	ldr	r6, [sp, #28]
 8007a32:	4630      	mov	r0, r6
 8007a34:	f002 fdf8 	bl	800a628 <_localeconv_r>
 8007a38:	6843      	ldr	r3, [r0, #4]
 8007a3a:	931e      	str	r3, [sp, #120]	; 0x78
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fc5f 	bl	8007300 <strlen>
 8007a42:	9021      	str	r0, [sp, #132]	; 0x84
 8007a44:	4604      	mov	r4, r0
 8007a46:	4630      	mov	r0, r6
 8007a48:	f002 fdee 	bl	800a628 <_localeconv_r>
 8007a4c:	6883      	ldr	r3, [r0, #8]
 8007a4e:	9320      	str	r3, [sp, #128]	; 0x80
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	f43f adbd 	beq.w	80075d0 <_vfprintf_r+0x1f4>
 8007a56:	f89a 6000 	ldrb.w	r6, [sl]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f ad3d 	beq.w	80074da <_vfprintf_r+0xfe>
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f43f ad39 	beq.w	80074da <_vfprintf_r+0xfe>
 8007a68:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8007a6c:	e535      	b.n	80074da <_vfprintf_r+0xfe>
 8007a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a70:	f89a 6000 	ldrb.w	r6, [sl]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	920a      	str	r2, [sp, #40]	; 0x28
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	f103 0304 	add.w	r3, r3, #4
 8007a7e:	f2c0 8694 	blt.w	80087aa <_vfprintf_r+0x13ce>
 8007a82:	930c      	str	r3, [sp, #48]	; 0x30
 8007a84:	e529      	b.n	80074da <_vfprintf_r+0xfe>
 8007a86:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
 8007a8a:	f89a 6000 	ldrb.w	r6, [sl]
 8007a8e:	e524      	b.n	80074da <_vfprintf_r+0xfe>
 8007a90:	f89a 6000 	ldrb.w	r6, [sl]
 8007a94:	f048 0804 	orr.w	r8, r8, #4
 8007a98:	e51f      	b.n	80074da <_vfprintf_r+0xfe>
 8007a9a:	f89a 6000 	ldrb.w	r6, [sl]
 8007a9e:	2e2a      	cmp	r6, #42	; 0x2a
 8007aa0:	f10a 0201 	add.w	r2, sl, #1
 8007aa4:	f001 81b6 	beq.w	8008e14 <_vfprintf_r+0x1a38>
 8007aa8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	4692      	mov	sl, r2
 8007ab0:	f04f 0900 	mov.w	r9, #0
 8007ab4:	f63f ad13 	bhi.w	80074de <_vfprintf_r+0x102>
 8007ab8:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8007abc:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8007ac0:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8007ac4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d9f5      	bls.n	8007ab8 <_vfprintf_r+0x6dc>
 8007acc:	e507      	b.n	80074de <_vfprintf_r+0x102>
 8007ace:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8007ad2:	f89a 6000 	ldrb.w	r6, [sl]
 8007ad6:	e500      	b.n	80074da <_vfprintf_r+0xfe>
 8007ad8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007ada:	4bc0      	ldr	r3, [pc, #768]	; (8007ddc <_vfprintf_r+0xa00>)
 8007adc:	3407      	adds	r4, #7
 8007ade:	f024 0c07 	bic.w	ip, r4, #7
 8007ae2:	e9dc 0100 	ldrd	r0, r1, [ip]
 8007ae6:	f10c 0408 	add.w	r4, ip, #8
 8007aea:	9117      	str	r1, [sp, #92]	; 0x5c
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007af4:	9019      	str	r0, [sp, #100]	; 0x64
 8007af6:	4605      	mov	r5, r0
 8007af8:	9108      	str	r1, [sp, #32]
 8007afa:	940c      	str	r4, [sp, #48]	; 0x30
 8007afc:	f006 fa16 	bl	800df2c <__aeabi_dcmpun>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f040 8475 	bne.w	80083f0 <_vfprintf_r+0x1014>
 8007b06:	4628      	mov	r0, r5
 8007b08:	9908      	ldr	r1, [sp, #32]
 8007b0a:	4bb4      	ldr	r3, [pc, #720]	; (8007ddc <_vfprintf_r+0xa00>)
 8007b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b10:	f006 f9ee 	bl	800def0 <__aeabi_dcmple>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f040 846b 	bne.w	80083f0 <_vfprintf_r+0x1014>
 8007b1a:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8007b1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b20:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007b22:	f006 f9db 	bl	800dedc <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f040 8563 	bne.w	80085f2 <_vfprintf_r+0x1216>
 8007b2c:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8007b30:	4fab      	ldr	r7, [pc, #684]	; (8007de0 <_vfprintf_r+0xa04>)
 8007b32:	4bac      	ldr	r3, [pc, #688]	; (8007de4 <_vfprintf_r+0xa08>)
 8007b34:	2000      	movs	r0, #0
 8007b36:	2103      	movs	r1, #3
 8007b38:	9108      	str	r1, [sp, #32]
 8007b3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007b3c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8007b40:	2e47      	cmp	r6, #71	; 0x47
 8007b42:	bfd8      	it	le
 8007b44:	461f      	movle	r7, r3
 8007b46:	910d      	str	r1, [sp, #52]	; 0x34
 8007b48:	4681      	mov	r9, r0
 8007b4a:	9013      	str	r0, [sp, #76]	; 0x4c
 8007b4c:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8007b50:	e5cd      	b.n	80076ee <_vfprintf_r+0x312>
 8007b52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b54:	2300      	movs	r3, #0
 8007b56:	6801      	ldr	r1, [r0, #0]
 8007b58:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f88d 10fc 	strb.w	r1, [sp, #252]	; 0xfc
 8007b62:	2301      	movs	r3, #1
 8007b64:	1d01      	adds	r1, r0, #4
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	9210      	str	r2, [sp, #64]	; 0x40
 8007b6a:	4691      	mov	r9, r2
 8007b6c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b6e:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
 8007b72:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 8007b76:	af3f      	add	r7, sp, #252	; 0xfc
 8007b78:	e5bd      	b.n	80076f6 <_vfprintf_r+0x31a>
 8007b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7c:	681f      	ldr	r7, [r3, #0]
 8007b7e:	2500      	movs	r5, #0
 8007b80:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
 8007b84:	1d1c      	adds	r4, r3, #4
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	f000 863b 	beq.w	8008802 <_vfprintf_r+0x1426>
 8007b8c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8007b90:	f000 8712 	beq.w	80089b8 <_vfprintf_r+0x15dc>
 8007b94:	464a      	mov	r2, r9
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f003 f891 	bl	800acc0 <memchr>
 8007b9e:	9010      	str	r0, [sp, #64]	; 0x40
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f000 85e8 	beq.w	8008776 <_vfprintf_r+0x139a>
 8007ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba8:	1bdb      	subs	r3, r3, r7
 8007baa:	930d      	str	r3, [sp, #52]	; 0x34
 8007bac:	46a9      	mov	r9, r5
 8007bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007bb2:	940c      	str	r4, [sp, #48]	; 0x30
 8007bb4:	9308      	str	r3, [sp, #32]
 8007bb6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8007bba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007bbe:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
 8007bc2:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8007bc6:	e592      	b.n	80076ee <_vfprintf_r+0x312>
 8007bc8:	f048 0310 	orr.w	r3, r8, #16
 8007bcc:	069a      	lsls	r2, r3, #26
 8007bce:	f53f aeb8 	bmi.w	8007942 <_vfprintf_r+0x566>
 8007bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bd4:	06df      	lsls	r7, r3, #27
 8007bd6:	f102 0104 	add.w	r1, r2, #4
 8007bda:	f100 8385 	bmi.w	80082e8 <_vfprintf_r+0xf0c>
 8007bde:	065d      	lsls	r5, r3, #25
 8007be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be2:	f100 84ee 	bmi.w	80085c2 <_vfprintf_r+0x11e6>
 8007be6:	059c      	lsls	r4, r3, #22
 8007be8:	f140 837e 	bpl.w	80082e8 <_vfprintf_r+0xf0c>
 8007bec:	7814      	ldrb	r4, [r2, #0]
 8007bee:	910c      	str	r1, [sp, #48]	; 0x30
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	e6af      	b.n	8007956 <_vfprintf_r+0x57a>
 8007bf6:	4b7c      	ldr	r3, [pc, #496]	; (8007de8 <_vfprintf_r+0xa0c>)
 8007bf8:	931d      	str	r3, [sp, #116]	; 0x74
 8007bfa:	f018 0f20 	tst.w	r8, #32
 8007bfe:	f47f aef2 	bne.w	80079e6 <_vfprintf_r+0x60a>
 8007c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c04:	f018 0f10 	tst.w	r8, #16
 8007c08:	f102 0304 	add.w	r3, r2, #4
 8007c0c:	f040 835b 	bne.w	80082c6 <_vfprintf_r+0xeea>
 8007c10:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c16:	f040 84da 	bne.w	80085ce <_vfprintf_r+0x11f2>
 8007c1a:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007c1e:	f000 8352 	beq.w	80082c6 <_vfprintf_r+0xeea>
 8007c22:	7814      	ldrb	r4, [r2, #0]
 8007c24:	930c      	str	r3, [sp, #48]	; 0x30
 8007c26:	2500      	movs	r5, #0
 8007c28:	e6e6      	b.n	80079f8 <_vfprintf_r+0x61c>
 8007c2a:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
 8007c2e:	f89a 6000 	ldrb.w	r6, [sl]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f47f ac51 	bne.w	80074da <_vfprintf_r+0xfe>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8007c3e:	e44c      	b.n	80074da <_vfprintf_r+0xfe>
 8007c40:	f89a 6000 	ldrb.w	r6, [sl]
 8007c44:	2e6c      	cmp	r6, #108	; 0x6c
 8007c46:	bf03      	ittte	eq
 8007c48:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8007c4c:	f048 0820 	orreq.w	r8, r8, #32
 8007c50:	f10a 0a01 	addeq.w	sl, sl, #1
 8007c54:	f048 0810 	orrne.w	r8, r8, #16
 8007c58:	e43f      	b.n	80074da <_vfprintf_r+0xfe>
 8007c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c5c:	f018 0f20 	tst.w	r8, #32
 8007c60:	f852 3b04 	ldr.w	r3, [r2], #4
 8007c64:	920c      	str	r2, [sp, #48]	; 0x30
 8007c66:	f000 83a7 	beq.w	80083b8 <_vfprintf_r+0xfdc>
 8007c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	17d1      	asrs	r1, r2, #31
 8007c70:	e9c3 0100 	strd	r0, r1, [r3]
 8007c74:	4657      	mov	r7, sl
 8007c76:	e653      	b.n	8007920 <_vfprintf_r+0x544>
 8007c78:	f89a 6000 	ldrb.w	r6, [sl]
 8007c7c:	2e68      	cmp	r6, #104	; 0x68
 8007c7e:	bf03      	ittte	eq
 8007c80:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8007c84:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8007c88:	f10a 0a01 	addeq.w	sl, sl, #1
 8007c8c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8007c90:	e423      	b.n	80074da <_vfprintf_r+0xfe>
 8007c92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c94:	4b55      	ldr	r3, [pc, #340]	; (8007dec <_vfprintf_r+0xa10>)
 8007c96:	680c      	ldr	r4, [r1, #0]
 8007c98:	931d      	str	r3, [sp, #116]	; 0x74
 8007c9a:	f647 0230 	movw	r2, #30768	; 0x7830
 8007c9e:	3104      	adds	r1, #4
 8007ca0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
 8007ca4:	f048 0302 	orr.w	r3, r8, #2
 8007ca8:	910c      	str	r1, [sp, #48]	; 0x30
 8007caa:	2500      	movs	r5, #0
 8007cac:	2202      	movs	r2, #2
 8007cae:	2678      	movs	r6, #120	; 0x78
 8007cb0:	e651      	b.n	8007956 <_vfprintf_r+0x57a>
 8007cb2:	f048 0808 	orr.w	r8, r8, #8
 8007cb6:	f89a 6000 	ldrb.w	r6, [sl]
 8007cba:	e40e      	b.n	80074da <_vfprintf_r+0xfe>
 8007cbc:	f048 0310 	orr.w	r3, r8, #16
 8007cc0:	069f      	lsls	r7, r3, #26
 8007cc2:	f53f acd7 	bmi.w	8007674 <_vfprintf_r+0x298>
 8007cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cc8:	06dd      	lsls	r5, r3, #27
 8007cca:	f101 0204 	add.w	r2, r1, #4
 8007cce:	f100 8304 	bmi.w	80082da <_vfprintf_r+0xefe>
 8007cd2:	065c      	lsls	r4, r3, #25
 8007cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cd6:	f100 847f 	bmi.w	80085d8 <_vfprintf_r+0x11fc>
 8007cda:	0598      	lsls	r0, r3, #22
 8007cdc:	f140 82fd 	bpl.w	80082da <_vfprintf_r+0xefe>
 8007ce0:	f991 4000 	ldrsb.w	r4, [r1]
 8007ce4:	920c      	str	r2, [sp, #48]	; 0x30
 8007ce6:	17e5      	asrs	r5, r4, #31
 8007ce8:	4620      	mov	r0, r4
 8007cea:	4629      	mov	r1, r5
 8007cec:	e4cd      	b.n	800768a <_vfprintf_r+0x2ae>
 8007cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf0:	f018 0f10 	tst.w	r8, #16
 8007cf4:	f102 0304 	add.w	r3, r2, #4
 8007cf8:	f040 82ea 	bne.w	80082d0 <_vfprintf_r+0xef4>
 8007cfc:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d02:	f040 8471 	bne.w	80085e8 <_vfprintf_r+0x120c>
 8007d06:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007d0a:	f000 82e1 	beq.w	80082d0 <_vfprintf_r+0xef4>
 8007d0e:	7814      	ldrb	r4, [r2, #0]
 8007d10:	930c      	str	r3, [sp, #48]	; 0x30
 8007d12:	2500      	movs	r5, #0
 8007d14:	e493      	b.n	800763e <_vfprintf_r+0x262>
 8007d16:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007d1a:	f002 fcb3 	bl	800a684 <__retarget_lock_release_recursive>
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	e44e      	b.n	80075c4 <_vfprintf_r+0x1e8>
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	f43f adfe 	beq.w	8007928 <_vfprintf_r+0x54c>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2101      	movs	r1, #1
 8007d30:	461a      	mov	r2, r3
 8007d32:	9108      	str	r1, [sp, #32]
 8007d34:	f88d 60fc 	strb.w	r6, [sp, #252]	; 0xfc
 8007d38:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 8007d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d3e:	4699      	mov	r9, r3
 8007d40:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d42:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8007d46:	910d      	str	r1, [sp, #52]	; 0x34
 8007d48:	af3f      	add	r7, sp, #252	; 0xfc
 8007d4a:	e4d4      	b.n	80076f6 <_vfprintf_r+0x31a>
 8007d4c:	2e65      	cmp	r6, #101	; 0x65
 8007d4e:	f340 80ca 	ble.w	8007ee6 <_vfprintf_r+0xb0a>
 8007d52:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8007d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d58:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007d5a:	f006 f8b5 	bl	800dec8 <__aeabi_dcmpeq>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f000 816c 	beq.w	800803c <_vfprintf_r+0xc60>
 8007d64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007d66:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <_vfprintf_r+0xa14>)
 8007d68:	f8cb 2000 	str.w	r2, [fp]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	3401      	adds	r4, #1
 8007d70:	2201      	movs	r2, #1
 8007d72:	2b07      	cmp	r3, #7
 8007d74:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 8007d78:	f8cb 2004 	str.w	r2, [fp, #4]
 8007d7c:	f300 8410 	bgt.w	80085a0 <_vfprintf_r+0x11c4>
 8007d80:	f10b 0b08 	add.w	fp, fp, #8
 8007d84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d88:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	db03      	blt.n	8007d96 <_vfprintf_r+0x9ba>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	f43f ad70 	beq.w	8007876 <_vfprintf_r+0x49a>
 8007d96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007d98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d9a:	f8cb 2000 	str.w	r2, [fp]
 8007d9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007da0:	f8cb 2004 	str.w	r2, [fp, #4]
 8007da4:	3301      	adds	r3, #1
 8007da6:	4414      	add	r4, r2
 8007da8:	2b07      	cmp	r3, #7
 8007daa:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
 8007dae:	f300 851b 	bgt.w	80087e8 <_vfprintf_r+0x140c>
 8007db2:	f10b 0b08 	add.w	fp, fp, #8
 8007db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007db8:	1e5d      	subs	r5, r3, #1
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	f77f ad5b 	ble.w	8007876 <_vfprintf_r+0x49a>
 8007dc0:	2d10      	cmp	r5, #16
 8007dc2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <_vfprintf_r+0xa18>)
 8007dc6:	f340 82ed 	ble.w	80083a4 <_vfprintf_r+0xfc8>
 8007dca:	4619      	mov	r1, r3
 8007dcc:	2610      	movs	r6, #16
 8007dce:	4623      	mov	r3, r4
 8007dd0:	9f07      	ldr	r7, [sp, #28]
 8007dd2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	e014      	b.n	8007e04 <_vfprintf_r+0xa28>
 8007dda:	bf00      	nop
 8007ddc:	7fefffff 	.word	0x7fefffff
 8007de0:	0800e624 	.word	0x0800e624
 8007de4:	0800e620 	.word	0x0800e620
 8007de8:	0800e644 	.word	0x0800e644
 8007dec:	0800e630 	.word	0x0800e630
 8007df0:	0800e660 	.word	0x0800e660
 8007df4:	0800e674 	.word	0x0800e674
 8007df8:	f10b 0b08 	add.w	fp, fp, #8
 8007dfc:	3d10      	subs	r5, #16
 8007dfe:	2d10      	cmp	r5, #16
 8007e00:	f340 82cd 	ble.w	800839e <_vfprintf_r+0xfc2>
 8007e04:	3201      	adds	r2, #1
 8007e06:	3310      	adds	r3, #16
 8007e08:	2a07      	cmp	r2, #7
 8007e0a:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 8007e0e:	e9cb 4600 	strd	r4, r6, [fp]
 8007e12:	ddf1      	ble.n	8007df8 <_vfprintf_r+0xa1c>
 8007e14:	aa2c      	add	r2, sp, #176	; 0xb0
 8007e16:	4649      	mov	r1, r9
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f003 fd0b 	bl	800b834 <__sprint_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d14c      	bne.n	8007ebc <_vfprintf_r+0xae0>
 8007e22:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 8007e26:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8007e2a:	e7e7      	b.n	8007dfc <_vfprintf_r+0xa20>
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	1a9d      	subs	r5, r3, r2
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	f77f accf 	ble.w	80077d6 <_vfprintf_r+0x3fa>
 8007e38:	2d10      	cmp	r5, #16
 8007e3a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007e3c:	4bbe      	ldr	r3, [pc, #760]	; (8008138 <_vfprintf_r+0xd5c>)
 8007e3e:	dd27      	ble.n	8007e90 <_vfprintf_r+0xab4>
 8007e40:	4659      	mov	r1, fp
 8007e42:	4620      	mov	r0, r4
 8007e44:	46bb      	mov	fp, r7
 8007e46:	461c      	mov	r4, r3
 8007e48:	4637      	mov	r7, r6
 8007e4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007e4c:	e004      	b.n	8007e58 <_vfprintf_r+0xa7c>
 8007e4e:	3d10      	subs	r5, #16
 8007e50:	2d10      	cmp	r5, #16
 8007e52:	f101 0108 	add.w	r1, r1, #8
 8007e56:	dd16      	ble.n	8007e86 <_vfprintf_r+0xaaa>
 8007e58:	3201      	adds	r2, #1
 8007e5a:	3010      	adds	r0, #16
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	2a07      	cmp	r2, #7
 8007e60:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
 8007e64:	600c      	str	r4, [r1, #0]
 8007e66:	604b      	str	r3, [r1, #4]
 8007e68:	ddf1      	ble.n	8007e4e <_vfprintf_r+0xa72>
 8007e6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	9807      	ldr	r0, [sp, #28]
 8007e70:	f003 fce0 	bl	800b834 <__sprint_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f040 80ab 	bne.w	8007fd0 <_vfprintf_r+0xbf4>
 8007e7a:	3d10      	subs	r5, #16
 8007e7c:	2d10      	cmp	r5, #16
 8007e7e:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
 8007e82:	a92f      	add	r1, sp, #188	; 0xbc
 8007e84:	dce8      	bgt.n	8007e58 <_vfprintf_r+0xa7c>
 8007e86:	463e      	mov	r6, r7
 8007e88:	4623      	mov	r3, r4
 8007e8a:	465f      	mov	r7, fp
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	3201      	adds	r2, #1
 8007e92:	442c      	add	r4, r5
 8007e94:	2a07      	cmp	r2, #7
 8007e96:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8007e9a:	e9cb 3500 	strd	r3, r5, [fp]
 8007e9e:	f300 8298 	bgt.w	80083d2 <_vfprintf_r+0xff6>
 8007ea2:	f10b 0b08 	add.w	fp, fp, #8
 8007ea6:	e496      	b.n	80077d6 <_vfprintf_r+0x3fa>
 8007ea8:	aa2c      	add	r2, sp, #176	; 0xb0
 8007eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eac:	9807      	ldr	r0, [sp, #28]
 8007eae:	f003 fcc1 	bl	800b834 <__sprint_r>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f43f ad29 	beq.w	800790a <_vfprintf_r+0x52e>
 8007eb8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007ebc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ebe:	b111      	cbz	r1, 8007ec6 <_vfprintf_r+0xaea>
 8007ec0:	9807      	ldr	r0, [sp, #28]
 8007ec2:	f002 fa6b 	bl	800a39c <_free_r>
 8007ec6:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8007eca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ece:	07d0      	lsls	r0, r2, #31
 8007ed0:	d402      	bmi.n	8007ed8 <_vfprintf_r+0xafc>
 8007ed2:	0599      	lsls	r1, r3, #22
 8007ed4:	f140 81d6 	bpl.w	8008284 <_vfprintf_r+0xea8>
 8007ed8:	065a      	lsls	r2, r3, #25
 8007eda:	f53f ab70 	bmi.w	80075be <_vfprintf_r+0x1e2>
 8007ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee0:	b059      	add	sp, #356	; 0x164
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	1c62      	adds	r2, r4, #1
 8007ee8:	920d      	str	r2, [sp, #52]	; 0x34
 8007eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007eec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007eee:	2a01      	cmp	r2, #1
 8007ef0:	f103 0501 	add.w	r5, r3, #1
 8007ef4:	f10b 0608 	add.w	r6, fp, #8
 8007ef8:	f340 8120 	ble.w	800813c <_vfprintf_r+0xd60>
 8007efc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007efe:	f8cb 7000 	str.w	r7, [fp]
 8007f02:	2301      	movs	r3, #1
 8007f04:	2d07      	cmp	r5, #7
 8007f06:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
 8007f0a:	f8cb 3004 	str.w	r3, [fp, #4]
 8007f0e:	f300 81c0 	bgt.w	8008292 <_vfprintf_r+0xeb6>
 8007f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f18:	3501      	adds	r5, #1
 8007f1a:	4419      	add	r1, r3
 8007f1c:	2d07      	cmp	r5, #7
 8007f1e:	910d      	str	r1, [sp, #52]	; 0x34
 8007f20:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
 8007f24:	e9c6 2300 	strd	r2, r3, [r6]
 8007f28:	f300 81c0 	bgt.w	80082ac <_vfprintf_r+0xed0>
 8007f2c:	3608      	adds	r6, #8
 8007f2e:	1c6c      	adds	r4, r5, #1
 8007f30:	9411      	str	r4, [sp, #68]	; 0x44
 8007f32:	940e      	str	r4, [sp, #56]	; 0x38
 8007f34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f38:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007f3a:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8007f3e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8007f42:	f106 0b08 	add.w	fp, r6, #8
 8007f46:	f005 ffbf 	bl	800dec8 <__aeabi_dcmpeq>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f040 80c5 	bne.w	80080da <_vfprintf_r+0xcfe>
 8007f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007f54:	f8c6 9004 	str.w	r9, [r6, #4]
 8007f58:	444b      	add	r3, r9
 8007f5a:	3701      	adds	r7, #1
 8007f5c:	2c07      	cmp	r4, #7
 8007f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f60:	6037      	str	r7, [r6, #0]
 8007f62:	932e      	str	r3, [sp, #184]	; 0xb8
 8007f64:	942d      	str	r4, [sp, #180]	; 0xb4
 8007f66:	f300 80fc 	bgt.w	8008162 <_vfprintf_r+0xd86>
 8007f6a:	f106 0310 	add.w	r3, r6, #16
 8007f6e:	1caa      	adds	r2, r5, #2
 8007f70:	465e      	mov	r6, fp
 8007f72:	920e      	str	r2, [sp, #56]	; 0x38
 8007f74:	469b      	mov	fp, r3
 8007f76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f7a:	6072      	str	r2, [r6, #4]
 8007f7c:	4411      	add	r1, r2
 8007f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f80:	912e      	str	r1, [sp, #184]	; 0xb8
 8007f82:	ab28      	add	r3, sp, #160	; 0xa0
 8007f84:	2a07      	cmp	r2, #7
 8007f86:	460c      	mov	r4, r1
 8007f88:	922d      	str	r2, [sp, #180]	; 0xb4
 8007f8a:	6033      	str	r3, [r6, #0]
 8007f8c:	f77f ac73 	ble.w	8007876 <_vfprintf_r+0x49a>
 8007f90:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f94:	9807      	ldr	r0, [sp, #28]
 8007f96:	f003 fc4d 	bl	800b834 <__sprint_r>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d18c      	bne.n	8007eb8 <_vfprintf_r+0xadc>
 8007f9e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8007fa0:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8007fa4:	e467      	b.n	8007876 <_vfprintf_r+0x49a>
 8007fa6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007fa8:	af58      	add	r7, sp, #352	; 0x160
 8007faa:	0923      	lsrs	r3, r4, #4
 8007fac:	f004 010f 	and.w	r1, r4, #15
 8007fb0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8007fb4:	092a      	lsrs	r2, r5, #4
 8007fb6:	461c      	mov	r4, r3
 8007fb8:	4615      	mov	r5, r2
 8007fba:	5c43      	ldrb	r3, [r0, r1]
 8007fbc:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8007fc0:	ea54 0305 	orrs.w	r3, r4, r5
 8007fc4:	d1f1      	bne.n	8007faa <_vfprintf_r+0xbce>
 8007fc6:	9b08      	ldr	r3, [sp, #32]
 8007fc8:	1bdb      	subs	r3, r3, r7
 8007fca:	930d      	str	r3, [sp, #52]	; 0x34
 8007fcc:	f7ff bb83 	b.w	80076d6 <_vfprintf_r+0x2fa>
 8007fd0:	46b1      	mov	r9, r6
 8007fd2:	e773      	b.n	8007ebc <_vfprintf_r+0xae0>
 8007fd4:	aa2c      	add	r2, sp, #176	; 0xb0
 8007fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fd8:	9807      	ldr	r0, [sp, #28]
 8007fda:	f003 fc2b 	bl	800b834 <__sprint_r>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f47f af6a 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8007fe4:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8007fe6:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8007fea:	f7ff bbe0 	b.w	80077ae <_vfprintf_r+0x3d2>
 8007fee:	aa2c      	add	r2, sp, #176	; 0xb0
 8007ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ff2:	9807      	ldr	r0, [sp, #28]
 8007ff4:	f003 fc1e 	bl	800b834 <__sprint_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f47f af5d 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8007ffe:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008000:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008004:	f7ff bbe3 	b.w	80077ce <_vfprintf_r+0x3f2>
 8008008:	4698      	mov	r8, r3
 800800a:	2d00      	cmp	r5, #0
 800800c:	bf08      	it	eq
 800800e:	2c0a      	cmpeq	r4, #10
 8008010:	f080 8174 	bcs.w	80082fc <_vfprintf_r+0xf20>
 8008014:	af58      	add	r7, sp, #352	; 0x160
 8008016:	3430      	adds	r4, #48	; 0x30
 8008018:	2301      	movs	r3, #1
 800801a:	f807 4d01 	strb.w	r4, [r7, #-1]!
 800801e:	930d      	str	r3, [sp, #52]	; 0x34
 8008020:	f7ff bb59 	b.w	80076d6 <_vfprintf_r+0x2fa>
 8008024:	aa2c      	add	r2, sp, #176	; 0xb0
 8008026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008028:	9807      	ldr	r0, [sp, #28]
 800802a:	f003 fc03 	bl	800b834 <__sprint_r>
 800802e:	2800      	cmp	r0, #0
 8008030:	f47f af42 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008034:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008036:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 800803a:	e409      	b.n	8007850 <_vfprintf_r+0x474>
 800803c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800803e:	2b00      	cmp	r3, #0
 8008040:	f340 827a 	ble.w	8008538 <_vfprintf_r+0x115c>
 8008044:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008048:	4293      	cmp	r3, r2
 800804a:	bfa8      	it	ge
 800804c:	4613      	movge	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	461d      	mov	r5, r3
 8008052:	dd0d      	ble.n	8008070 <_vfprintf_r+0xc94>
 8008054:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008056:	f8cb 7000 	str.w	r7, [fp]
 800805a:	3301      	adds	r3, #1
 800805c:	442c      	add	r4, r5
 800805e:	2b07      	cmp	r3, #7
 8008060:	942e      	str	r4, [sp, #184]	; 0xb8
 8008062:	f8cb 5004 	str.w	r5, [fp, #4]
 8008066:	932d      	str	r3, [sp, #180]	; 0xb4
 8008068:	f300 82c8 	bgt.w	80085fc <_vfprintf_r+0x1220>
 800806c:	f10b 0b08 	add.w	fp, fp, #8
 8008070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008072:	2d00      	cmp	r5, #0
 8008074:	bfa8      	it	ge
 8008076:	1b5b      	subge	r3, r3, r5
 8008078:	2b00      	cmp	r3, #0
 800807a:	461d      	mov	r5, r3
 800807c:	f340 809c 	ble.w	80081b8 <_vfprintf_r+0xddc>
 8008080:	2d10      	cmp	r5, #16
 8008082:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008084:	4b2c      	ldr	r3, [pc, #176]	; (8008138 <_vfprintf_r+0xd5c>)
 8008086:	f340 83d1 	ble.w	800882c <_vfprintf_r+0x1450>
 800808a:	4618      	mov	r0, r3
 800808c:	4621      	mov	r1, r4
 800808e:	465b      	mov	r3, fp
 8008090:	2610      	movs	r6, #16
 8008092:	46bb      	mov	fp, r7
 8008094:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008098:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800809a:	4607      	mov	r7, r0
 800809c:	e004      	b.n	80080a8 <_vfprintf_r+0xccc>
 800809e:	3308      	adds	r3, #8
 80080a0:	3d10      	subs	r5, #16
 80080a2:	2d10      	cmp	r5, #16
 80080a4:	f340 83bd 	ble.w	8008822 <_vfprintf_r+0x1446>
 80080a8:	3201      	adds	r2, #1
 80080aa:	3110      	adds	r1, #16
 80080ac:	2a07      	cmp	r2, #7
 80080ae:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
 80080b2:	e9c3 7600 	strd	r7, r6, [r3]
 80080b6:	ddf2      	ble.n	800809e <_vfprintf_r+0xcc2>
 80080b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80080ba:	4621      	mov	r1, r4
 80080bc:	4648      	mov	r0, r9
 80080be:	f003 fbb9 	bl	800b834 <__sprint_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f040 84a5 	bne.w	8008a12 <_vfprintf_r+0x1636>
 80080c8:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
 80080cc:	ab2f      	add	r3, sp, #188	; 0xbc
 80080ce:	e7e7      	b.n	80080a0 <_vfprintf_r+0xcc4>
 80080d0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80080d4:	af58      	add	r7, sp, #352	; 0x160
 80080d6:	f7ff bafe 	b.w	80076d6 <_vfprintf_r+0x2fa>
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	f77f af4a 	ble.w	8007f76 <_vfprintf_r+0xb9a>
 80080e2:	f1b9 0f10 	cmp.w	r9, #16
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <_vfprintf_r+0xd5c>)
 80080e8:	f340 8661 	ble.w	8008dae <_vfprintf_r+0x19d2>
 80080ec:	4619      	mov	r1, r3
 80080ee:	2710      	movs	r7, #16
 80080f0:	4633      	mov	r3, r6
 80080f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80080f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80080fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80080fc:	460e      	mov	r6, r1
 80080fe:	e007      	b.n	8008110 <_vfprintf_r+0xd34>
 8008100:	3308      	adds	r3, #8
 8008102:	f1a9 0910 	sub.w	r9, r9, #16
 8008106:	f1b9 0f10 	cmp.w	r9, #16
 800810a:	f340 8353 	ble.w	80087b4 <_vfprintf_r+0x13d8>
 800810e:	3501      	adds	r5, #1
 8008110:	3210      	adds	r2, #16
 8008112:	2d07      	cmp	r5, #7
 8008114:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
 8008118:	e9c3 6700 	strd	r6, r7, [r3]
 800811c:	ddf0      	ble.n	8008100 <_vfprintf_r+0xd24>
 800811e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008120:	4621      	mov	r1, r4
 8008122:	4658      	mov	r0, fp
 8008124:	f003 fb86 	bl	800b834 <__sprint_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	f040 8472 	bne.w	8008a12 <_vfprintf_r+0x1636>
 800812e:	e9dd 522d 	ldrd	r5, r2, [sp, #180]	; 0xb4
 8008132:	ab2f      	add	r3, sp, #188	; 0xbc
 8008134:	e7e5      	b.n	8008102 <_vfprintf_r+0xd26>
 8008136:	bf00      	nop
 8008138:	0800e674 	.word	0x0800e674
 800813c:	f018 0f01 	tst.w	r8, #1
 8008140:	f47f aedc 	bne.w	8007efc <_vfprintf_r+0xb20>
 8008144:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008146:	f8cb 7000 	str.w	r7, [fp]
 800814a:	2201      	movs	r2, #1
 800814c:	2d07      	cmp	r5, #7
 800814e:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
 8008152:	f8cb 2004 	str.w	r2, [fp, #4]
 8008156:	dc04      	bgt.n	8008162 <_vfprintf_r+0xd86>
 8008158:	3302      	adds	r3, #2
 800815a:	930e      	str	r3, [sp, #56]	; 0x38
 800815c:	f10b 0b10 	add.w	fp, fp, #16
 8008160:	e709      	b.n	8007f76 <_vfprintf_r+0xb9a>
 8008162:	aa2c      	add	r2, sp, #176	; 0xb0
 8008164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008166:	9807      	ldr	r0, [sp, #28]
 8008168:	f003 fb64 	bl	800b834 <__sprint_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	f47f aea3 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008172:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 8008176:	3301      	adds	r3, #1
 8008178:	920d      	str	r2, [sp, #52]	; 0x34
 800817a:	930e      	str	r3, [sp, #56]	; 0x38
 800817c:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
 8008180:	ae2f      	add	r6, sp, #188	; 0xbc
 8008182:	e6f8      	b.n	8007f76 <_vfprintf_r+0xb9a>
 8008184:	aa2c      	add	r2, sp, #176	; 0xb0
 8008186:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008188:	9807      	ldr	r0, [sp, #28]
 800818a:	f003 fb53 	bl	800b834 <__sprint_r>
 800818e:	2800      	cmp	r0, #0
 8008190:	f47f ae92 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008194:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8008198:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800819a:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 800819e:	f7ff baf6 	b.w	800778e <_vfprintf_r+0x3b2>
 80081a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80081a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081a6:	9807      	ldr	r0, [sp, #28]
 80081a8:	f003 fb44 	bl	800b834 <__sprint_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f47f ae83 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80081b2:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80081b4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80081b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ba:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80081be:	443b      	add	r3, r7
 80081c0:	4699      	mov	r9, r3
 80081c2:	f040 8354 	bne.w	800886e <_vfprintf_r+0x1492>
 80081c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081ca:	4293      	cmp	r3, r2
 80081cc:	db49      	blt.n	8008262 <_vfprintf_r+0xe86>
 80081ce:	f018 0f01 	tst.w	r8, #1
 80081d2:	d146      	bne.n	8008262 <_vfprintf_r+0xe86>
 80081d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081d6:	18bd      	adds	r5, r7, r2
 80081d8:	eba5 0509 	sub.w	r5, r5, r9
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	429d      	cmp	r5, r3
 80081e0:	bfa8      	it	ge
 80081e2:	461d      	movge	r5, r3
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	dd0d      	ble.n	8008204 <_vfprintf_r+0xe28>
 80081e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80081ea:	f8cb 9000 	str.w	r9, [fp]
 80081ee:	3201      	adds	r2, #1
 80081f0:	442c      	add	r4, r5
 80081f2:	2a07      	cmp	r2, #7
 80081f4:	942e      	str	r4, [sp, #184]	; 0xb8
 80081f6:	f8cb 5004 	str.w	r5, [fp, #4]
 80081fa:	922d      	str	r2, [sp, #180]	; 0xb4
 80081fc:	f300 845e 	bgt.w	8008abc <_vfprintf_r+0x16e0>
 8008200:	f10b 0b08 	add.w	fp, fp, #8
 8008204:	2d00      	cmp	r5, #0
 8008206:	bfac      	ite	ge
 8008208:	1b5d      	subge	r5, r3, r5
 800820a:	461d      	movlt	r5, r3
 800820c:	2d00      	cmp	r5, #0
 800820e:	f77f ab32 	ble.w	8007876 <_vfprintf_r+0x49a>
 8008212:	2d10      	cmp	r5, #16
 8008214:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008216:	4b75      	ldr	r3, [pc, #468]	; (80083ec <_vfprintf_r+0x1010>)
 8008218:	f340 80c4 	ble.w	80083a4 <_vfprintf_r+0xfc8>
 800821c:	4619      	mov	r1, r3
 800821e:	2610      	movs	r6, #16
 8008220:	4623      	mov	r3, r4
 8008222:	9f07      	ldr	r7, [sp, #28]
 8008224:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008228:	460c      	mov	r4, r1
 800822a:	e005      	b.n	8008238 <_vfprintf_r+0xe5c>
 800822c:	f10b 0b08 	add.w	fp, fp, #8
 8008230:	3d10      	subs	r5, #16
 8008232:	2d10      	cmp	r5, #16
 8008234:	f340 80b3 	ble.w	800839e <_vfprintf_r+0xfc2>
 8008238:	3201      	adds	r2, #1
 800823a:	3310      	adds	r3, #16
 800823c:	2a07      	cmp	r2, #7
 800823e:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 8008242:	e9cb 4600 	strd	r4, r6, [fp]
 8008246:	ddf1      	ble.n	800822c <_vfprintf_r+0xe50>
 8008248:	aa2c      	add	r2, sp, #176	; 0xb0
 800824a:	4649      	mov	r1, r9
 800824c:	4638      	mov	r0, r7
 800824e:	f003 faf1 	bl	800b834 <__sprint_r>
 8008252:	2800      	cmp	r0, #0
 8008254:	f47f ae32 	bne.w	8007ebc <_vfprintf_r+0xae0>
 8008258:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 800825c:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008260:	e7e6      	b.n	8008230 <_vfprintf_r+0xe54>
 8008262:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008264:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008266:	f8cb 1000 	str.w	r1, [fp]
 800826a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800826c:	f8cb 1004 	str.w	r1, [fp, #4]
 8008270:	3201      	adds	r2, #1
 8008272:	440c      	add	r4, r1
 8008274:	2a07      	cmp	r2, #7
 8008276:	942e      	str	r4, [sp, #184]	; 0xb8
 8008278:	922d      	str	r2, [sp, #180]	; 0xb4
 800827a:	f300 8289 	bgt.w	8008790 <_vfprintf_r+0x13b4>
 800827e:	f10b 0b08 	add.w	fp, fp, #8
 8008282:	e7a7      	b.n	80081d4 <_vfprintf_r+0xdf8>
 8008284:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008288:	f002 f9fc 	bl	800a684 <__retarget_lock_release_recursive>
 800828c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008290:	e622      	b.n	8007ed8 <_vfprintf_r+0xafc>
 8008292:	aa2c      	add	r2, sp, #176	; 0xb0
 8008294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008296:	9807      	ldr	r0, [sp, #28]
 8008298:	f003 facc 	bl	800b834 <__sprint_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	f47f ae0b 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80082a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80082a4:	930d      	str	r3, [sp, #52]	; 0x34
 80082a6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80082a8:	ae2f      	add	r6, sp, #188	; 0xbc
 80082aa:	e632      	b.n	8007f12 <_vfprintf_r+0xb36>
 80082ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80082ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082b0:	9807      	ldr	r0, [sp, #28]
 80082b2:	f003 fabf 	bl	800b834 <__sprint_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f47f adfe 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80082bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80082be:	930d      	str	r3, [sp, #52]	; 0x34
 80082c0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80082c2:	ae2f      	add	r6, sp, #188	; 0xbc
 80082c4:	e633      	b.n	8007f2e <_vfprintf_r+0xb52>
 80082c6:	6814      	ldr	r4, [r2, #0]
 80082c8:	930c      	str	r3, [sp, #48]	; 0x30
 80082ca:	2500      	movs	r5, #0
 80082cc:	f7ff bb94 	b.w	80079f8 <_vfprintf_r+0x61c>
 80082d0:	6814      	ldr	r4, [r2, #0]
 80082d2:	930c      	str	r3, [sp, #48]	; 0x30
 80082d4:	2500      	movs	r5, #0
 80082d6:	f7ff b9b2 	b.w	800763e <_vfprintf_r+0x262>
 80082da:	680c      	ldr	r4, [r1, #0]
 80082dc:	920c      	str	r2, [sp, #48]	; 0x30
 80082de:	17e5      	asrs	r5, r4, #31
 80082e0:	4620      	mov	r0, r4
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7ff b9d1 	b.w	800768a <_vfprintf_r+0x2ae>
 80082e8:	6814      	ldr	r4, [r2, #0]
 80082ea:	910c      	str	r1, [sp, #48]	; 0x30
 80082ec:	2201      	movs	r2, #1
 80082ee:	2500      	movs	r5, #0
 80082f0:	f7ff bb31 	b.w	8007956 <_vfprintf_r+0x57a>
 80082f4:	2a01      	cmp	r2, #1
 80082f6:	f47f ab3b 	bne.w	8007970 <_vfprintf_r+0x594>
 80082fa:	e68b      	b.n	8008014 <_vfprintf_r+0xc38>
 80082fc:	f408 6380 	and.w	r3, r8, #1024	; 0x400
 8008300:	2200      	movs	r2, #0
 8008302:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008306:	9610      	str	r6, [sp, #64]	; 0x40
 8008308:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800830c:	af58      	add	r7, sp, #352	; 0x160
 800830e:	4692      	mov	sl, r2
 8008310:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008314:	461e      	mov	r6, r3
 8008316:	e00a      	b.n	800832e <_vfprintf_r+0xf52>
 8008318:	2300      	movs	r3, #0
 800831a:	4620      	mov	r0, r4
 800831c:	4629      	mov	r1, r5
 800831e:	220a      	movs	r2, #10
 8008320:	f005 fe42 	bl	800dfa8 <__aeabi_uldivmod>
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	ea54 0305 	orrs.w	r3, r4, r5
 800832c:	d029      	beq.n	8008382 <_vfprintf_r+0xfa6>
 800832e:	220a      	movs	r2, #10
 8008330:	2300      	movs	r3, #0
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f005 fe37 	bl	800dfa8 <__aeabi_uldivmod>
 800833a:	3230      	adds	r2, #48	; 0x30
 800833c:	f807 2c01 	strb.w	r2, [r7, #-1]
 8008340:	f10a 0a01 	add.w	sl, sl, #1
 8008344:	3f01      	subs	r7, #1
 8008346:	2e00      	cmp	r6, #0
 8008348:	d0e6      	beq.n	8008318 <_vfprintf_r+0xf3c>
 800834a:	f898 3000 	ldrb.w	r3, [r8]
 800834e:	459a      	cmp	sl, r3
 8008350:	d1e2      	bne.n	8008318 <_vfprintf_r+0xf3c>
 8008352:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008356:	d0df      	beq.n	8008318 <_vfprintf_r+0xf3c>
 8008358:	2d00      	cmp	r5, #0
 800835a:	bf08      	it	eq
 800835c:	2c0a      	cmpeq	r4, #10
 800835e:	d3db      	bcc.n	8008318 <_vfprintf_r+0xf3c>
 8008360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008362:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008364:	1aff      	subs	r7, r7, r3
 8008366:	461a      	mov	r2, r3
 8008368:	4638      	mov	r0, r7
 800836a:	f003 f9f5 	bl	800b758 <strncpy>
 800836e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8494 	beq.w	8008ca0 <_vfprintf_r+0x18c4>
 8008378:	f108 0801 	add.w	r8, r8, #1
 800837c:	f04f 0a00 	mov.w	sl, #0
 8008380:	e7ca      	b.n	8008318 <_vfprintf_r+0xf3c>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8008388:	1bdb      	subs	r3, r3, r7
 800838a:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800838e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008390:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8008394:	930d      	str	r3, [sp, #52]	; 0x34
 8008396:	f7ff b99e 	b.w	80076d6 <_vfprintf_r+0x2fa>
 800839a:	46c1      	mov	r9, r8
 800839c:	e58e      	b.n	8007ebc <_vfprintf_r+0xae0>
 800839e:	4621      	mov	r1, r4
 80083a0:	461c      	mov	r4, r3
 80083a2:	460b      	mov	r3, r1
 80083a4:	3201      	adds	r2, #1
 80083a6:	442c      	add	r4, r5
 80083a8:	2a07      	cmp	r2, #7
 80083aa:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 80083ae:	e9cb 3500 	strd	r3, r5, [fp]
 80083b2:	f77f aa5e 	ble.w	8007872 <_vfprintf_r+0x496>
 80083b6:	e5eb      	b.n	8007f90 <_vfprintf_r+0xbb4>
 80083b8:	f018 0f10 	tst.w	r8, #16
 80083bc:	f040 80fc 	bne.w	80085b8 <_vfprintf_r+0x11dc>
 80083c0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80083c4:	f000 834d 	beq.w	8008a62 <_vfprintf_r+0x1686>
 80083c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	4657      	mov	r7, sl
 80083ce:	f7ff baa7 	b.w	8007920 <_vfprintf_r+0x544>
 80083d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80083d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083d6:	9807      	ldr	r0, [sp, #28]
 80083d8:	f003 fa2c 	bl	800b834 <__sprint_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	f47f ad6b 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80083e2:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80083e4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80083e8:	f7ff b9f5 	b.w	80077d6 <_vfprintf_r+0x3fa>
 80083ec:	0800e674 	.word	0x0800e674
 80083f0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80083f2:	4622      	mov	r2, r4
 80083f4:	4620      	mov	r0, r4
 80083f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80083f8:	4623      	mov	r3, r4
 80083fa:	4621      	mov	r1, r4
 80083fc:	f005 fd96 	bl	800df2c <__aeabi_dcmpun>
 8008400:	2800      	cmp	r0, #0
 8008402:	f040 848d 	bne.w	8008d20 <_vfprintf_r+0x1944>
 8008406:	2e61      	cmp	r6, #97	; 0x61
 8008408:	f000 8111 	beq.w	800862e <_vfprintf_r+0x1252>
 800840c:	2e41      	cmp	r6, #65	; 0x41
 800840e:	f000 836f 	beq.w	8008af0 <_vfprintf_r+0x1714>
 8008412:	f026 0320 	bic.w	r3, r6, #32
 8008416:	f448 7280 	orr.w	r2, r8, #256	; 0x100
 800841a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800841e:	9308      	str	r3, [sp, #32]
 8008420:	9212      	str	r2, [sp, #72]	; 0x48
 8008422:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008424:	f000 8429 	beq.w	8008c7a <_vfprintf_r+0x189e>
 8008428:	2b47      	cmp	r3, #71	; 0x47
 800842a:	f000 8420 	beq.w	8008c6e <_vfprintf_r+0x1892>
 800842e:	2d00      	cmp	r5, #0
 8008430:	f2c0 82f2 	blt.w	8008a18 <_vfprintf_r+0x163c>
 8008434:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8008438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800843a:	930d      	str	r3, [sp, #52]	; 0x34
 800843c:	2e66      	cmp	r6, #102	; 0x66
 800843e:	f000 83e3 	beq.w	8008c08 <_vfprintf_r+0x182c>
 8008442:	2e46      	cmp	r6, #70	; 0x46
 8008444:	f000 847c 	beq.w	8008d40 <_vfprintf_r+0x1964>
 8008448:	9b08      	ldr	r3, [sp, #32]
 800844a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800844c:	2b45      	cmp	r3, #69	; 0x45
 800844e:	bf06      	itte	eq
 8008450:	f109 0301 	addeq.w	r3, r9, #1
 8008454:	930e      	streq	r3, [sp, #56]	; 0x38
 8008456:	f8cd 9038 	strne.w	r9, [sp, #56]	; 0x38
 800845a:	a82a      	add	r0, sp, #168	; 0xa8
 800845c:	a927      	add	r1, sp, #156	; 0x9c
 800845e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008460:	9004      	str	r0, [sp, #16]
 8008462:	9103      	str	r1, [sp, #12]
 8008464:	a826      	add	r0, sp, #152	; 0x98
 8008466:	2102      	movs	r1, #2
 8008468:	9002      	str	r0, [sp, #8]
 800846a:	462b      	mov	r3, r5
 800846c:	9401      	str	r4, [sp, #4]
 800846e:	9100      	str	r1, [sp, #0]
 8008470:	9807      	ldr	r0, [sp, #28]
 8008472:	f000 fe39 	bl	80090e8 <_dtoa_r>
 8008476:	2e67      	cmp	r6, #103	; 0x67
 8008478:	4607      	mov	r7, r0
 800847a:	f040 849a 	bne.w	8008db2 <_vfprintf_r+0x19d6>
 800847e:	f018 0f01 	tst.w	r8, #1
 8008482:	f040 83f0 	bne.w	8008c66 <_vfprintf_r+0x188a>
 8008486:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008488:	4640      	mov	r0, r8
 800848a:	1bdb      	subs	r3, r3, r7
 800848c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8008490:	9314      	str	r3, [sp, #80]	; 0x50
 8008492:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008494:	9315      	str	r3, [sp, #84]	; 0x54
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	2b47      	cmp	r3, #71	; 0x47
 800849a:	f000 81dd 	beq.w	8008858 <_vfprintf_r+0x147c>
 800849e:	9b08      	ldr	r3, [sp, #32]
 80084a0:	2b46      	cmp	r3, #70	; 0x46
 80084a2:	f000 82f5 	beq.w	8008a90 <_vfprintf_r+0x16b4>
 80084a6:	9908      	ldr	r1, [sp, #32]
 80084a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084aa:	b2f2      	uxtb	r2, r6
 80084ac:	2941      	cmp	r1, #65	; 0x41
 80084ae:	bf08      	it	eq
 80084b0:	320f      	addeq	r2, #15
 80084b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80084b6:	bf06      	itte	eq
 80084b8:	b2d2      	uxtbeq	r2, r2
 80084ba:	2101      	moveq	r1, #1
 80084bc:	2100      	movne	r1, #0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	9326      	str	r3, [sp, #152]	; 0x98
 80084c2:	bfb8      	it	lt
 80084c4:	9b15      	ldrlt	r3, [sp, #84]	; 0x54
 80084c6:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80084ca:	bfba      	itte	lt
 80084cc:	f1c3 0301 	rsblt	r3, r3, #1
 80084d0:	222d      	movlt	r2, #45	; 0x2d
 80084d2:	222b      	movge	r2, #43	; 0x2b
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 80084da:	f300 83f2 	bgt.w	8008cc2 <_vfprintf_r+0x18e6>
 80084de:	2900      	cmp	r1, #0
 80084e0:	f040 8486 	bne.w	8008df0 <_vfprintf_r+0x1a14>
 80084e4:	2230      	movs	r2, #48	; 0x30
 80084e6:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80084ea:	f10d 02a3 	add.w	r2, sp, #163	; 0xa3
 80084ee:	3330      	adds	r3, #48	; 0x30
 80084f0:	7013      	strb	r3, [r2, #0]
 80084f2:	1c53      	adds	r3, r2, #1
 80084f4:	aa28      	add	r2, sp, #160	; 0xa0
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80084fc:	2a01      	cmp	r2, #1
 80084fe:	4413      	add	r3, r2
 8008500:	930d      	str	r3, [sp, #52]	; 0x34
 8008502:	f340 8440 	ble.w	8008d86 <_vfprintf_r+0x19aa>
 8008506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008508:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800850a:	4413      	add	r3, r2
 800850c:	930d      	str	r3, [sp, #52]	; 0x34
 800850e:	2300      	movs	r3, #0
 8008510:	9313      	str	r3, [sp, #76]	; 0x4c
 8008512:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8008516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008518:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800851c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008520:	f440 7880 	orr.w	r8, r0, #256	; 0x100
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 826b 	bne.w	8008a04 <_vfprintf_r+0x1628>
 800852e:	4699      	mov	r9, r3
 8008530:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 8008534:	f7ff b8db 	b.w	80076ee <_vfprintf_r+0x312>
 8008538:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800853a:	49c2      	ldr	r1, [pc, #776]	; (8008844 <_vfprintf_r+0x1468>)
 800853c:	f8cb 1000 	str.w	r1, [fp]
 8008540:	3201      	adds	r2, #1
 8008542:	3401      	adds	r4, #1
 8008544:	2101      	movs	r1, #1
 8008546:	2a07      	cmp	r2, #7
 8008548:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 800854c:	f8cb 1004 	str.w	r1, [fp, #4]
 8008550:	dc60      	bgt.n	8008614 <_vfprintf_r+0x1238>
 8008552:	f10b 0b08 	add.w	fp, fp, #8
 8008556:	b92b      	cbnz	r3, 8008564 <_vfprintf_r+0x1188>
 8008558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800855a:	b91a      	cbnz	r2, 8008564 <_vfprintf_r+0x1188>
 800855c:	f018 0f01 	tst.w	r8, #1
 8008560:	f43f a989 	beq.w	8007876 <_vfprintf_r+0x49a>
 8008564:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008566:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008568:	f8cb 1000 	str.w	r1, [fp]
 800856c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800856e:	f8cb 1004 	str.w	r1, [fp, #4]
 8008572:	3201      	adds	r2, #1
 8008574:	440c      	add	r4, r1
 8008576:	2a07      	cmp	r2, #7
 8008578:	942e      	str	r4, [sp, #184]	; 0xb8
 800857a:	922d      	str	r2, [sp, #180]	; 0xb4
 800857c:	f300 827a 	bgt.w	8008a74 <_vfprintf_r+0x1698>
 8008580:	f10b 0b08 	add.w	fp, fp, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	f2c0 82dd 	blt.w	8008b44 <_vfprintf_r+0x1768>
 800858a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800858c:	3201      	adds	r2, #1
 800858e:	441c      	add	r4, r3
 8008590:	2a07      	cmp	r2, #7
 8008592:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8008596:	e9cb 7300 	strd	r7, r3, [fp]
 800859a:	f77f a96a 	ble.w	8007872 <_vfprintf_r+0x496>
 800859e:	e4f7      	b.n	8007f90 <_vfprintf_r+0xbb4>
 80085a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80085a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085a4:	9807      	ldr	r0, [sp, #28]
 80085a6:	f003 f945 	bl	800b834 <__sprint_r>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	f47f ac84 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80085b0:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80085b4:	f7ff bbe6 	b.w	8007d84 <_vfprintf_r+0x9a8>
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	4657      	mov	r7, sl
 80085be:	f7ff b9af 	b.w	8007920 <_vfprintf_r+0x544>
 80085c2:	8814      	ldrh	r4, [r2, #0]
 80085c4:	910c      	str	r1, [sp, #48]	; 0x30
 80085c6:	2500      	movs	r5, #0
 80085c8:	2201      	movs	r2, #1
 80085ca:	f7ff b9c4 	b.w	8007956 <_vfprintf_r+0x57a>
 80085ce:	8814      	ldrh	r4, [r2, #0]
 80085d0:	930c      	str	r3, [sp, #48]	; 0x30
 80085d2:	2500      	movs	r5, #0
 80085d4:	f7ff ba10 	b.w	80079f8 <_vfprintf_r+0x61c>
 80085d8:	f9b1 4000 	ldrsh.w	r4, [r1]
 80085dc:	920c      	str	r2, [sp, #48]	; 0x30
 80085de:	17e5      	asrs	r5, r4, #31
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7ff b851 	b.w	800768a <_vfprintf_r+0x2ae>
 80085e8:	8814      	ldrh	r4, [r2, #0]
 80085ea:	930c      	str	r3, [sp, #48]	; 0x30
 80085ec:	2500      	movs	r5, #0
 80085ee:	f7ff b826 	b.w	800763e <_vfprintf_r+0x262>
 80085f2:	222d      	movs	r2, #45	; 0x2d
 80085f4:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 80085f8:	f7ff ba9a 	b.w	8007b30 <_vfprintf_r+0x754>
 80085fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80085fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008600:	9807      	ldr	r0, [sp, #28]
 8008602:	f003 f917 	bl	800b834 <__sprint_r>
 8008606:	2800      	cmp	r0, #0
 8008608:	f47f ac56 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 800860c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800860e:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008612:	e52d      	b.n	8008070 <_vfprintf_r+0xc94>
 8008614:	aa2c      	add	r2, sp, #176	; 0xb0
 8008616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008618:	9807      	ldr	r0, [sp, #28]
 800861a:	f003 f90b 	bl	800b834 <__sprint_r>
 800861e:	2800      	cmp	r0, #0
 8008620:	f47f ac4a 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008624:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008626:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008628:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 800862c:	e793      	b.n	8008556 <_vfprintf_r+0x117a>
 800862e:	2330      	movs	r3, #48	; 0x30
 8008630:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8008634:	2378      	movs	r3, #120	; 0x78
 8008636:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 800863a:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
 800863e:	f048 0402 	orr.w	r4, r8, #2
 8008642:	f300 82a6 	bgt.w	8008b92 <_vfprintf_r+0x17b6>
 8008646:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 800864a:	9312      	str	r3, [sp, #72]	; 0x48
 800864c:	f026 0320 	bic.w	r3, r6, #32
 8008650:	9308      	str	r3, [sp, #32]
 8008652:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008654:	2300      	movs	r3, #0
 8008656:	46a0      	mov	r8, r4
 8008658:	9310      	str	r3, [sp, #64]	; 0x40
 800865a:	af3f      	add	r7, sp, #252	; 0xfc
 800865c:	2d00      	cmp	r5, #0
 800865e:	f2c0 81dc 	blt.w	8008a1a <_vfprintf_r+0x163e>
 8008662:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008664:	930d      	str	r3, [sp, #52]	; 0x34
 8008666:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008668:	2300      	movs	r3, #0
 800866a:	9311      	str	r3, [sp, #68]	; 0x44
 800866c:	2e61      	cmp	r6, #97	; 0x61
 800866e:	f000 824e 	beq.w	8008b0e <_vfprintf_r+0x1732>
 8008672:	2e41      	cmp	r6, #65	; 0x41
 8008674:	f47f aee2 	bne.w	800843c <_vfprintf_r+0x1060>
 8008678:	aa26      	add	r2, sp, #152	; 0x98
 800867a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800867c:	4629      	mov	r1, r5
 800867e:	f002 ffe1 	bl	800b644 <frexp>
 8008682:	2200      	movs	r2, #0
 8008684:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008688:	f005 f9b6 	bl	800d9f8 <__aeabi_dmul>
 800868c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008690:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008694:	f005 fc18 	bl	800dec8 <__aeabi_dcmpeq>
 8008698:	2800      	cmp	r0, #0
 800869a:	f040 8304 	bne.w	8008ca6 <_vfprintf_r+0x18ca>
 800869e:	4b6a      	ldr	r3, [pc, #424]	; (8008848 <_vfprintf_r+0x146c>)
 80086a0:	930d      	str	r3, [sp, #52]	; 0x34
 80086a2:	e9cd a613 	strd	sl, r6, [sp, #76]	; 0x4c
 80086a6:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80086aa:	e9cd b915 	strd	fp, r9, [sp, #84]	; 0x54
 80086ae:	9723      	str	r7, [sp, #140]	; 0x8c
 80086b0:	46b9      	mov	r9, r7
 80086b2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80086b6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80086ba:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80086be:	e003      	b.n	80086c8 <_vfprintf_r+0x12ec>
 80086c0:	f005 fc02 	bl	800dec8 <__aeabi_dcmpeq>
 80086c4:	bb10      	cbnz	r0, 800870c <_vfprintf_r+0x1330>
 80086c6:	46a9      	mov	r9, r5
 80086c8:	2200      	movs	r2, #0
 80086ca:	4b60      	ldr	r3, [pc, #384]	; (800884c <_vfprintf_r+0x1470>)
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f005 f992 	bl	800d9f8 <__aeabi_dmul>
 80086d4:	460f      	mov	r7, r1
 80086d6:	4606      	mov	r6, r0
 80086d8:	f005 fc3e 	bl	800df58 <__aeabi_d2iz>
 80086dc:	4680      	mov	r8, r0
 80086de:	f005 f921 	bl	800d924 <__aeabi_i2d>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f004 ffcd 	bl	800d688 <__aeabi_dsub>
 80086ee:	464d      	mov	r5, r9
 80086f0:	f81a c008 	ldrb.w	ip, [sl, r8]
 80086f4:	f805 cb01 	strb.w	ip, [r5], #1
 80086f8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80086fc:	46a3      	mov	fp, r4
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008706:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800870a:	d1d9      	bne.n	80086c0 <_vfprintf_r+0x12e4>
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	2200      	movs	r2, #0
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <_vfprintf_r+0x1474>)
 8008714:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008718:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800871a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800871e:	4644      	mov	r4, r8
 8008720:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8008724:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8008728:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800872c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8008730:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008732:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008736:	f005 fbef 	bl	800df18 <__aeabi_dcmpgt>
 800873a:	2800      	cmp	r0, #0
 800873c:	f040 8175 	bne.w	8008a2a <_vfprintf_r+0x164e>
 8008740:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008744:	2200      	movs	r2, #0
 8008746:	4b42      	ldr	r3, [pc, #264]	; (8008850 <_vfprintf_r+0x1474>)
 8008748:	f005 fbbe 	bl	800dec8 <__aeabi_dcmpeq>
 800874c:	b110      	cbz	r0, 8008754 <_vfprintf_r+0x1378>
 800874e:	07e2      	lsls	r2, r4, #31
 8008750:	f100 816b 	bmi.w	8008a2a <_vfprintf_r+0x164e>
 8008754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008756:	2b00      	cmp	r3, #0
 8008758:	db07      	blt.n	800876a <_vfprintf_r+0x138e>
 800875a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800875c:	3301      	adds	r3, #1
 800875e:	442b      	add	r3, r5
 8008760:	2230      	movs	r2, #48	; 0x30
 8008762:	f805 2b01 	strb.w	r2, [r5], #1
 8008766:	42ab      	cmp	r3, r5
 8008768:	d1fb      	bne.n	8008762 <_vfprintf_r+0x1386>
 800876a:	1beb      	subs	r3, r5, r7
 800876c:	4640      	mov	r0, r8
 800876e:	9314      	str	r3, [sp, #80]	; 0x50
 8008770:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8008774:	e68d      	b.n	8008492 <_vfprintf_r+0x10b6>
 8008776:	f8cd 9020 	str.w	r9, [sp, #32]
 800877a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800877e:	940c      	str	r4, [sp, #48]	; 0x30
 8008780:	4681      	mov	r9, r0
 8008782:	9013      	str	r0, [sp, #76]	; 0x4c
 8008784:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8008788:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
 800878c:	f7fe bfaf 	b.w	80076ee <_vfprintf_r+0x312>
 8008790:	aa2c      	add	r2, sp, #176	; 0xb0
 8008792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008794:	9807      	ldr	r0, [sp, #28]
 8008796:	f003 f84d 	bl	800b834 <__sprint_r>
 800879a:	2800      	cmp	r0, #0
 800879c:	f47f ab8c 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80087a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087a2:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80087a4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80087a8:	e514      	b.n	80081d4 <_vfprintf_r+0xdf8>
 80087aa:	4252      	negs	r2, r2
 80087ac:	920a      	str	r2, [sp, #40]	; 0x28
 80087ae:	930c      	str	r3, [sp, #48]	; 0x30
 80087b0:	f7ff b970 	b.w	8007a94 <_vfprintf_r+0x6b8>
 80087b4:	920d      	str	r2, [sp, #52]	; 0x34
 80087b6:	4632      	mov	r2, r6
 80087b8:	461e      	mov	r6, r3
 80087ba:	4613      	mov	r3, r2
 80087bc:	1c6a      	adds	r2, r5, #1
 80087be:	920e      	str	r2, [sp, #56]	; 0x38
 80087c0:	f106 0208 	add.w	r2, r6, #8
 80087c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087c6:	e9c6 3900 	strd	r3, r9, [r6]
 80087ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80087ce:	4449      	add	r1, r9
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	910d      	str	r1, [sp, #52]	; 0x34
 80087d4:	912e      	str	r1, [sp, #184]	; 0xb8
 80087d6:	f73f acc4 	bgt.w	8008162 <_vfprintf_r+0xd86>
 80087da:	3301      	adds	r3, #1
 80087dc:	930e      	str	r3, [sp, #56]	; 0x38
 80087de:	f102 0b08 	add.w	fp, r2, #8
 80087e2:	4616      	mov	r6, r2
 80087e4:	f7ff bbc7 	b.w	8007f76 <_vfprintf_r+0xb9a>
 80087e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80087ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ec:	9807      	ldr	r0, [sp, #28]
 80087ee:	f003 f821 	bl	800b834 <__sprint_r>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f47f ab60 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 80087f8:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80087fa:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 80087fe:	f7ff bada 	b.w	8007db6 <_vfprintf_r+0x9da>
 8008802:	464b      	mov	r3, r9
 8008804:	2b06      	cmp	r3, #6
 8008806:	bf28      	it	cs
 8008808:	2306      	movcs	r3, #6
 800880a:	46b9      	mov	r9, r7
 800880c:	9713      	str	r7, [sp, #76]	; 0x4c
 800880e:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
 8008812:	9710      	str	r7, [sp, #64]	; 0x40
 8008814:	463a      	mov	r2, r7
 8008816:	9308      	str	r3, [sp, #32]
 8008818:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 800881c:	4f0d      	ldr	r7, [pc, #52]	; (8008854 <_vfprintf_r+0x1478>)
 800881e:	f7fe bf66 	b.w	80076ee <_vfprintf_r+0x312>
 8008822:	460c      	mov	r4, r1
 8008824:	4639      	mov	r1, r7
 8008826:	465f      	mov	r7, fp
 8008828:	469b      	mov	fp, r3
 800882a:	460b      	mov	r3, r1
 800882c:	3201      	adds	r2, #1
 800882e:	442c      	add	r4, r5
 8008830:	2a07      	cmp	r2, #7
 8008832:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8008836:	e9cb 3500 	strd	r3, r5, [fp]
 800883a:	f73f acb2 	bgt.w	80081a2 <_vfprintf_r+0xdc6>
 800883e:	f10b 0b08 	add.w	fp, fp, #8
 8008842:	e4b9      	b.n	80081b8 <_vfprintf_r+0xddc>
 8008844:	0800e660 	.word	0x0800e660
 8008848:	0800e644 	.word	0x0800e644
 800884c:	40300000 	.word	0x40300000
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	0800e658 	.word	0x0800e658
 8008858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800885a:	1cda      	adds	r2, r3, #3
 800885c:	db02      	blt.n	8008864 <_vfprintf_r+0x1488>
 800885e:	4599      	cmp	r9, r3
 8008860:	f280 80b5 	bge.w	80089ce <_vfprintf_r+0x15f2>
 8008864:	3e02      	subs	r6, #2
 8008866:	f026 0320 	bic.w	r3, r6, #32
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	e61b      	b.n	80084a6 <_vfprintf_r+0x10ca>
 800886e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008870:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8008874:	465a      	mov	r2, fp
 8008876:	e9dd 8b20 	ldrd	r8, fp, [sp, #128]	; 0x80
 800887a:	18fb      	adds	r3, r7, r3
 800887c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008880:	9712      	str	r7, [sp, #72]	; 0x48
 8008882:	4eae      	ldr	r6, [pc, #696]	; (8008b3c <_vfprintf_r+0x1760>)
 8008884:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008888:	930d      	str	r3, [sp, #52]	; 0x34
 800888a:	464f      	mov	r7, r9
 800888c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008890:	4621      	mov	r1, r4
 8008892:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05b      	beq.n	8008950 <_vfprintf_r+0x1574>
 8008898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d154      	bne.n	8008948 <_vfprintf_r+0x156c>
 800889e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088a0:	3b01      	subs	r3, #1
 80088a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80088a6:	9316      	str	r3, [sp, #88]	; 0x58
 80088a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80088aa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80088ac:	6010      	str	r0, [r2, #0]
 80088ae:	3301      	adds	r3, #1
 80088b0:	4459      	add	r1, fp
 80088b2:	2b07      	cmp	r3, #7
 80088b4:	912e      	str	r1, [sp, #184]	; 0xb8
 80088b6:	f8c2 b004 	str.w	fp, [r2, #4]
 80088ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80088bc:	dc68      	bgt.n	8008990 <_vfprintf_r+0x15b4>
 80088be:	3208      	adds	r2, #8
 80088c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80088c2:	f898 3000 	ldrb.w	r3, [r8]
 80088c6:	1bc5      	subs	r5, r0, r7
 80088c8:	429d      	cmp	r5, r3
 80088ca:	bfa8      	it	ge
 80088cc:	461d      	movge	r5, r3
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	dd0b      	ble.n	80088ea <_vfprintf_r+0x150e>
 80088d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80088d4:	6017      	str	r7, [r2, #0]
 80088d6:	3301      	adds	r3, #1
 80088d8:	4429      	add	r1, r5
 80088da:	2b07      	cmp	r3, #7
 80088dc:	912e      	str	r1, [sp, #184]	; 0xb8
 80088de:	6055      	str	r5, [r2, #4]
 80088e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80088e2:	dc5e      	bgt.n	80089a2 <_vfprintf_r+0x15c6>
 80088e4:	f898 3000 	ldrb.w	r3, [r8]
 80088e8:	3208      	adds	r2, #8
 80088ea:	2d00      	cmp	r5, #0
 80088ec:	bfac      	ite	ge
 80088ee:	1b5d      	subge	r5, r3, r5
 80088f0:	461d      	movlt	r5, r3
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	dd26      	ble.n	8008944 <_vfprintf_r+0x1568>
 80088f6:	2d10      	cmp	r5, #16
 80088f8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80088fa:	dd3c      	ble.n	8008976 <_vfprintf_r+0x159a>
 80088fc:	2410      	movs	r4, #16
 80088fe:	e003      	b.n	8008908 <_vfprintf_r+0x152c>
 8008900:	3208      	adds	r2, #8
 8008902:	3d10      	subs	r5, #16
 8008904:	2d10      	cmp	r5, #16
 8008906:	dd36      	ble.n	8008976 <_vfprintf_r+0x159a>
 8008908:	3001      	adds	r0, #1
 800890a:	3110      	adds	r1, #16
 800890c:	2807      	cmp	r0, #7
 800890e:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
 8008912:	e9c2 6400 	strd	r6, r4, [r2]
 8008916:	ddf3      	ble.n	8008900 <_vfprintf_r+0x1524>
 8008918:	aa2c      	add	r2, sp, #176	; 0xb0
 800891a:	4651      	mov	r1, sl
 800891c:	4648      	mov	r0, r9
 800891e:	f002 ff89 	bl	800b834 <__sprint_r>
 8008922:	2800      	cmp	r0, #0
 8008924:	d150      	bne.n	80089c8 <_vfprintf_r+0x15ec>
 8008926:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
 800892a:	aa2f      	add	r2, sp, #188	; 0xbc
 800892c:	e7e9      	b.n	8008902 <_vfprintf_r+0x1526>
 800892e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008930:	4651      	mov	r1, sl
 8008932:	4648      	mov	r0, r9
 8008934:	f002 ff7e 	bl	800b834 <__sprint_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	d145      	bne.n	80089c8 <_vfprintf_r+0x15ec>
 800893c:	f898 3000 	ldrb.w	r3, [r8]
 8008940:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8008942:	aa2f      	add	r2, sp, #188	; 0xbc
 8008944:	441f      	add	r7, r3
 8008946:	e7a4      	b.n	8008892 <_vfprintf_r+0x14b6>
 8008948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800894a:	3b01      	subs	r3, #1
 800894c:	9313      	str	r3, [sp, #76]	; 0x4c
 800894e:	e7ab      	b.n	80088a8 <_vfprintf_r+0x14cc>
 8008950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1f8      	bne.n	8008948 <_vfprintf_r+0x156c>
 8008956:	46b9      	mov	r9, r7
 8008958:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800895a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800895c:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	4599      	cmp	r9, r3
 8008964:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8008968:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800896c:	4693      	mov	fp, r2
 800896e:	460c      	mov	r4, r1
 8008970:	bf28      	it	cs
 8008972:	4699      	movcs	r9, r3
 8008974:	e427      	b.n	80081c6 <_vfprintf_r+0xdea>
 8008976:	3001      	adds	r0, #1
 8008978:	4429      	add	r1, r5
 800897a:	2807      	cmp	r0, #7
 800897c:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
 8008980:	e9c2 6500 	strd	r6, r5, [r2]
 8008984:	dcd3      	bgt.n	800892e <_vfprintf_r+0x1552>
 8008986:	f898 3000 	ldrb.w	r3, [r8]
 800898a:	3208      	adds	r2, #8
 800898c:	441f      	add	r7, r3
 800898e:	e780      	b.n	8008892 <_vfprintf_r+0x14b6>
 8008990:	aa2c      	add	r2, sp, #176	; 0xb0
 8008992:	4651      	mov	r1, sl
 8008994:	4648      	mov	r0, r9
 8008996:	f002 ff4d 	bl	800b834 <__sprint_r>
 800899a:	b9a8      	cbnz	r0, 80089c8 <_vfprintf_r+0x15ec>
 800899c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800899e:	aa2f      	add	r2, sp, #188	; 0xbc
 80089a0:	e78e      	b.n	80088c0 <_vfprintf_r+0x14e4>
 80089a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80089a4:	4651      	mov	r1, sl
 80089a6:	4648      	mov	r0, r9
 80089a8:	f002 ff44 	bl	800b834 <__sprint_r>
 80089ac:	b960      	cbnz	r0, 80089c8 <_vfprintf_r+0x15ec>
 80089ae:	f898 3000 	ldrb.w	r3, [r8]
 80089b2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80089b4:	aa2f      	add	r2, sp, #188	; 0xbc
 80089b6:	e798      	b.n	80088ea <_vfprintf_r+0x150e>
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7fe fca1 	bl	8007300 <strlen>
 80089be:	46a9      	mov	r9, r5
 80089c0:	4603      	mov	r3, r0
 80089c2:	900d      	str	r0, [sp, #52]	; 0x34
 80089c4:	f7ff b8f3 	b.w	8007bae <_vfprintf_r+0x7d2>
 80089c8:	46d1      	mov	r9, sl
 80089ca:	f7ff ba77 	b.w	8007ebc <_vfprintf_r+0xae0>
 80089ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089d0:	4619      	mov	r1, r3
 80089d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d4:	4299      	cmp	r1, r3
 80089d6:	f300 8081 	bgt.w	8008adc <_vfprintf_r+0x1700>
 80089da:	07c4      	lsls	r4, r0, #31
 80089dc:	f140 816e 	bpl.w	8008cbc <_vfprintf_r+0x18e0>
 80089e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089e2:	4413      	add	r3, r2
 80089e4:	930d      	str	r3, [sp, #52]	; 0x34
 80089e6:	0541      	lsls	r1, r0, #21
 80089e8:	d503      	bpl.n	80089f2 <_vfprintf_r+0x1616>
 80089ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f300 80e3 	bgt.w	8008bb8 <_vfprintf_r+0x17dc>
 80089f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	2667      	movs	r6, #103	; 0x67
 80089fc:	2300      	movs	r3, #0
 80089fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a00:	9316      	str	r3, [sp, #88]	; 0x58
 8008a02:	e590      	b.n	8008526 <_vfprintf_r+0x114a>
 8008a04:	222d      	movs	r2, #45	; 0x2d
 8008a06:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
 8008a0a:	f04f 0900 	mov.w	r9, #0
 8008a0e:	f7fe be6f 	b.w	80076f0 <_vfprintf_r+0x314>
 8008a12:	46a1      	mov	r9, r4
 8008a14:	f7ff ba52 	b.w	8007ebc <_vfprintf_r+0xae0>
 8008a18:	9010      	str	r0, [sp, #64]	; 0x40
 8008a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a20:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8008a24:	232d      	movs	r3, #45	; 0x2d
 8008a26:	9311      	str	r3, [sp, #68]	; 0x44
 8008a28:	e620      	b.n	800866c <_vfprintf_r+0x1290>
 8008a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a2c:	932a      	str	r3, [sp, #168]	; 0xa8
 8008a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a34:	7bd9      	ldrb	r1, [r3, #15]
 8008a36:	4291      	cmp	r1, r2
 8008a38:	462b      	mov	r3, r5
 8008a3a:	d109      	bne.n	8008a50 <_vfprintf_r+0x1674>
 8008a3c:	2030      	movs	r0, #48	; 0x30
 8008a3e:	f803 0c01 	strb.w	r0, [r3, #-1]
 8008a42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008a44:	1e5a      	subs	r2, r3, #1
 8008a46:	922a      	str	r2, [sp, #168]	; 0xa8
 8008a48:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008a4c:	4291      	cmp	r1, r2
 8008a4e:	d0f6      	beq.n	8008a3e <_vfprintf_r+0x1662>
 8008a50:	2a39      	cmp	r2, #57	; 0x39
 8008a52:	bf0b      	itete	eq
 8008a54:	9a0d      	ldreq	r2, [sp, #52]	; 0x34
 8008a56:	3201      	addne	r2, #1
 8008a58:	7a92      	ldrbeq	r2, [r2, #10]
 8008a5a:	b2d2      	uxtbne	r2, r2
 8008a5c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008a60:	e683      	b.n	800876a <_vfprintf_r+0x138e>
 8008a62:	f418 7f00 	tst.w	r8, #512	; 0x200
 8008a66:	f43f ada7 	beq.w	80085b8 <_vfprintf_r+0x11dc>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	4657      	mov	r7, sl
 8008a70:	f7fe bf56 	b.w	8007920 <_vfprintf_r+0x544>
 8008a74:	aa2c      	add	r2, sp, #176	; 0xb0
 8008a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a78:	9807      	ldr	r0, [sp, #28]
 8008a7a:	f002 fedb 	bl	800b834 <__sprint_r>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f47f aa1a 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008a84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a86:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
 8008a8a:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008a8e:	e579      	b.n	8008584 <_vfprintf_r+0x11a8>
 8008a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f340 816d 	ble.w	8008d72 <_vfprintf_r+0x1996>
 8008a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a9a:	f1b9 0f00 	cmp.w	r9, #0
 8008a9e:	f040 8107 	bne.w	8008cb0 <_vfprintf_r+0x18d4>
 8008aa2:	07c6      	lsls	r6, r0, #31
 8008aa4:	f100 8104 	bmi.w	8008cb0 <_vfprintf_r+0x18d4>
 8008aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8008aaa:	2666      	movs	r6, #102	; 0x66
 8008aac:	0543      	lsls	r3, r0, #21
 8008aae:	f100 8084 	bmi.w	8008bba <_vfprintf_r+0x17de>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ab8:	9308      	str	r3, [sp, #32]
 8008aba:	e79f      	b.n	80089fc <_vfprintf_r+0x1620>
 8008abc:	aa2c      	add	r2, sp, #176	; 0xb0
 8008abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac0:	9807      	ldr	r0, [sp, #28]
 8008ac2:	f002 feb7 	bl	800b834 <__sprint_r>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f47f a9f6 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008acc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ace:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ad0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008ad8:	f7ff bb94 	b.w	8008204 <_vfprintf_r+0xe28>
 8008adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ade:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ae0:	4413      	add	r3, r2
 8008ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f340 8152 	ble.w	8008d90 <_vfprintf_r+0x19b4>
 8008aec:	2667      	movs	r6, #103	; 0x67
 8008aee:	e7dd      	b.n	8008aac <_vfprintf_r+0x16d0>
 8008af0:	2330      	movs	r3, #48	; 0x30
 8008af2:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8008af6:	2358      	movs	r3, #88	; 0x58
 8008af8:	e59d      	b.n	8008636 <_vfprintf_r+0x125a>
 8008afa:	9807      	ldr	r0, [sp, #28]
 8008afc:	aa2c      	add	r2, sp, #176	; 0xb0
 8008afe:	4649      	mov	r1, r9
 8008b00:	f002 fe98 	bl	800b834 <__sprint_r>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f47f a9de 	bne.w	8007ec6 <_vfprintf_r+0xaea>
 8008b0a:	f7fe bf13 	b.w	8007934 <_vfprintf_r+0x558>
 8008b0e:	aa26      	add	r2, sp, #152	; 0x98
 8008b10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b12:	4629      	mov	r1, r5
 8008b14:	f002 fd96 	bl	800b644 <frexp>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b1e:	f004 ff6b 	bl	800d9f8 <__aeabi_dmul>
 8008b22:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008b26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008b2a:	f005 f9cd 	bl	800dec8 <__aeabi_dcmpeq>
 8008b2e:	b108      	cbz	r0, 8008b34 <_vfprintf_r+0x1758>
 8008b30:	2301      	movs	r3, #1
 8008b32:	9326      	str	r3, [sp, #152]	; 0x98
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <_vfprintf_r+0x1764>)
 8008b36:	930d      	str	r3, [sp, #52]	; 0x34
 8008b38:	e5b3      	b.n	80086a2 <_vfprintf_r+0x12c6>
 8008b3a:	bf00      	nop
 8008b3c:	0800e674 	.word	0x0800e674
 8008b40:	0800e630 	.word	0x0800e630
 8008b44:	425d      	negs	r5, r3
 8008b46:	3310      	adds	r3, #16
 8008b48:	4bb8      	ldr	r3, [pc, #736]	; (8008e2c <_vfprintf_r+0x1a50>)
 8008b4a:	f280 809d 	bge.w	8008c88 <_vfprintf_r+0x18ac>
 8008b4e:	4619      	mov	r1, r3
 8008b50:	2610      	movs	r6, #16
 8008b52:	4623      	mov	r3, r4
 8008b54:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008b58:	460c      	mov	r4, r1
 8008b5a:	e005      	b.n	8008b68 <_vfprintf_r+0x178c>
 8008b5c:	f10b 0b08 	add.w	fp, fp, #8
 8008b60:	3d10      	subs	r5, #16
 8008b62:	2d10      	cmp	r5, #16
 8008b64:	f340 808d 	ble.w	8008c82 <_vfprintf_r+0x18a6>
 8008b68:	3201      	adds	r2, #1
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	2a07      	cmp	r2, #7
 8008b6e:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 8008b72:	e9cb 4600 	strd	r4, r6, [fp]
 8008b76:	ddf1      	ble.n	8008b5c <_vfprintf_r+0x1780>
 8008b78:	aa2c      	add	r2, sp, #176	; 0xb0
 8008b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	f002 fe59 	bl	800b834 <__sprint_r>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f47f a998 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008b88:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
 8008b8c:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008b90:	e7e6      	b.n	8008b60 <_vfprintf_r+0x1784>
 8008b92:	f109 0101 	add.w	r1, r9, #1
 8008b96:	9807      	ldr	r0, [sp, #28]
 8008b98:	f001 fdee 	bl	800a778 <_malloc_r>
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 8152 	beq.w	8008e48 <_vfprintf_r+0x1a6c>
 8008ba4:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 8008ba8:	9312      	str	r3, [sp, #72]	; 0x48
 8008baa:	f026 0320 	bic.w	r3, r6, #32
 8008bae:	9308      	str	r3, [sp, #32]
 8008bb0:	46a0      	mov	r8, r4
 8008bb2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008bb4:	9010      	str	r0, [sp, #64]	; 0x40
 8008bb6:	e551      	b.n	800865c <_vfprintf_r+0x1280>
 8008bb8:	2667      	movs	r6, #103	; 0x67
 8008bba:	9820      	ldr	r0, [sp, #128]	; 0x80
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bc0:	9216      	str	r2, [sp, #88]	; 0x58
 8008bc2:	7803      	ldrb	r3, [r0, #0]
 8008bc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bc6:	2bff      	cmp	r3, #255	; 0xff
 8008bc8:	d00c      	beq.n	8008be4 <_vfprintf_r+0x1808>
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	da0a      	bge.n	8008be4 <_vfprintf_r+0x1808>
 8008bce:	7841      	ldrb	r1, [r0, #1]
 8008bd0:	1ad2      	subs	r2, r2, r3
 8008bd2:	b1a9      	cbz	r1, 8008c00 <_vfprintf_r+0x1824>
 8008bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	9316      	str	r3, [sp, #88]	; 0x58
 8008bda:	460b      	mov	r3, r1
 8008bdc:	2bff      	cmp	r3, #255	; 0xff
 8008bde:	f100 0001 	add.w	r0, r0, #1
 8008be2:	d1f2      	bne.n	8008bca <_vfprintf_r+0x17ee>
 8008be4:	9215      	str	r2, [sp, #84]	; 0x54
 8008be6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008be8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008bec:	9020      	str	r0, [sp, #128]	; 0x80
 8008bee:	4413      	add	r3, r2
 8008bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bf2:	fb02 1303 	mla	r3, r2, r3, r1
 8008bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8008bf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008bfc:	9308      	str	r3, [sp, #32]
 8008bfe:	e492      	b.n	8008526 <_vfprintf_r+0x114a>
 8008c00:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c02:	3101      	adds	r1, #1
 8008c04:	9113      	str	r1, [sp, #76]	; 0x4c
 8008c06:	e7de      	b.n	8008bc6 <_vfprintf_r+0x17ea>
 8008c08:	a82a      	add	r0, sp, #168	; 0xa8
 8008c0a:	a927      	add	r1, sp, #156	; 0x9c
 8008c0c:	9004      	str	r0, [sp, #16]
 8008c0e:	9103      	str	r1, [sp, #12]
 8008c10:	a826      	add	r0, sp, #152	; 0x98
 8008c12:	2103      	movs	r1, #3
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	9807      	ldr	r0, [sp, #28]
 8008c22:	f000 fa61 	bl	80090e8 <_dtoa_r>
 8008c26:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	eb00 0409 	add.w	r4, r0, r9
 8008c30:	783b      	ldrb	r3, [r7, #0]
 8008c32:	2b30      	cmp	r3, #48	; 0x30
 8008c34:	f000 80c5 	beq.w	8008dc2 <_vfprintf_r+0x19e6>
 8008c38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c3a:	441c      	add	r4, r3
 8008c3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c42:	4629      	mov	r1, r5
 8008c44:	f005 f940 	bl	800dec8 <__aeabi_dcmpeq>
 8008c48:	b108      	cbz	r0, 8008c4e <_vfprintf_r+0x1872>
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	e41c      	b.n	8008488 <_vfprintf_r+0x10ac>
 8008c4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	f4bf ac19 	bcs.w	8008488 <_vfprintf_r+0x10ac>
 8008c56:	2130      	movs	r1, #48	; 0x30
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	922a      	str	r2, [sp, #168]	; 0xa8
 8008c5c:	7019      	strb	r1, [r3, #0]
 8008c5e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008c60:	429c      	cmp	r4, r3
 8008c62:	d8f9      	bhi.n	8008c58 <_vfprintf_r+0x187c>
 8008c64:	e410      	b.n	8008488 <_vfprintf_r+0x10ac>
 8008c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c68:	443b      	add	r3, r7
 8008c6a:	461c      	mov	r4, r3
 8008c6c:	e7e6      	b.n	8008c3c <_vfprintf_r+0x1860>
 8008c6e:	f1b9 0f00 	cmp.w	r9, #0
 8008c72:	f000 8097 	beq.w	8008da4 <_vfprintf_r+0x19c8>
 8008c76:	9010      	str	r0, [sp, #64]	; 0x40
 8008c78:	e4f0      	b.n	800865c <_vfprintf_r+0x1280>
 8008c7a:	9010      	str	r0, [sp, #64]	; 0x40
 8008c7c:	f04f 0906 	mov.w	r9, #6
 8008c80:	e4ec      	b.n	800865c <_vfprintf_r+0x1280>
 8008c82:	4621      	mov	r1, r4
 8008c84:	461c      	mov	r4, r3
 8008c86:	460b      	mov	r3, r1
 8008c88:	3201      	adds	r2, #1
 8008c8a:	442c      	add	r4, r5
 8008c8c:	2a07      	cmp	r2, #7
 8008c8e:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
 8008c92:	e9cb 3500 	strd	r3, r5, [fp]
 8008c96:	f300 80af 	bgt.w	8008df8 <_vfprintf_r+0x1a1c>
 8008c9a:	f10b 0b08 	add.w	fp, fp, #8
 8008c9e:	e474      	b.n	800858a <_vfprintf_r+0x11ae>
 8008ca0:	469a      	mov	sl, r3
 8008ca2:	f7ff bb39 	b.w	8008318 <_vfprintf_r+0xf3c>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	9326      	str	r3, [sp, #152]	; 0x98
 8008caa:	4b61      	ldr	r3, [pc, #388]	; (8008e30 <_vfprintf_r+0x1a54>)
 8008cac:	930d      	str	r3, [sp, #52]	; 0x34
 8008cae:	e4f8      	b.n	80086a2 <_vfprintf_r+0x12c6>
 8008cb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cb2:	4413      	add	r3, r2
 8008cb4:	444b      	add	r3, r9
 8008cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cb8:	2666      	movs	r6, #102	; 0x66
 8008cba:	e6f7      	b.n	8008aac <_vfprintf_r+0x16d0>
 8008cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc0:	e691      	b.n	80089e6 <_vfprintf_r+0x160a>
 8008cc2:	f10d 0caf 	add.w	ip, sp, #175	; 0xaf
 8008cc6:	4664      	mov	r4, ip
 8008cc8:	4d5a      	ldr	r5, [pc, #360]	; (8008e34 <_vfprintf_r+0x1a58>)
 8008cca:	e000      	b.n	8008cce <_vfprintf_r+0x18f2>
 8008ccc:	4614      	mov	r4, r2
 8008cce:	fba5 1203 	umull	r1, r2, r5, r3
 8008cd2:	08d2      	lsrs	r2, r2, #3
 8008cd4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008cd8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8008cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ce8:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8008cec:	dcee      	bgt.n	8008ccc <_vfprintf_r+0x18f0>
 8008cee:	3330      	adds	r3, #48	; 0x30
 8008cf0:	3c02      	subs	r4, #2
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	45a4      	cmp	ip, r4
 8008cf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cfa:	f240 80a1 	bls.w	8008e40 <_vfprintf_r+0x1a64>
 8008cfe:	f10d 04a2 	add.w	r4, sp, #162	; 0xa2
 8008d02:	4611      	mov	r1, r2
 8008d04:	e001      	b.n	8008d0a <_vfprintf_r+0x192e>
 8008d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d0a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d0e:	458c      	cmp	ip, r1
 8008d10:	d1f9      	bne.n	8008d06 <_vfprintf_r+0x192a>
 8008d12:	ab2c      	add	r3, sp, #176	; 0xb0
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f7ff bbea 	b.w	80084f4 <_vfprintf_r+0x1118>
 8008d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d22:	4f45      	ldr	r7, [pc, #276]	; (8008e38 <_vfprintf_r+0x1a5c>)
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfb6      	itet	lt
 8008d28:	222d      	movlt	r2, #45	; 0x2d
 8008d2a:	f89d 2093 	ldrbge.w	r2, [sp, #147]	; 0x93
 8008d2e:	f88d 2093 	strblt.w	r2, [sp, #147]	; 0x93
 8008d32:	4b42      	ldr	r3, [pc, #264]	; (8008e3c <_vfprintf_r+0x1a60>)
 8008d34:	f7fe befe 	b.w	8007b34 <_vfprintf_r+0x758>
 8008d38:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008d3c:	f7ff b8c3 	b.w	8007ec6 <_vfprintf_r+0xaea>
 8008d40:	a82a      	add	r0, sp, #168	; 0xa8
 8008d42:	a927      	add	r1, sp, #156	; 0x9c
 8008d44:	9004      	str	r0, [sp, #16]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	a826      	add	r0, sp, #152	; 0x98
 8008d4a:	2103      	movs	r1, #3
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d54:	462b      	mov	r3, r5
 8008d56:	9100      	str	r1, [sp, #0]
 8008d58:	9807      	ldr	r0, [sp, #28]
 8008d5a:	f000 f9c5 	bl	80090e8 <_dtoa_r>
 8008d5e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d62:	4607      	mov	r7, r0
 8008d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d66:	2e46      	cmp	r6, #70	; 0x46
 8008d68:	eb07 0403 	add.w	r4, r7, r3
 8008d6c:	f43f af60 	beq.w	8008c30 <_vfprintf_r+0x1854>
 8008d70:	e764      	b.n	8008c3c <_vfprintf_r+0x1860>
 8008d72:	f1b9 0f00 	cmp.w	r9, #0
 8008d76:	d132      	bne.n	8008dde <_vfprintf_r+0x1a02>
 8008d78:	07c5      	lsls	r5, r0, #31
 8008d7a:	d430      	bmi.n	8008dde <_vfprintf_r+0x1a02>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9308      	str	r3, [sp, #32]
 8008d80:	930d      	str	r3, [sp, #52]	; 0x34
 8008d82:	2666      	movs	r6, #102	; 0x66
 8008d84:	e63a      	b.n	80089fc <_vfprintf_r+0x1620>
 8008d86:	07c3      	lsls	r3, r0, #31
 8008d88:	f57f abc1 	bpl.w	800850e <_vfprintf_r+0x1132>
 8008d8c:	f7ff bbbb 	b.w	8008506 <_vfprintf_r+0x112a>
 8008d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d92:	f1c3 0301 	rsb	r3, r3, #1
 8008d96:	441a      	add	r2, r3
 8008d98:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d9c:	920d      	str	r2, [sp, #52]	; 0x34
 8008d9e:	9308      	str	r3, [sp, #32]
 8008da0:	2667      	movs	r6, #103	; 0x67
 8008da2:	e62b      	b.n	80089fc <_vfprintf_r+0x1620>
 8008da4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8008da8:	f04f 0901 	mov.w	r9, #1
 8008dac:	e456      	b.n	800865c <_vfprintf_r+0x1280>
 8008dae:	465a      	mov	r2, fp
 8008db0:	e508      	b.n	80087c4 <_vfprintf_r+0x13e8>
 8008db2:	2e47      	cmp	r6, #71	; 0x47
 8008db4:	f47f af57 	bne.w	8008c66 <_vfprintf_r+0x188a>
 8008db8:	f018 0f01 	tst.w	r8, #1
 8008dbc:	f43f ab63 	beq.w	8008486 <_vfprintf_r+0x10aa>
 8008dc0:	e7d0      	b.n	8008d64 <_vfprintf_r+0x1988>
 8008dc2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008dc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f005 f87d 	bl	800dec8 <__aeabi_dcmpeq>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f47f af32 	bne.w	8008c38 <_vfprintf_r+0x185c>
 8008dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd6:	f1c3 0301 	rsb	r3, r3, #1
 8008dda:	9326      	str	r3, [sp, #152]	; 0x98
 8008ddc:	e72d      	b.n	8008c3a <_vfprintf_r+0x185e>
 8008dde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008de0:	3301      	adds	r3, #1
 8008de2:	444b      	add	r3, r9
 8008de4:	930d      	str	r3, [sp, #52]	; 0x34
 8008de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	2666      	movs	r6, #102	; 0x66
 8008dee:	e605      	b.n	80089fc <_vfprintf_r+0x1620>
 8008df0:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 8008df4:	f7ff bb7b 	b.w	80084ee <_vfprintf_r+0x1112>
 8008df8:	aa2c      	add	r2, sp, #176	; 0xb0
 8008dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dfc:	9807      	ldr	r0, [sp, #28]
 8008dfe:	f002 fd19 	bl	800b834 <__sprint_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f47f a858 	bne.w	8007eb8 <_vfprintf_r+0xadc>
 8008e08:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
 8008e0c:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
 8008e10:	f7ff bbbb 	b.w	800858a <_vfprintf_r+0x11ae>
 8008e14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e16:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8008e1a:	680b      	ldr	r3, [r1, #0]
 8008e1c:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
 8008e20:	1d0b      	adds	r3, r1, #4
 8008e22:	4692      	mov	sl, r2
 8008e24:	930c      	str	r3, [sp, #48]	; 0x30
 8008e26:	f7fe bb58 	b.w	80074da <_vfprintf_r+0xfe>
 8008e2a:	bf00      	nop
 8008e2c:	0800e674 	.word	0x0800e674
 8008e30:	0800e644 	.word	0x0800e644
 8008e34:	cccccccd 	.word	0xcccccccd
 8008e38:	0800e62c 	.word	0x0800e62c
 8008e3c:	0800e628 	.word	0x0800e628
 8008e40:	f10d 03a2 	add.w	r3, sp, #162	; 0xa2
 8008e44:	f7ff bb56 	b.w	80084f4 <_vfprintf_r+0x1118>
 8008e48:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008e4c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e54:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008e58:	f7ff b835 	b.w	8007ec6 <_vfprintf_r+0xaea>

08008e5c <vfprintf>:
 8008e5c:	b410      	push	{r4}
 8008e5e:	4c04      	ldr	r4, [pc, #16]	; (8008e70 <vfprintf+0x14>)
 8008e60:	4613      	mov	r3, r2
 8008e62:	460a      	mov	r2, r1
 8008e64:	4601      	mov	r1, r0
 8008e66:	6820      	ldr	r0, [r4, #0]
 8008e68:	bc10      	pop	{r4}
 8008e6a:	f7fe bab7 	b.w	80073dc <_vfprintf_r>
 8008e6e:	bf00      	nop
 8008e70:	20000030 	.word	0x20000030

08008e74 <__sbprintf>:
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	460c      	mov	r4, r1
 8008e7a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8008e7e:	8989      	ldrh	r1, [r1, #12]
 8008e80:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8008e82:	89e5      	ldrh	r5, [r4, #14]
 8008e84:	9619      	str	r6, [sp, #100]	; 0x64
 8008e86:	f021 0102 	bic.w	r1, r1, #2
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	69e0      	ldr	r0, [r4, #28]
 8008e8e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8008e92:	4617      	mov	r7, r2
 8008e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e9a:	f8ad 500e 	strh.w	r5, [sp, #14]
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	ad1a      	add	r5, sp, #104	; 0x68
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9007      	str	r0, [sp, #28]
 8008ea6:	a816      	add	r0, sp, #88	; 0x58
 8008ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eaa:	9306      	str	r3, [sp, #24]
 8008eac:	9500      	str	r5, [sp, #0]
 8008eae:	9504      	str	r5, [sp, #16]
 8008eb0:	9102      	str	r1, [sp, #8]
 8008eb2:	9105      	str	r1, [sp, #20]
 8008eb4:	f001 fbd6 	bl	800a664 <__retarget_lock_init_recursive>
 8008eb8:	4643      	mov	r3, r8
 8008eba:	463a      	mov	r2, r7
 8008ebc:	4669      	mov	r1, sp
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7fe fa8c 	bl	80073dc <_vfprintf_r>
 8008ec4:	1e05      	subs	r5, r0, #0
 8008ec6:	db07      	blt.n	8008ed8 <__sbprintf+0x64>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4669      	mov	r1, sp
 8008ecc:	f001 f8b0 	bl	800a030 <_fflush_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	bf18      	it	ne
 8008ed4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008ed8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008edc:	065b      	lsls	r3, r3, #25
 8008ede:	d503      	bpl.n	8008ee8 <__sbprintf+0x74>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008eea:	f001 fbbf 	bl	800a66c <__retarget_lock_close_recursive>
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ef8 <__swsetup_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4b31      	ldr	r3, [pc, #196]	; (8008fc0 <__swsetup_r+0xc8>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4605      	mov	r5, r0
 8008f00:	460c      	mov	r4, r1
 8008f02:	b113      	cbz	r3, 8008f0a <__swsetup_r+0x12>
 8008f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	d03a      	beq.n	8008f80 <__swsetup_r+0x88>
 8008f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f0e:	b293      	uxth	r3, r2
 8008f10:	0718      	lsls	r0, r3, #28
 8008f12:	d50c      	bpl.n	8008f2e <__swsetup_r+0x36>
 8008f14:	6920      	ldr	r0, [r4, #16]
 8008f16:	b1a8      	cbz	r0, 8008f44 <__swsetup_r+0x4c>
 8008f18:	f013 0201 	ands.w	r2, r3, #1
 8008f1c:	d020      	beq.n	8008f60 <__swsetup_r+0x68>
 8008f1e:	6963      	ldr	r3, [r4, #20]
 8008f20:	2200      	movs	r2, #0
 8008f22:	425b      	negs	r3, r3
 8008f24:	61a3      	str	r3, [r4, #24]
 8008f26:	60a2      	str	r2, [r4, #8]
 8008f28:	b300      	cbz	r0, 8008f6c <__swsetup_r+0x74>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	06d9      	lsls	r1, r3, #27
 8008f30:	d53e      	bpl.n	8008fb0 <__swsetup_r+0xb8>
 8008f32:	0758      	lsls	r0, r3, #29
 8008f34:	d428      	bmi.n	8008f88 <__swsetup_r+0x90>
 8008f36:	6920      	ldr	r0, [r4, #16]
 8008f38:	f042 0308 	orr.w	r3, r2, #8
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1e9      	bne.n	8008f18 <__swsetup_r+0x20>
 8008f44:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8008f48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008f4c:	d0e4      	beq.n	8008f18 <__swsetup_r+0x20>
 8008f4e:	4628      	mov	r0, r5
 8008f50:	4621      	mov	r1, r4
 8008f52:	f001 fbc7 	bl	800a6e4 <__smakebuf_r>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	6920      	ldr	r0, [r4, #16]
 8008f5a:	f013 0201 	ands.w	r2, r3, #1
 8008f5e:	d1de      	bne.n	8008f1e <__swsetup_r+0x26>
 8008f60:	0799      	lsls	r1, r3, #30
 8008f62:	bf58      	it	pl
 8008f64:	6962      	ldrpl	r2, [r4, #20]
 8008f66:	60a2      	str	r2, [r4, #8]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1de      	bne.n	8008f2a <__swsetup_r+0x32>
 8008f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f70:	061a      	lsls	r2, r3, #24
 8008f72:	d5db      	bpl.n	8008f2c <__swsetup_r+0x34>
 8008f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f901 	bl	800a188 <__sinit>
 8008f86:	e7c0      	b.n	8008f0a <__swsetup_r+0x12>
 8008f88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008f8a:	b151      	cbz	r1, 8008fa2 <__swsetup_r+0xaa>
 8008f8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d004      	beq.n	8008f9e <__swsetup_r+0xa6>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f001 fa01 	bl	800a39c <_free_r>
 8008f9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6323      	str	r3, [r4, #48]	; 0x30
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6920      	ldr	r0, [r4, #16]
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8008fac:	6020      	str	r0, [r4, #0]
 8008fae:	e7c3      	b.n	8008f38 <__swsetup_r+0x40>
 8008fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fb4:	2309      	movs	r3, #9
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fbc:	81a2      	strh	r2, [r4, #12]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000030 	.word	0x20000030

08008fc4 <quorem>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	6903      	ldr	r3, [r0, #16]
 8008fca:	690f      	ldr	r7, [r1, #16]
 8008fcc:	42bb      	cmp	r3, r7
 8008fce:	b083      	sub	sp, #12
 8008fd0:	f2c0 8086 	blt.w	80090e0 <quorem+0x11c>
 8008fd4:	3f01      	subs	r7, #1
 8008fd6:	f101 0914 	add.w	r9, r1, #20
 8008fda:	f100 0a14 	add.w	sl, r0, #20
 8008fde:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 8008fe2:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8008fe6:	00bc      	lsls	r4, r7, #2
 8008fe8:	3201      	adds	r2, #1
 8008fea:	fbb3 f8f2 	udiv	r8, r3, r2
 8008fee:	eb0a 0304 	add.w	r3, sl, r4
 8008ff2:	9400      	str	r4, [sp, #0]
 8008ff4:	eb09 0b04 	add.w	fp, r9, r4
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	f1b8 0f00 	cmp.w	r8, #0
 8008ffe:	d038      	beq.n	8009072 <quorem+0xae>
 8009000:	2500      	movs	r5, #0
 8009002:	462e      	mov	r6, r5
 8009004:	46ce      	mov	lr, r9
 8009006:	46d4      	mov	ip, sl
 8009008:	f85e 4b04 	ldr.w	r4, [lr], #4
 800900c:	f8dc 3000 	ldr.w	r3, [ip]
 8009010:	b2a2      	uxth	r2, r4
 8009012:	fb08 5502 	mla	r5, r8, r2, r5
 8009016:	0c22      	lsrs	r2, r4, #16
 8009018:	0c2c      	lsrs	r4, r5, #16
 800901a:	fb08 4202 	mla	r2, r8, r2, r4
 800901e:	b2ad      	uxth	r5, r5
 8009020:	1b75      	subs	r5, r6, r5
 8009022:	b296      	uxth	r6, r2
 8009024:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 8009028:	fa15 f383 	uxtah	r3, r5, r3
 800902c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8009030:	b29b      	uxth	r3, r3
 8009032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009036:	45f3      	cmp	fp, lr
 8009038:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800903c:	f84c 3b04 	str.w	r3, [ip], #4
 8009040:	ea4f 4626 	mov.w	r6, r6, asr #16
 8009044:	d2e0      	bcs.n	8009008 <quorem+0x44>
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	f85a 3003 	ldr.w	r3, [sl, r3]
 800904c:	b98b      	cbnz	r3, 8009072 <quorem+0xae>
 800904e:	9a01      	ldr	r2, [sp, #4]
 8009050:	1f13      	subs	r3, r2, #4
 8009052:	459a      	cmp	sl, r3
 8009054:	d20c      	bcs.n	8009070 <quorem+0xac>
 8009056:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800905a:	b94b      	cbnz	r3, 8009070 <quorem+0xac>
 800905c:	f1a2 0308 	sub.w	r3, r2, #8
 8009060:	e002      	b.n	8009068 <quorem+0xa4>
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	3b04      	subs	r3, #4
 8009066:	b91a      	cbnz	r2, 8009070 <quorem+0xac>
 8009068:	459a      	cmp	sl, r3
 800906a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800906e:	d3f8      	bcc.n	8009062 <quorem+0x9e>
 8009070:	6107      	str	r7, [r0, #16]
 8009072:	4604      	mov	r4, r0
 8009074:	f002 f8e2 	bl	800b23c <__mcmp>
 8009078:	2800      	cmp	r0, #0
 800907a:	db2d      	blt.n	80090d8 <quorem+0x114>
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	4655      	mov	r5, sl
 8009082:	2300      	movs	r3, #0
 8009084:	f859 1b04 	ldr.w	r1, [r9], #4
 8009088:	6828      	ldr	r0, [r5, #0]
 800908a:	b28a      	uxth	r2, r1
 800908c:	1a9a      	subs	r2, r3, r2
 800908e:	0c0b      	lsrs	r3, r1, #16
 8009090:	fa12 f280 	uxtah	r2, r2, r0
 8009094:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 8009098:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800909c:	b292      	uxth	r2, r2
 800909e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090a2:	45cb      	cmp	fp, r9
 80090a4:	f845 2b04 	str.w	r2, [r5], #4
 80090a8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80090ac:	d2ea      	bcs.n	8009084 <quorem+0xc0>
 80090ae:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 80090b2:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 80090b6:	b97a      	cbnz	r2, 80090d8 <quorem+0x114>
 80090b8:	1f1a      	subs	r2, r3, #4
 80090ba:	4592      	cmp	sl, r2
 80090bc:	d20b      	bcs.n	80090d6 <quorem+0x112>
 80090be:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80090c2:	b942      	cbnz	r2, 80090d6 <quorem+0x112>
 80090c4:	3b08      	subs	r3, #8
 80090c6:	e002      	b.n	80090ce <quorem+0x10a>
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	3b04      	subs	r3, #4
 80090cc:	b91a      	cbnz	r2, 80090d6 <quorem+0x112>
 80090ce:	459a      	cmp	sl, r3
 80090d0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80090d4:	d3f8      	bcc.n	80090c8 <quorem+0x104>
 80090d6:	6127      	str	r7, [r4, #16]
 80090d8:	4640      	mov	r0, r8
 80090da:	b003      	add	sp, #12
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	2000      	movs	r0, #0
 80090e2:	b003      	add	sp, #12
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090e8 <_dtoa_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80090ee:	b097      	sub	sp, #92	; 0x5c
 80090f0:	4614      	mov	r4, r2
 80090f2:	461d      	mov	r5, r3
 80090f4:	4683      	mov	fp, r0
 80090f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80090fa:	b149      	cbz	r1, 8009110 <_dtoa_r+0x28>
 80090fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090fe:	604a      	str	r2, [r1, #4]
 8009100:	2301      	movs	r3, #1
 8009102:	4093      	lsls	r3, r2
 8009104:	608b      	str	r3, [r1, #8]
 8009106:	f001 fe5d 	bl	800adc4 <_Bfree>
 800910a:	2300      	movs	r3, #0
 800910c:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8009110:	1e2e      	subs	r6, r5, #0
 8009112:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009114:	bfb4      	ite	lt
 8009116:	2301      	movlt	r3, #1
 8009118:	2300      	movge	r3, #0
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	4b78      	ldr	r3, [pc, #480]	; (8009300 <_dtoa_r+0x218>)
 800911e:	bfbc      	itt	lt
 8009120:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 8009124:	9603      	strlt	r6, [sp, #12]
 8009126:	43b3      	bics	r3, r6
 8009128:	f000 80a8 	beq.w	800927c <_dtoa_r+0x194>
 800912c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	2300      	movs	r3, #0
 8009138:	f004 fec6 	bl	800dec8 <__aeabi_dcmpeq>
 800913c:	4605      	mov	r5, r0
 800913e:	b178      	cbz	r0, 8009160 <_dtoa_r+0x78>
 8009140:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009142:	2301      	movs	r3, #1
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80c4 	beq.w	80092d6 <_dtoa_r+0x1ee>
 800914e:	4b6d      	ldr	r3, [pc, #436]	; (8009304 <_dtoa_r+0x21c>)
 8009150:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	3b01      	subs	r3, #1
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9804      	ldr	r0, [sp, #16]
 800915a:	b017      	add	sp, #92	; 0x5c
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	aa14      	add	r2, sp, #80	; 0x50
 8009162:	ab15      	add	r3, sp, #84	; 0x54
 8009164:	e9cd 3200 	strd	r3, r2, [sp]
 8009168:	4658      	mov	r0, fp
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	f002 f979 	bl	800b464 <__d2b>
 8009172:	0d34      	lsrs	r4, r6, #20
 8009174:	4682      	mov	sl, r0
 8009176:	f040 80a3 	bne.w	80092c0 <_dtoa_r+0x1d8>
 800917a:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800917e:	442c      	add	r4, r5
 8009180:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009184:	2b20      	cmp	r3, #32
 8009186:	f340 8417 	ble.w	80099b8 <_dtoa_r+0x8d0>
 800918a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800918e:	409e      	lsls	r6, r3
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8009196:	fa23 f000 	lsr.w	r0, r3, r0
 800919a:	4330      	orrs	r0, r6
 800919c:	f004 fbb2 	bl	800d904 <__aeabi_ui2d>
 80091a0:	2301      	movs	r3, #1
 80091a2:	4680      	mov	r8, r0
 80091a4:	3c01      	subs	r4, #1
 80091a6:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80091aa:	9312      	str	r3, [sp, #72]	; 0x48
 80091ac:	2200      	movs	r2, #0
 80091ae:	4b56      	ldr	r3, [pc, #344]	; (8009308 <_dtoa_r+0x220>)
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f004 fa68 	bl	800d688 <__aeabi_dsub>
 80091b8:	a34b      	add	r3, pc, #300	; (adr r3, 80092e8 <_dtoa_r+0x200>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f004 fc1b 	bl	800d9f8 <__aeabi_dmul>
 80091c2:	a34b      	add	r3, pc, #300	; (adr r3, 80092f0 <_dtoa_r+0x208>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f004 fa60 	bl	800d68c <__adddf3>
 80091cc:	4606      	mov	r6, r0
 80091ce:	4620      	mov	r0, r4
 80091d0:	460f      	mov	r7, r1
 80091d2:	f004 fba7 	bl	800d924 <__aeabi_i2d>
 80091d6:	a348      	add	r3, pc, #288	; (adr r3, 80092f8 <_dtoa_r+0x210>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f004 fc0c 	bl	800d9f8 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f004 fa50 	bl	800d68c <__adddf3>
 80091ec:	4606      	mov	r6, r0
 80091ee:	460f      	mov	r7, r1
 80091f0:	f004 feb2 	bl	800df58 <__aeabi_d2iz>
 80091f4:	2200      	movs	r2, #0
 80091f6:	9005      	str	r0, [sp, #20]
 80091f8:	2300      	movs	r3, #0
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f004 fe6d 	bl	800dedc <__aeabi_dcmplt>
 8009202:	2800      	cmp	r0, #0
 8009204:	f040 826e 	bne.w	80096e4 <_dtoa_r+0x5fc>
 8009208:	9e05      	ldr	r6, [sp, #20]
 800920a:	2e16      	cmp	r6, #22
 800920c:	f200 825f 	bhi.w	80096ce <_dtoa_r+0x5e6>
 8009210:	4b3e      	ldr	r3, [pc, #248]	; (800930c <_dtoa_r+0x224>)
 8009212:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800921a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800921e:	f004 fe7b 	bl	800df18 <__aeabi_dcmpgt>
 8009222:	2800      	cmp	r0, #0
 8009224:	f000 83c4 	beq.w	80099b0 <_dtoa_r+0x8c8>
 8009228:	1e73      	subs	r3, r6, #1
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	2300      	movs	r3, #0
 800922e:	930a      	str	r3, [sp, #40]	; 0x28
 8009230:	1b2c      	subs	r4, r5, r4
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	f1b4 0801 	subs.w	r8, r4, #1
 8009238:	bf46      	itte	mi
 800923a:	f1c4 0901 	rsbmi	r9, r4, #1
 800923e:	f04f 0800 	movmi.w	r8, #0
 8009242:	f04f 0900 	movpl.w	r9, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	f2c0 8244 	blt.w	80096d4 <_dtoa_r+0x5ec>
 800924c:	4498      	add	r8, r3
 800924e:	9309      	str	r3, [sp, #36]	; 0x24
 8009250:	2300      	movs	r3, #0
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009256:	2b09      	cmp	r3, #9
 8009258:	d860      	bhi.n	800931c <_dtoa_r+0x234>
 800925a:	2b05      	cmp	r3, #5
 800925c:	f340 83aa 	ble.w	80099b4 <_dtoa_r+0x8cc>
 8009260:	3b04      	subs	r3, #4
 8009262:	9320      	str	r3, [sp, #128]	; 0x80
 8009264:	2500      	movs	r5, #0
 8009266:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009268:	3b02      	subs	r3, #2
 800926a:	2b03      	cmp	r3, #3
 800926c:	f200 848d 	bhi.w	8009b8a <_dtoa_r+0xaa2>
 8009270:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009274:	03a903c9 	.word	0x03a903c9
 8009278:	04ea03d3 	.word	0x04ea03d3
 800927c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800927e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	9b02      	ldr	r3, [sp, #8]
 8009286:	b97b      	cbnz	r3, 80092a8 <_dtoa_r+0x1c0>
 8009288:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800928c:	b966      	cbnz	r6, 80092a8 <_dtoa_r+0x1c0>
 800928e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8612 	beq.w	8009eba <_dtoa_r+0xdd2>
 8009296:	4b1e      	ldr	r3, [pc, #120]	; (8009310 <_dtoa_r+0x228>)
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	3308      	adds	r3, #8
 800929c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800929e:	9804      	ldr	r0, [sp, #16]
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	b017      	add	sp, #92	; 0x5c
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092aa:	b92b      	cbnz	r3, 80092b8 <_dtoa_r+0x1d0>
 80092ac:	4b19      	ldr	r3, [pc, #100]	; (8009314 <_dtoa_r+0x22c>)
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	9804      	ldr	r0, [sp, #16]
 80092b2:	b017      	add	sp, #92	; 0x5c
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	4b16      	ldr	r3, [pc, #88]	; (8009314 <_dtoa_r+0x22c>)
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	3303      	adds	r3, #3
 80092be:	e7ed      	b.n	800929c <_dtoa_r+0x1b4>
 80092c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092c4:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80092c8:	9512      	str	r5, [sp, #72]	; 0x48
 80092ca:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80092ce:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80092d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80092d4:	e76a      	b.n	80091ac <_dtoa_r+0xc4>
 80092d6:	4b10      	ldr	r3, [pc, #64]	; (8009318 <_dtoa_r+0x230>)
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	9804      	ldr	r0, [sp, #16]
 80092dc:	b017      	add	sp, #92	; 0x5c
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	bf00      	nop
 80092e4:	f3af 8000 	nop.w
 80092e8:	636f4361 	.word	0x636f4361
 80092ec:	3fd287a7 	.word	0x3fd287a7
 80092f0:	8b60c8b3 	.word	0x8b60c8b3
 80092f4:	3fc68a28 	.word	0x3fc68a28
 80092f8:	509f79fb 	.word	0x509f79fb
 80092fc:	3fd34413 	.word	0x3fd34413
 8009300:	7ff00000 	.word	0x7ff00000
 8009304:	0800e661 	.word	0x0800e661
 8009308:	3ff80000 	.word	0x3ff80000
 800930c:	0800e6c0 	.word	0x0800e6c0
 8009310:	0800e684 	.word	0x0800e684
 8009314:	0800e690 	.word	0x0800e690
 8009318:	0800e660 	.word	0x0800e660
 800931c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009320:	2501      	movs	r5, #1
 8009322:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009326:	2300      	movs	r3, #0
 8009328:	9320      	str	r3, [sp, #128]	; 0x80
 800932a:	9321      	str	r3, [sp, #132]	; 0x84
 800932c:	2100      	movs	r1, #0
 800932e:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8009332:	940b      	str	r4, [sp, #44]	; 0x2c
 8009334:	4658      	mov	r0, fp
 8009336:	f001 fd1f 	bl	800ad78 <_Balloc>
 800933a:	2c0e      	cmp	r4, #14
 800933c:	9004      	str	r0, [sp, #16]
 800933e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8009342:	f200 80f9 	bhi.w	8009538 <_dtoa_r+0x450>
 8009346:	2d00      	cmp	r5, #0
 8009348:	f000 80f6 	beq.w	8009538 <_dtoa_r+0x450>
 800934c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8009350:	9905      	ldr	r1, [sp, #20]
 8009352:	461d      	mov	r5, r3
 8009354:	4626      	mov	r6, r4
 8009356:	2900      	cmp	r1, #0
 8009358:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 800935c:	f340 83d3 	ble.w	8009b06 <_dtoa_r+0xa1e>
 8009360:	4b9a      	ldr	r3, [pc, #616]	; (80095cc <_dtoa_r+0x4e4>)
 8009362:	f001 020f 	and.w	r2, r1, #15
 8009366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	110c      	asrs	r4, r1, #4
 8009370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009374:	06e3      	lsls	r3, r4, #27
 8009376:	f140 8488 	bpl.w	8009c8a <_dtoa_r+0xba2>
 800937a:	4b95      	ldr	r3, [pc, #596]	; (80095d0 <_dtoa_r+0x4e8>)
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009384:	f004 fc62 	bl	800dc4c <__aeabi_ddiv>
 8009388:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800938c:	f004 040f 	and.w	r4, r4, #15
 8009390:	2603      	movs	r6, #3
 8009392:	b17c      	cbz	r4, 80093b4 <_dtoa_r+0x2cc>
 8009394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009398:	4d8d      	ldr	r5, [pc, #564]	; (80095d0 <_dtoa_r+0x4e8>)
 800939a:	07e7      	lsls	r7, r4, #31
 800939c:	d504      	bpl.n	80093a8 <_dtoa_r+0x2c0>
 800939e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093a2:	3601      	adds	r6, #1
 80093a4:	f004 fb28 	bl	800d9f8 <__aeabi_dmul>
 80093a8:	1064      	asrs	r4, r4, #1
 80093aa:	f105 0508 	add.w	r5, r5, #8
 80093ae:	d1f4      	bne.n	800939a <_dtoa_r+0x2b2>
 80093b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093bc:	f004 fc46 	bl	800dc4c <__aeabi_ddiv>
 80093c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c6:	b143      	cbz	r3, 80093da <_dtoa_r+0x2f2>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4b82      	ldr	r3, [pc, #520]	; (80095d4 <_dtoa_r+0x4ec>)
 80093cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d0:	f004 fd84 	bl	800dedc <__aeabi_dcmplt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 84eb 	bne.w	8009db0 <_dtoa_r+0xcc8>
 80093da:	4630      	mov	r0, r6
 80093dc:	f004 faa2 	bl	800d924 <__aeabi_i2d>
 80093e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e4:	f004 fb08 	bl	800d9f8 <__aeabi_dmul>
 80093e8:	4b7b      	ldr	r3, [pc, #492]	; (80095d8 <_dtoa_r+0x4f0>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	f004 f94e 	bl	800d68c <__adddf3>
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	4606      	mov	r6, r0
 80093f4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 840a 	beq.w	8009c12 <_dtoa_r+0xb2a>
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	9313      	str	r3, [sp, #76]	; 0x4c
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	930e      	str	r3, [sp, #56]	; 0x38
 8009406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940a:	f004 fda5 	bl	800df58 <__aeabi_d2iz>
 800940e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009410:	4b6e      	ldr	r3, [pc, #440]	; (80095cc <_dtoa_r+0x4e4>)
 8009412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009416:	e953 3402 	ldrd	r3, r4, [r3, #-8]
 800941a:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800941e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009422:	f004 fa7f 	bl	800d924 <__aeabi_i2d>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800942e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009432:	f004 f929 	bl	800d688 <__aeabi_dsub>
 8009436:	9b04      	ldr	r3, [sp, #16]
 8009438:	4606      	mov	r6, r0
 800943a:	9807      	ldr	r0, [sp, #28]
 800943c:	1c5c      	adds	r4, r3, #1
 800943e:	b2ed      	uxtb	r5, r5
 8009440:	460f      	mov	r7, r1
 8009442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009446:	2800      	cmp	r0, #0
 8009448:	f000 8445 	beq.w	8009cd6 <_dtoa_r+0xbee>
 800944c:	2000      	movs	r0, #0
 800944e:	4963      	ldr	r1, [pc, #396]	; (80095dc <_dtoa_r+0x4f4>)
 8009450:	f004 fbfc 	bl	800dc4c <__aeabi_ddiv>
 8009454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009458:	f004 f916 	bl	800d688 <__aeabi_dsub>
 800945c:	9a04      	ldr	r2, [sp, #16]
 800945e:	463b      	mov	r3, r7
 8009460:	7015      	strb	r5, [r2, #0]
 8009462:	4632      	mov	r2, r6
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	f004 fd56 	bl	800df18 <__aeabi_dcmpgt>
 800946c:	2800      	cmp	r0, #0
 800946e:	f040 84ef 	bne.w	8009e50 <_dtoa_r+0xd68>
 8009472:	4632      	mov	r2, r6
 8009474:	463b      	mov	r3, r7
 8009476:	2000      	movs	r0, #0
 8009478:	4956      	ldr	r1, [pc, #344]	; (80095d4 <_dtoa_r+0x4ec>)
 800947a:	f004 f905 	bl	800d688 <__aeabi_dsub>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009486:	f004 fd47 	bl	800df18 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f040 84e5 	bne.w	8009e5a <_dtoa_r+0xd72>
 8009490:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009492:	2901      	cmp	r1, #1
 8009494:	d04c      	beq.n	8009530 <_dtoa_r+0x448>
 8009496:	9a04      	ldr	r2, [sp, #16]
 8009498:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800949c:	4411      	add	r1, r2
 800949e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80094a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094a6:	f8cd a008 	str.w	sl, [sp, #8]
 80094aa:	468a      	mov	sl, r1
 80094ac:	e00c      	b.n	80094c8 <_dtoa_r+0x3e0>
 80094ae:	2000      	movs	r0, #0
 80094b0:	4948      	ldr	r1, [pc, #288]	; (80095d4 <_dtoa_r+0x4ec>)
 80094b2:	f004 f8e9 	bl	800d688 <__aeabi_dsub>
 80094b6:	4642      	mov	r2, r8
 80094b8:	464b      	mov	r3, r9
 80094ba:	f004 fd0f 	bl	800dedc <__aeabi_dcmplt>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f040 84c9 	bne.w	8009e56 <_dtoa_r+0xd6e>
 80094c4:	4554      	cmp	r4, sl
 80094c6:	d02d      	beq.n	8009524 <_dtoa_r+0x43c>
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	2200      	movs	r2, #0
 80094ce:	4b44      	ldr	r3, [pc, #272]	; (80095e0 <_dtoa_r+0x4f8>)
 80094d0:	f004 fa92 	bl	800d9f8 <__aeabi_dmul>
 80094d4:	2200      	movs	r2, #0
 80094d6:	4b42      	ldr	r3, [pc, #264]	; (80095e0 <_dtoa_r+0x4f8>)
 80094d8:	4680      	mov	r8, r0
 80094da:	4689      	mov	r9, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f004 fa8a 	bl	800d9f8 <__aeabi_dmul>
 80094e4:	460f      	mov	r7, r1
 80094e6:	4606      	mov	r6, r0
 80094e8:	f004 fd36 	bl	800df58 <__aeabi_d2iz>
 80094ec:	4605      	mov	r5, r0
 80094ee:	f004 fa19 	bl	800d924 <__aeabi_i2d>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4630      	mov	r0, r6
 80094f8:	4639      	mov	r1, r7
 80094fa:	f004 f8c5 	bl	800d688 <__aeabi_dsub>
 80094fe:	3530      	adds	r5, #48	; 0x30
 8009500:	b2ed      	uxtb	r5, r5
 8009502:	4642      	mov	r2, r8
 8009504:	464b      	mov	r3, r9
 8009506:	f804 5b01 	strb.w	r5, [r4], #1
 800950a:	4606      	mov	r6, r0
 800950c:	460f      	mov	r7, r1
 800950e:	f004 fce5 	bl	800dedc <__aeabi_dcmplt>
 8009512:	4632      	mov	r2, r6
 8009514:	463b      	mov	r3, r7
 8009516:	2800      	cmp	r0, #0
 8009518:	d0c9      	beq.n	80094ae <_dtoa_r+0x3c6>
 800951a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800951c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	e219      	b.n	8009958 <_dtoa_r+0x870>
 8009524:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009528:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800952c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009530:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009534:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800953a:	2b00      	cmp	r3, #0
 800953c:	f2c0 80ad 	blt.w	800969a <_dtoa_r+0x5b2>
 8009540:	9a05      	ldr	r2, [sp, #20]
 8009542:	2a0e      	cmp	r2, #14
 8009544:	f300 80a9 	bgt.w	800969a <_dtoa_r+0x5b2>
 8009548:	4b20      	ldr	r3, [pc, #128]	; (80095cc <_dtoa_r+0x4e4>)
 800954a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800954e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009554:	2b00      	cmp	r3, #0
 8009556:	f2c0 82b3 	blt.w	8009ac0 <_dtoa_r+0x9d8>
 800955a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800955e:	4642      	mov	r2, r8
 8009560:	464b      	mov	r3, r9
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	f004 fb71 	bl	800dc4c <__aeabi_ddiv>
 800956a:	f004 fcf5 	bl	800df58 <__aeabi_d2iz>
 800956e:	4605      	mov	r5, r0
 8009570:	f004 f9d8 	bl	800d924 <__aeabi_i2d>
 8009574:	4642      	mov	r2, r8
 8009576:	464b      	mov	r3, r9
 8009578:	f004 fa3e 	bl	800d9f8 <__aeabi_dmul>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4630      	mov	r0, r6
 8009582:	4639      	mov	r1, r7
 8009584:	f004 f880 	bl	800d688 <__aeabi_dsub>
 8009588:	9a04      	ldr	r2, [sp, #16]
 800958a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800958e:	7013      	strb	r3, [r2, #0]
 8009590:	9b06      	ldr	r3, [sp, #24]
 8009592:	2b01      	cmp	r3, #1
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	f102 0401 	add.w	r4, r2, #1
 800959c:	d053      	beq.n	8009646 <_dtoa_r+0x55e>
 800959e:	2200      	movs	r2, #0
 80095a0:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <_dtoa_r+0x4f8>)
 80095a2:	f004 fa29 	bl	800d9f8 <__aeabi_dmul>
 80095a6:	2200      	movs	r2, #0
 80095a8:	2300      	movs	r3, #0
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	f004 fc8b 	bl	800dec8 <__aeabi_dcmpeq>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f040 81d0 	bne.w	8009958 <_dtoa_r+0x870>
 80095b8:	f8cd a008 	str.w	sl, [sp, #8]
 80095bc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80095c0:	f8cd b018 	str.w	fp, [sp, #24]
 80095c4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80095c8:	e017      	b.n	80095fa <_dtoa_r+0x512>
 80095ca:	bf00      	nop
 80095cc:	0800e6c0 	.word	0x0800e6c0
 80095d0:	0800e698 	.word	0x0800e698
 80095d4:	3ff00000 	.word	0x3ff00000
 80095d8:	401c0000 	.word	0x401c0000
 80095dc:	3fe00000 	.word	0x3fe00000
 80095e0:	40240000 	.word	0x40240000
 80095e4:	f004 fa08 	bl	800d9f8 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f004 fc6a 	bl	800dec8 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f040 8331 	bne.w	8009c5c <_dtoa_r+0xb74>
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f004 fb23 	bl	800dc4c <__aeabi_ddiv>
 8009606:	f004 fca7 	bl	800df58 <__aeabi_d2iz>
 800960a:	4605      	mov	r5, r0
 800960c:	f004 f98a 	bl	800d924 <__aeabi_i2d>
 8009610:	4642      	mov	r2, r8
 8009612:	464b      	mov	r3, r9
 8009614:	f004 f9f0 	bl	800d9f8 <__aeabi_dmul>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4630      	mov	r0, r6
 800961e:	4639      	mov	r1, r7
 8009620:	f004 f832 	bl	800d688 <__aeabi_dsub>
 8009624:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8009628:	f804 cb01 	strb.w	ip, [r4], #1
 800962c:	eba4 0c0b 	sub.w	ip, r4, fp
 8009630:	45e2      	cmp	sl, ip
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	4bb8      	ldr	r3, [pc, #736]	; (800991c <_dtoa_r+0x834>)
 800963c:	d1d2      	bne.n	80095e4 <_dtoa_r+0x4fc>
 800963e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009642:	f8dd b018 	ldr.w	fp, [sp, #24]
 8009646:	4632      	mov	r2, r6
 8009648:	463b      	mov	r3, r7
 800964a:	4630      	mov	r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	f004 f81d 	bl	800d68c <__adddf3>
 8009652:	4642      	mov	r2, r8
 8009654:	464b      	mov	r3, r9
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	f004 fc5d 	bl	800df18 <__aeabi_dcmpgt>
 800965e:	b958      	cbnz	r0, 8009678 <_dtoa_r+0x590>
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f004 fc2e 	bl	800dec8 <__aeabi_dcmpeq>
 800966c:	2800      	cmp	r0, #0
 800966e:	f000 8173 	beq.w	8009958 <_dtoa_r+0x870>
 8009672:	07eb      	lsls	r3, r5, #31
 8009674:	f140 8170 	bpl.w	8009958 <_dtoa_r+0x870>
 8009678:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800967c:	9a04      	ldr	r2, [sp, #16]
 800967e:	e005      	b.n	800968c <_dtoa_r+0x5a4>
 8009680:	429a      	cmp	r2, r3
 8009682:	f000 831e 	beq.w	8009cc2 <_dtoa_r+0xbda>
 8009686:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800968a:	461c      	mov	r4, r3
 800968c:	2d39      	cmp	r5, #57	; 0x39
 800968e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8009692:	d0f5      	beq.n	8009680 <_dtoa_r+0x598>
 8009694:	3501      	adds	r5, #1
 8009696:	701d      	strb	r5, [r3, #0]
 8009698:	e15e      	b.n	8009958 <_dtoa_r+0x870>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	b392      	cbz	r2, 8009704 <_dtoa_r+0x61c>
 800969e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096a0:	2a01      	cmp	r2, #1
 80096a2:	f340 8202 	ble.w	8009aaa <_dtoa_r+0x9c2>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	1e5f      	subs	r7, r3, #1
 80096aa:	9b08      	ldr	r3, [sp, #32]
 80096ac:	42bb      	cmp	r3, r7
 80096ae:	f2c0 82da 	blt.w	8009c66 <_dtoa_r+0xb7e>
 80096b2:	1bdf      	subs	r7, r3, r7
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f2c0 82f9 	blt.w	8009cae <_dtoa_r+0xbc6>
 80096bc:	464c      	mov	r4, r9
 80096be:	4498      	add	r8, r3
 80096c0:	4499      	add	r9, r3
 80096c2:	2101      	movs	r1, #1
 80096c4:	4658      	mov	r0, fp
 80096c6:	f001 fc63 	bl	800af90 <__i2b>
 80096ca:	4605      	mov	r5, r0
 80096cc:	e01d      	b.n	800970a <_dtoa_r+0x622>
 80096ce:	2301      	movs	r3, #1
 80096d0:	930a      	str	r3, [sp, #40]	; 0x28
 80096d2:	e5ad      	b.n	8009230 <_dtoa_r+0x148>
 80096d4:	9b05      	ldr	r3, [sp, #20]
 80096d6:	eba9 0903 	sub.w	r9, r9, r3
 80096da:	425b      	negs	r3, r3
 80096dc:	9308      	str	r3, [sp, #32]
 80096de:	2300      	movs	r3, #0
 80096e0:	9309      	str	r3, [sp, #36]	; 0x24
 80096e2:	e5b7      	b.n	8009254 <_dtoa_r+0x16c>
 80096e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80096e8:	4640      	mov	r0, r8
 80096ea:	f004 f91b 	bl	800d924 <__aeabi_i2d>
 80096ee:	4632      	mov	r2, r6
 80096f0:	463b      	mov	r3, r7
 80096f2:	f004 fbe9 	bl	800dec8 <__aeabi_dcmpeq>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f47f ad86 	bne.w	8009208 <_dtoa_r+0x120>
 80096fc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	e581      	b.n	8009208 <_dtoa_r+0x120>
 8009704:	9f08      	ldr	r7, [sp, #32]
 8009706:	9d07      	ldr	r5, [sp, #28]
 8009708:	464c      	mov	r4, r9
 800970a:	2c00      	cmp	r4, #0
 800970c:	dd0b      	ble.n	8009726 <_dtoa_r+0x63e>
 800970e:	f1b8 0f00 	cmp.w	r8, #0
 8009712:	dd08      	ble.n	8009726 <_dtoa_r+0x63e>
 8009714:	4544      	cmp	r4, r8
 8009716:	4623      	mov	r3, r4
 8009718:	bfa8      	it	ge
 800971a:	4643      	movge	r3, r8
 800971c:	eba9 0903 	sub.w	r9, r9, r3
 8009720:	1ae4      	subs	r4, r4, r3
 8009722:	eba8 0803 	sub.w	r8, r8, r3
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	b16b      	cbz	r3, 8009746 <_dtoa_r+0x65e>
 800972a:	9a07      	ldr	r2, [sp, #28]
 800972c:	2a00      	cmp	r2, #0
 800972e:	f000 828e 	beq.w	8009c4e <_dtoa_r+0xb66>
 8009732:	1bde      	subs	r6, r3, r7
 8009734:	2f00      	cmp	r7, #0
 8009736:	f040 818e 	bne.w	8009a56 <_dtoa_r+0x96e>
 800973a:	4651      	mov	r1, sl
 800973c:	4632      	mov	r2, r6
 800973e:	4658      	mov	r0, fp
 8009740:	f001 fcd6 	bl	800b0f0 <__pow5mult>
 8009744:	4682      	mov	sl, r0
 8009746:	2101      	movs	r1, #1
 8009748:	4658      	mov	r0, fp
 800974a:	f001 fc21 	bl	800af90 <__i2b>
 800974e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009750:	4606      	mov	r6, r0
 8009752:	2a00      	cmp	r2, #0
 8009754:	f040 8118 	bne.w	8009988 <_dtoa_r+0x8a0>
 8009758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800975a:	2b01      	cmp	r3, #1
 800975c:	f340 8160 	ble.w	8009a20 <_dtoa_r+0x938>
 8009760:	2001      	movs	r0, #1
 8009762:	4440      	add	r0, r8
 8009764:	f010 001f 	ands.w	r0, r0, #31
 8009768:	f000 8109 	beq.w	800997e <_dtoa_r+0x896>
 800976c:	f1c0 0320 	rsb	r3, r0, #32
 8009770:	2b04      	cmp	r3, #4
 8009772:	f340 83a6 	ble.w	8009ec2 <_dtoa_r+0xdda>
 8009776:	f1c0 001c 	rsb	r0, r0, #28
 800977a:	4481      	add	r9, r0
 800977c:	4404      	add	r4, r0
 800977e:	4480      	add	r8, r0
 8009780:	f1b9 0f00 	cmp.w	r9, #0
 8009784:	dd05      	ble.n	8009792 <_dtoa_r+0x6aa>
 8009786:	4651      	mov	r1, sl
 8009788:	464a      	mov	r2, r9
 800978a:	4658      	mov	r0, fp
 800978c:	f001 fd00 	bl	800b190 <__lshift>
 8009790:	4682      	mov	sl, r0
 8009792:	f1b8 0f00 	cmp.w	r8, #0
 8009796:	dd05      	ble.n	80097a4 <_dtoa_r+0x6bc>
 8009798:	4631      	mov	r1, r6
 800979a:	4642      	mov	r2, r8
 800979c:	4658      	mov	r0, fp
 800979e:	f001 fcf7 	bl	800b190 <__lshift>
 80097a2:	4606      	mov	r6, r0
 80097a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d173      	bne.n	8009892 <_dtoa_r+0x7aa>
 80097aa:	9b06      	ldr	r3, [sp, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f340 8209 	ble.w	8009bc4 <_dtoa_r+0xadc>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8085 	beq.w	80098c4 <_dtoa_r+0x7dc>
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	f300 8160 	bgt.w	8009a80 <_dtoa_r+0x998>
 80097c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 81c8 	bne.w	8009b58 <_dtoa_r+0xa70>
 80097c8:	46a8      	mov	r8, r5
 80097ca:	9a02      	ldr	r2, [sp, #8]
 80097cc:	9f04      	ldr	r7, [sp, #16]
 80097ce:	f002 0201 	and.w	r2, r2, #1
 80097d2:	9209      	str	r2, [sp, #36]	; 0x24
 80097d4:	9a06      	ldr	r2, [sp, #24]
 80097d6:	1e7b      	subs	r3, r7, #1
 80097d8:	441a      	add	r2, r3
 80097da:	9207      	str	r2, [sp, #28]
 80097dc:	4631      	mov	r1, r6
 80097de:	4650      	mov	r0, sl
 80097e0:	f7ff fbf0 	bl	8008fc4 <quorem>
 80097e4:	4629      	mov	r1, r5
 80097e6:	4681      	mov	r9, r0
 80097e8:	9008      	str	r0, [sp, #32]
 80097ea:	4650      	mov	r0, sl
 80097ec:	f001 fd26 	bl	800b23c <__mcmp>
 80097f0:	4631      	mov	r1, r6
 80097f2:	9002      	str	r0, [sp, #8]
 80097f4:	4642      	mov	r2, r8
 80097f6:	4658      	mov	r0, fp
 80097f8:	f001 fd3c 	bl	800b274 <__mdiff>
 80097fc:	68c3      	ldr	r3, [r0, #12]
 80097fe:	4604      	mov	r4, r0
 8009800:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8009804:	4601      	mov	r1, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	f040 81d7 	bne.w	8009bba <_dtoa_r+0xad2>
 800980c:	4650      	mov	r0, sl
 800980e:	f001 fd15 	bl	800b23c <__mcmp>
 8009812:	4621      	mov	r1, r4
 8009814:	9006      	str	r0, [sp, #24]
 8009816:	4658      	mov	r0, fp
 8009818:	f001 fad4 	bl	800adc4 <_Bfree>
 800981c:	9b06      	ldr	r3, [sp, #24]
 800981e:	b933      	cbnz	r3, 800982e <_dtoa_r+0x746>
 8009820:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009822:	b922      	cbnz	r2, 800982e <_dtoa_r+0x746>
 8009824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 831b 	beq.w	8009e62 <_dtoa_r+0xd7a>
 800982c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800982e:	9a02      	ldr	r2, [sp, #8]
 8009830:	2a00      	cmp	r2, #0
 8009832:	f2c0 8220 	blt.w	8009c76 <_dtoa_r+0xb8e>
 8009836:	d105      	bne.n	8009844 <_dtoa_r+0x75c>
 8009838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800983a:	b91a      	cbnz	r2, 8009844 <_dtoa_r+0x75c>
 800983c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800983e:	2a00      	cmp	r2, #0
 8009840:	f000 8219 	beq.w	8009c76 <_dtoa_r+0xb8e>
 8009844:	2b00      	cmp	r3, #0
 8009846:	f107 0401 	add.w	r4, r7, #1
 800984a:	f300 8225 	bgt.w	8009c98 <_dtoa_r+0xbb0>
 800984e:	9b07      	ldr	r3, [sp, #28]
 8009850:	f887 9000 	strb.w	r9, [r7]
 8009854:	42bb      	cmp	r3, r7
 8009856:	f000 822e 	beq.w	8009cb6 <_dtoa_r+0xbce>
 800985a:	4651      	mov	r1, sl
 800985c:	2300      	movs	r3, #0
 800985e:	220a      	movs	r2, #10
 8009860:	4658      	mov	r0, fp
 8009862:	f001 fab9 	bl	800add8 <__multadd>
 8009866:	4545      	cmp	r5, r8
 8009868:	4682      	mov	sl, r0
 800986a:	4629      	mov	r1, r5
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	f04f 020a 	mov.w	r2, #10
 8009874:	4658      	mov	r0, fp
 8009876:	f000 819a 	beq.w	8009bae <_dtoa_r+0xac6>
 800987a:	f001 faad 	bl	800add8 <__multadd>
 800987e:	4641      	mov	r1, r8
 8009880:	4605      	mov	r5, r0
 8009882:	2300      	movs	r3, #0
 8009884:	220a      	movs	r2, #10
 8009886:	4658      	mov	r0, fp
 8009888:	f001 faa6 	bl	800add8 <__multadd>
 800988c:	4627      	mov	r7, r4
 800988e:	4680      	mov	r8, r0
 8009890:	e7a4      	b.n	80097dc <_dtoa_r+0x6f4>
 8009892:	4631      	mov	r1, r6
 8009894:	4650      	mov	r0, sl
 8009896:	f001 fcd1 	bl	800b23c <__mcmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	da85      	bge.n	80097aa <_dtoa_r+0x6c2>
 800989e:	9f05      	ldr	r7, [sp, #20]
 80098a0:	4651      	mov	r1, sl
 80098a2:	2300      	movs	r3, #0
 80098a4:	220a      	movs	r2, #10
 80098a6:	4658      	mov	r0, fp
 80098a8:	3f01      	subs	r7, #1
 80098aa:	9705      	str	r7, [sp, #20]
 80098ac:	f001 fa94 	bl	800add8 <__multadd>
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	4682      	mov	sl, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 82e4 	bne.w	8009e82 <_dtoa_r+0xd9a>
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f340 82ec 	ble.w	8009e9a <_dtoa_r+0xdb2>
 80098c2:	9306      	str	r3, [sp, #24]
 80098c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80098c8:	9f06      	ldr	r7, [sp, #24]
 80098ca:	4644      	mov	r4, r8
 80098cc:	e002      	b.n	80098d4 <_dtoa_r+0x7ec>
 80098ce:	f001 fa83 	bl	800add8 <__multadd>
 80098d2:	4682      	mov	sl, r0
 80098d4:	4631      	mov	r1, r6
 80098d6:	4650      	mov	r0, sl
 80098d8:	f7ff fb74 	bl	8008fc4 <quorem>
 80098dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098e0:	f804 9b01 	strb.w	r9, [r4], #1
 80098e4:	eba4 0308 	sub.w	r3, r4, r8
 80098e8:	429f      	cmp	r7, r3
 80098ea:	f04f 020a 	mov.w	r2, #10
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	4651      	mov	r1, sl
 80098f4:	4658      	mov	r0, fp
 80098f6:	dcea      	bgt.n	80098ce <_dtoa_r+0x7e6>
 80098f8:	2300      	movs	r3, #0
 80098fa:	9302      	str	r3, [sp, #8]
 80098fc:	4651      	mov	r1, sl
 80098fe:	2201      	movs	r2, #1
 8009900:	4658      	mov	r0, fp
 8009902:	f001 fc45 	bl	800b190 <__lshift>
 8009906:	4631      	mov	r1, r6
 8009908:	4682      	mov	sl, r0
 800990a:	f001 fc97 	bl	800b23c <__mcmp>
 800990e:	2800      	cmp	r0, #0
 8009910:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8009914:	f340 80bb 	ble.w	8009a8e <_dtoa_r+0x9a6>
 8009918:	9904      	ldr	r1, [sp, #16]
 800991a:	e007      	b.n	800992c <_dtoa_r+0x844>
 800991c:	40240000 	.word	0x40240000
 8009920:	4299      	cmp	r1, r3
 8009922:	f000 815c 	beq.w	8009bde <_dtoa_r+0xaf6>
 8009926:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800992a:	461c      	mov	r4, r3
 800992c:	2a39      	cmp	r2, #57	; 0x39
 800992e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8009932:	d0f5      	beq.n	8009920 <_dtoa_r+0x838>
 8009934:	3201      	adds	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	4631      	mov	r1, r6
 800993a:	4658      	mov	r0, fp
 800993c:	f001 fa42 	bl	800adc4 <_Bfree>
 8009940:	b155      	cbz	r5, 8009958 <_dtoa_r+0x870>
 8009942:	9902      	ldr	r1, [sp, #8]
 8009944:	b121      	cbz	r1, 8009950 <_dtoa_r+0x868>
 8009946:	42a9      	cmp	r1, r5
 8009948:	d002      	beq.n	8009950 <_dtoa_r+0x868>
 800994a:	4658      	mov	r0, fp
 800994c:	f001 fa3a 	bl	800adc4 <_Bfree>
 8009950:	4629      	mov	r1, r5
 8009952:	4658      	mov	r0, fp
 8009954:	f001 fa36 	bl	800adc4 <_Bfree>
 8009958:	4651      	mov	r1, sl
 800995a:	4658      	mov	r0, fp
 800995c:	f001 fa32 	bl	800adc4 <_Bfree>
 8009960:	2200      	movs	r2, #0
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	7022      	strb	r2, [r4, #0]
 8009966:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009968:	3301      	adds	r3, #1
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800996e:	2b00      	cmp	r3, #0
 8009970:	f43f abf2 	beq.w	8009158 <_dtoa_r+0x70>
 8009974:	9804      	ldr	r0, [sp, #16]
 8009976:	601c      	str	r4, [r3, #0]
 8009978:	b017      	add	sp, #92	; 0x5c
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	201c      	movs	r0, #28
 8009980:	4481      	add	r9, r0
 8009982:	4404      	add	r4, r0
 8009984:	4480      	add	r8, r0
 8009986:	e6fb      	b.n	8009780 <_dtoa_r+0x698>
 8009988:	4601      	mov	r1, r0
 800998a:	4658      	mov	r0, fp
 800998c:	f001 fbb0 	bl	800b0f0 <__pow5mult>
 8009990:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009992:	2b01      	cmp	r3, #1
 8009994:	4606      	mov	r6, r0
 8009996:	f340 80f3 	ble.w	8009b80 <_dtoa_r+0xa98>
 800999a:	2300      	movs	r3, #0
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	6933      	ldr	r3, [r6, #16]
 80099a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099a4:	6918      	ldr	r0, [r3, #16]
 80099a6:	f001 faa3 	bl	800aef0 <__hi0bits>
 80099aa:	f1c0 0020 	rsb	r0, r0, #32
 80099ae:	e6d8      	b.n	8009762 <_dtoa_r+0x67a>
 80099b0:	900a      	str	r0, [sp, #40]	; 0x28
 80099b2:	e43d      	b.n	8009230 <_dtoa_r+0x148>
 80099b4:	2501      	movs	r5, #1
 80099b6:	e456      	b.n	8009266 <_dtoa_r+0x17e>
 80099b8:	f1c3 0620 	rsb	r6, r3, #32
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	fa03 f006 	lsl.w	r0, r3, r6
 80099c2:	f7ff bbeb 	b.w	800919c <_dtoa_r+0xb4>
 80099c6:	2300      	movs	r3, #0
 80099c8:	9307      	str	r3, [sp, #28]
 80099ca:	9b05      	ldr	r3, [sp, #20]
 80099cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099ce:	4413      	add	r3, r2
 80099d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d2:	3301      	adds	r3, #1
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	461e      	mov	r6, r3
 80099d8:	9306      	str	r3, [sp, #24]
 80099da:	bfb8      	it	lt
 80099dc:	2601      	movlt	r6, #1
 80099de:	2100      	movs	r1, #0
 80099e0:	2e17      	cmp	r6, #23
 80099e2:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 80099e6:	9c06      	ldr	r4, [sp, #24]
 80099e8:	f77f aca4 	ble.w	8009334 <_dtoa_r+0x24c>
 80099ec:	2201      	movs	r2, #1
 80099ee:	2304      	movs	r3, #4
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	f103 0014 	add.w	r0, r3, #20
 80099f6:	42b0      	cmp	r0, r6
 80099f8:	4611      	mov	r1, r2
 80099fa:	f102 0201 	add.w	r2, r2, #1
 80099fe:	d9f7      	bls.n	80099f0 <_dtoa_r+0x908>
 8009a00:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8009a04:	e496      	b.n	8009334 <_dtoa_r+0x24c>
 8009a06:	2300      	movs	r3, #0
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f340 80ed 	ble.w	8009bec <_dtoa_r+0xb04>
 8009a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a14:	9306      	str	r3, [sp, #24]
 8009a16:	461e      	mov	r6, r3
 8009a18:	e7e1      	b.n	80099de <_dtoa_r+0x8f6>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	9307      	str	r3, [sp, #28]
 8009a1e:	e7f4      	b.n	8009a0a <_dtoa_r+0x922>
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f47f ae9c 	bne.w	8009760 <_dtoa_r+0x678>
 8009a28:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009a2c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f040 8199 	bne.w	8009d68 <_dtoa_r+0xc80>
 8009a36:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009a3a:	0d1b      	lsrs	r3, r3, #20
 8009a3c:	051b      	lsls	r3, r3, #20
 8009a3e:	b123      	cbz	r3, 8009a4a <_dtoa_r+0x962>
 8009a40:	f109 0901 	add.w	r9, r9, #1
 8009a44:	f108 0801 	add.w	r8, r8, #1
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4e:	2a00      	cmp	r2, #0
 8009a50:	f43f ae86 	beq.w	8009760 <_dtoa_r+0x678>
 8009a54:	e7a3      	b.n	800999e <_dtoa_r+0x8b6>
 8009a56:	463a      	mov	r2, r7
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4658      	mov	r0, fp
 8009a5c:	f001 fb48 	bl	800b0f0 <__pow5mult>
 8009a60:	4652      	mov	r2, sl
 8009a62:	4601      	mov	r1, r0
 8009a64:	4605      	mov	r5, r0
 8009a66:	4658      	mov	r0, fp
 8009a68:	f001 fa9c 	bl	800afa4 <__multiply>
 8009a6c:	4651      	mov	r1, sl
 8009a6e:	4607      	mov	r7, r0
 8009a70:	4658      	mov	r0, fp
 8009a72:	f001 f9a7 	bl	800adc4 <_Bfree>
 8009a76:	46ba      	mov	sl, r7
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	f43f ae64 	beq.w	8009746 <_dtoa_r+0x65e>
 8009a7e:	e65c      	b.n	800973a <_dtoa_r+0x652>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4622      	mov	r2, r4
 8009a84:	4658      	mov	r0, fp
 8009a86:	f001 fb83 	bl	800b190 <__lshift>
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	e698      	b.n	80097c0 <_dtoa_r+0x6d8>
 8009a8e:	d107      	bne.n	8009aa0 <_dtoa_r+0x9b8>
 8009a90:	f019 0f01 	tst.w	r9, #1
 8009a94:	f47f af40 	bne.w	8009918 <_dtoa_r+0x830>
 8009a98:	e002      	b.n	8009aa0 <_dtoa_r+0x9b8>
 8009a9a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8009a9e:	461c      	mov	r4, r3
 8009aa0:	2a30      	cmp	r2, #48	; 0x30
 8009aa2:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8009aa6:	d0f8      	beq.n	8009a9a <_dtoa_r+0x9b2>
 8009aa8:	e746      	b.n	8009938 <_dtoa_r+0x850>
 8009aaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f000 8153 	beq.w	8009d58 <_dtoa_r+0xc70>
 8009ab2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ab6:	464c      	mov	r4, r9
 8009ab8:	4498      	add	r8, r3
 8009aba:	4499      	add	r9, r3
 8009abc:	9f08      	ldr	r7, [sp, #32]
 8009abe:	e600      	b.n	80096c2 <_dtoa_r+0x5da>
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f73f ad49 	bgt.w	800955a <_dtoa_r+0x472>
 8009ac8:	f040 80bb 	bne.w	8009c42 <_dtoa_r+0xb5a>
 8009acc:	2200      	movs	r2, #0
 8009ace:	4bb2      	ldr	r3, [pc, #712]	; (8009d98 <_dtoa_r+0xcb0>)
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	f003 ff90 	bl	800d9f8 <__aeabi_dmul>
 8009ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009adc:	f004 fa12 	bl	800df04 <__aeabi_dcmpge>
 8009ae0:	9e06      	ldr	r6, [sp, #24]
 8009ae2:	4635      	mov	r5, r6
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d175      	bne.n	8009bd4 <_dtoa_r+0xaec>
 8009ae8:	9a05      	ldr	r2, [sp, #20]
 8009aea:	3201      	adds	r2, #1
 8009aec:	9205      	str	r2, [sp, #20]
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	2331      	movs	r3, #49	; 0x31
 8009af2:	7013      	strb	r3, [r2, #0]
 8009af4:	1c54      	adds	r4, r2, #1
 8009af6:	4631      	mov	r1, r6
 8009af8:	4658      	mov	r0, fp
 8009afa:	f001 f963 	bl	800adc4 <_Bfree>
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	f47f af26 	bne.w	8009950 <_dtoa_r+0x868>
 8009b04:	e728      	b.n	8009958 <_dtoa_r+0x870>
 8009b06:	f000 813f 	beq.w	8009d88 <_dtoa_r+0xca0>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	425c      	negs	r4, r3
 8009b0e:	4ba3      	ldr	r3, [pc, #652]	; (8009d9c <_dtoa_r+0xcb4>)
 8009b10:	f004 020f 	and.w	r2, r4, #15
 8009b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b20:	f003 ff6a 	bl	800d9f8 <__aeabi_dmul>
 8009b24:	1124      	asrs	r4, r4, #4
 8009b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2a:	f000 81bb 	beq.w	8009ea4 <_dtoa_r+0xdbc>
 8009b2e:	4d9c      	ldr	r5, [pc, #624]	; (8009da0 <_dtoa_r+0xcb8>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	2602      	movs	r6, #2
 8009b34:	07e2      	lsls	r2, r4, #31
 8009b36:	d505      	bpl.n	8009b44 <_dtoa_r+0xa5c>
 8009b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b3c:	f003 ff5c 	bl	800d9f8 <__aeabi_dmul>
 8009b40:	3601      	adds	r6, #1
 8009b42:	2301      	movs	r3, #1
 8009b44:	1064      	asrs	r4, r4, #1
 8009b46:	f105 0508 	add.w	r5, r5, #8
 8009b4a:	d1f3      	bne.n	8009b34 <_dtoa_r+0xa4c>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f43f ac39 	beq.w	80093c4 <_dtoa_r+0x2dc>
 8009b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b56:	e435      	b.n	80093c4 <_dtoa_r+0x2dc>
 8009b58:	6869      	ldr	r1, [r5, #4]
 8009b5a:	4658      	mov	r0, fp
 8009b5c:	f001 f90c 	bl	800ad78 <_Balloc>
 8009b60:	692b      	ldr	r3, [r5, #16]
 8009b62:	3302      	adds	r3, #2
 8009b64:	009a      	lsls	r2, r3, #2
 8009b66:	4604      	mov	r4, r0
 8009b68:	f105 010c 	add.w	r1, r5, #12
 8009b6c:	300c      	adds	r0, #12
 8009b6e:	f7fd fab7 	bl	80070e0 <memcpy>
 8009b72:	4621      	mov	r1, r4
 8009b74:	2201      	movs	r2, #1
 8009b76:	4658      	mov	r0, fp
 8009b78:	f001 fb0a 	bl	800b190 <__lshift>
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	e624      	b.n	80097ca <_dtoa_r+0x6e2>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f43f af50 	beq.w	8009a28 <_dtoa_r+0x940>
 8009b88:	e707      	b.n	800999a <_dtoa_r+0x8b2>
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 8009b90:	4621      	mov	r1, r4
 8009b92:	4658      	mov	r0, fp
 8009b94:	f001 f8f0 	bl	800ad78 <_Balloc>
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b9e:	9306      	str	r3, [sp, #24]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9004      	str	r0, [sp, #16]
 8009ba4:	9421      	str	r4, [sp, #132]	; 0x84
 8009ba6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	e4c4      	b.n	8009538 <_dtoa_r+0x450>
 8009bae:	f001 f913 	bl	800add8 <__multadd>
 8009bb2:	4627      	mov	r7, r4
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	e610      	b.n	80097dc <_dtoa_r+0x6f4>
 8009bba:	4658      	mov	r0, fp
 8009bbc:	f001 f902 	bl	800adc4 <_Bfree>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e634      	b.n	800982e <_dtoa_r+0x746>
 8009bc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	f77f adf3 	ble.w	80097b2 <_dtoa_r+0x6ca>
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80cc 	beq.w	8009d6c <_dtoa_r+0xc84>
 8009bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bd6:	9c04      	ldr	r4, [sp, #16]
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	e78b      	b.n	8009af6 <_dtoa_r+0xa0e>
 8009bde:	9a05      	ldr	r2, [sp, #20]
 8009be0:	3201      	adds	r2, #1
 8009be2:	9205      	str	r2, [sp, #20]
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	2331      	movs	r3, #49	; 0x31
 8009be8:	7013      	strb	r3, [r2, #0]
 8009bea:	e6a5      	b.n	8009938 <_dtoa_r+0x850>
 8009bec:	2401      	movs	r4, #1
 8009bee:	9421      	str	r4, [sp, #132]	; 0x84
 8009bf0:	9406      	str	r4, [sp, #24]
 8009bf2:	f7ff bb9b 	b.w	800932c <_dtoa_r+0x244>
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f003 fe94 	bl	800d924 <__aeabi_i2d>
 8009bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c00:	f003 fefa 	bl	800d9f8 <__aeabi_dmul>
 8009c04:	2200      	movs	r2, #0
 8009c06:	4b67      	ldr	r3, [pc, #412]	; (8009da4 <_dtoa_r+0xcbc>)
 8009c08:	f003 fd40 	bl	800d68c <__adddf3>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8009c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	4b5f      	ldr	r3, [pc, #380]	; (8009d98 <_dtoa_r+0xcb0>)
 8009c1a:	f003 fd35 	bl	800d688 <__aeabi_dsub>
 8009c1e:	4632      	mov	r2, r6
 8009c20:	463b      	mov	r3, r7
 8009c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c26:	f004 f977 	bl	800df18 <__aeabi_dcmpgt>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d146      	bne.n	8009cbc <_dtoa_r+0xbd4>
 8009c2e:	4632      	mov	r2, r6
 8009c30:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c38:	f004 f950 	bl	800dedc <__aeabi_dcmplt>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f43f ac77 	beq.w	8009530 <_dtoa_r+0x448>
 8009c42:	2600      	movs	r6, #0
 8009c44:	4635      	mov	r5, r6
 8009c46:	e7c5      	b.n	8009bd4 <_dtoa_r+0xaec>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9307      	str	r3, [sp, #28]
 8009c4c:	e6bd      	b.n	80099ca <_dtoa_r+0x8e2>
 8009c4e:	4651      	mov	r1, sl
 8009c50:	9a08      	ldr	r2, [sp, #32]
 8009c52:	4658      	mov	r0, fp
 8009c54:	f001 fa4c 	bl	800b0f0 <__pow5mult>
 8009c58:	4682      	mov	sl, r0
 8009c5a:	e574      	b.n	8009746 <_dtoa_r+0x65e>
 8009c5c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009c60:	f8dd b018 	ldr.w	fp, [sp, #24]
 8009c64:	e678      	b.n	8009958 <_dtoa_r+0x870>
 8009c66:	9b08      	ldr	r3, [sp, #32]
 8009c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c6a:	1afb      	subs	r3, r7, r3
 8009c6c:	441a      	add	r2, r3
 8009c6e:	e9cd 7208 	strd	r7, r2, [sp, #32]
 8009c72:	2700      	movs	r7, #0
 8009c74:	e51e      	b.n	80096b4 <_dtoa_r+0x5cc>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f107 0401 	add.w	r4, r7, #1
 8009c7c:	f300 80bc 	bgt.w	8009df8 <_dtoa_r+0xd10>
 8009c80:	9502      	str	r5, [sp, #8]
 8009c82:	f887 9000 	strb.w	r9, [r7]
 8009c86:	4645      	mov	r5, r8
 8009c88:	e656      	b.n	8009938 <_dtoa_r+0x850>
 8009c8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c8e:	2602      	movs	r6, #2
 8009c90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009c94:	f7ff bb7d 	b.w	8009392 <_dtoa_r+0x2aa>
 8009c98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c9c:	f000 80be 	beq.w	8009e1c <_dtoa_r+0xd34>
 8009ca0:	f109 0901 	add.w	r9, r9, #1
 8009ca4:	9502      	str	r5, [sp, #8]
 8009ca6:	f887 9000 	strb.w	r9, [r7]
 8009caa:	4645      	mov	r5, r8
 8009cac:	e644      	b.n	8009938 <_dtoa_r+0x850>
 8009cae:	9b06      	ldr	r3, [sp, #24]
 8009cb0:	eba9 0403 	sub.w	r4, r9, r3
 8009cb4:	e505      	b.n	80096c2 <_dtoa_r+0x5da>
 8009cb6:	9502      	str	r5, [sp, #8]
 8009cb8:	4645      	mov	r5, r8
 8009cba:	e61f      	b.n	80098fc <_dtoa_r+0x814>
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	4635      	mov	r5, r6
 8009cc0:	e712      	b.n	8009ae8 <_dtoa_r+0xa00>
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	2330      	movs	r3, #48	; 0x30
 8009cc6:	7013      	strb	r3, [r2, #0]
 8009cc8:	9b05      	ldr	r3, [sp, #20]
 8009cca:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	e4de      	b.n	8009694 <_dtoa_r+0x5ac>
 8009cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cda:	f003 fe8d 	bl	800d9f8 <__aeabi_dmul>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	701d      	strb	r5, [r3, #0]
 8009ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cea:	d023      	beq.n	8009d34 <_dtoa_r+0xc4c>
 8009cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cee:	9a04      	ldr	r2, [sp, #16]
 8009cf0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009cf4:	4413      	add	r3, r2
 8009cf6:	46c1      	mov	r9, r8
 8009cf8:	4698      	mov	r8, r3
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <_dtoa_r+0xcc0>)
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f003 fe79 	bl	800d9f8 <__aeabi_dmul>
 8009d06:	460f      	mov	r7, r1
 8009d08:	4606      	mov	r6, r0
 8009d0a:	f004 f925 	bl	800df58 <__aeabi_d2iz>
 8009d0e:	4605      	mov	r5, r0
 8009d10:	f003 fe08 	bl	800d924 <__aeabi_i2d>
 8009d14:	3530      	adds	r5, #48	; 0x30
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	f003 fcb3 	bl	800d688 <__aeabi_dsub>
 8009d22:	f804 5b01 	strb.w	r5, [r4], #1
 8009d26:	4544      	cmp	r4, r8
 8009d28:	4606      	mov	r6, r0
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	d1e5      	bne.n	8009cfa <_dtoa_r+0xc12>
 8009d2e:	46c8      	mov	r8, r9
 8009d30:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009d34:	4b1d      	ldr	r3, [pc, #116]	; (8009dac <_dtoa_r+0xcc4>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3c:	f003 fca6 	bl	800d68c <__adddf3>
 8009d40:	4632      	mov	r2, r6
 8009d42:	463b      	mov	r3, r7
 8009d44:	f004 f8ca 	bl	800dedc <__aeabi_dcmplt>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d06d      	beq.n	8009e28 <_dtoa_r+0xd40>
 8009d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d4e:	9305      	str	r3, [sp, #20]
 8009d50:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8009d54:	9a04      	ldr	r2, [sp, #16]
 8009d56:	e499      	b.n	800968c <_dtoa_r+0x5a4>
 8009d58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d5a:	9f08      	ldr	r7, [sp, #32]
 8009d5c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d60:	464c      	mov	r4, r9
 8009d62:	4498      	add	r8, r3
 8009d64:	4499      	add	r9, r3
 8009d66:	e4ac      	b.n	80096c2 <_dtoa_r+0x5da>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	e66e      	b.n	8009a4a <_dtoa_r+0x962>
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	2205      	movs	r2, #5
 8009d70:	4658      	mov	r0, fp
 8009d72:	f001 f831 	bl	800add8 <__multadd>
 8009d76:	4601      	mov	r1, r0
 8009d78:	4606      	mov	r6, r0
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	f001 fa5e 	bl	800b23c <__mcmp>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f73f aeb1 	bgt.w	8009ae8 <_dtoa_r+0xa00>
 8009d86:	e725      	b.n	8009bd4 <_dtoa_r+0xaec>
 8009d88:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009d8c:	2602      	movs	r6, #2
 8009d8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d92:	f7ff bb17 	b.w	80093c4 <_dtoa_r+0x2dc>
 8009d96:	bf00      	nop
 8009d98:	40140000 	.word	0x40140000
 8009d9c:	0800e6c0 	.word	0x0800e6c0
 8009da0:	0800e698 	.word	0x0800e698
 8009da4:	401c0000 	.word	0x401c0000
 8009da8:	40240000 	.word	0x40240000
 8009dac:	3fe00000 	.word	0x3fe00000
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f43f af1f 	beq.w	8009bf6 <_dtoa_r+0xb0e>
 8009db8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009dba:	2c00      	cmp	r4, #0
 8009dbc:	f77f abb8 	ble.w	8009530 <_dtoa_r+0x448>
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4b42      	ldr	r3, [pc, #264]	; (8009ecc <_dtoa_r+0xde4>)
 8009dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc8:	f003 fe16 	bl	800d9f8 <__aeabi_dmul>
 8009dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd0:	1c70      	adds	r0, r6, #1
 8009dd2:	f003 fda7 	bl	800d924 <__aeabi_i2d>
 8009dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dda:	f003 fe0d 	bl	800d9f8 <__aeabi_dmul>
 8009dde:	4b3c      	ldr	r3, [pc, #240]	; (8009ed0 <_dtoa_r+0xde8>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	f003 fc53 	bl	800d68c <__adddf3>
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	940e      	str	r4, [sp, #56]	; 0x38
 8009dea:	3b01      	subs	r3, #1
 8009dec:	4606      	mov	r6, r0
 8009dee:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8009df2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009df4:	f7ff bb07 	b.w	8009406 <_dtoa_r+0x31e>
 8009df8:	4651      	mov	r1, sl
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4658      	mov	r0, fp
 8009dfe:	f001 f9c7 	bl	800b190 <__lshift>
 8009e02:	4631      	mov	r1, r6
 8009e04:	4682      	mov	sl, r0
 8009e06:	f001 fa19 	bl	800b23c <__mcmp>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	dd32      	ble.n	8009e74 <_dtoa_r+0xd8c>
 8009e0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e12:	d003      	beq.n	8009e1c <_dtoa_r+0xd34>
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e1a:	e731      	b.n	8009c80 <_dtoa_r+0xb98>
 8009e1c:	2239      	movs	r2, #57	; 0x39
 8009e1e:	9502      	str	r5, [sp, #8]
 8009e20:	703a      	strb	r2, [r7, #0]
 8009e22:	4645      	mov	r5, r8
 8009e24:	9904      	ldr	r1, [sp, #16]
 8009e26:	e581      	b.n	800992c <_dtoa_r+0x844>
 8009e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	4929      	ldr	r1, [pc, #164]	; (8009ed4 <_dtoa_r+0xdec>)
 8009e30:	f003 fc2a 	bl	800d688 <__aeabi_dsub>
 8009e34:	4632      	mov	r2, r6
 8009e36:	463b      	mov	r3, r7
 8009e38:	f004 f86e 	bl	800df18 <__aeabi_dcmpgt>
 8009e3c:	b910      	cbnz	r0, 8009e44 <_dtoa_r+0xd5c>
 8009e3e:	f7ff bb77 	b.w	8009530 <_dtoa_r+0x448>
 8009e42:	4614      	mov	r4, r2
 8009e44:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8009e48:	2b30      	cmp	r3, #48	; 0x30
 8009e4a:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8009e4e:	d0f8      	beq.n	8009e42 <_dtoa_r+0xd5a>
 8009e50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	e580      	b.n	8009958 <_dtoa_r+0x870>
 8009e56:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009e5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	9a04      	ldr	r2, [sp, #16]
 8009e60:	e414      	b.n	800968c <_dtoa_r+0x5a4>
 8009e62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e66:	f107 0401 	add.w	r4, r7, #1
 8009e6a:	d0d7      	beq.n	8009e1c <_dtoa_r+0xd34>
 8009e6c:	9b02      	ldr	r3, [sp, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dcd0      	bgt.n	8009e14 <_dtoa_r+0xd2c>
 8009e72:	e705      	b.n	8009c80 <_dtoa_r+0xb98>
 8009e74:	f47f af04 	bne.w	8009c80 <_dtoa_r+0xb98>
 8009e78:	f019 0f01 	tst.w	r9, #1
 8009e7c:	f43f af00 	beq.w	8009c80 <_dtoa_r+0xb98>
 8009e80:	e7c5      	b.n	8009e0e <_dtoa_r+0xd26>
 8009e82:	4629      	mov	r1, r5
 8009e84:	2300      	movs	r3, #0
 8009e86:	220a      	movs	r2, #10
 8009e88:	4658      	mov	r0, fp
 8009e8a:	f000 ffa5 	bl	800add8 <__multadd>
 8009e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	4605      	mov	r5, r0
 8009e94:	dd09      	ble.n	8009eaa <_dtoa_r+0xdc2>
 8009e96:	9306      	str	r3, [sp, #24]
 8009e98:	e48f      	b.n	80097ba <_dtoa_r+0x6d2>
 8009e9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	dc09      	bgt.n	8009eb4 <_dtoa_r+0xdcc>
 8009ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea2:	e50e      	b.n	80098c2 <_dtoa_r+0x7da>
 8009ea4:	2602      	movs	r6, #2
 8009ea6:	f7ff ba8d 	b.w	80093c4 <_dtoa_r+0x2dc>
 8009eaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	dc01      	bgt.n	8009eb4 <_dtoa_r+0xdcc>
 8009eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb2:	e7f0      	b.n	8009e96 <_dtoa_r+0xdae>
 8009eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb6:	9306      	str	r3, [sp, #24]
 8009eb8:	e688      	b.n	8009bcc <_dtoa_r+0xae4>
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <_dtoa_r+0xdf0>)
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	f7ff b94b 	b.w	8009158 <_dtoa_r+0x70>
 8009ec2:	f43f ac5d 	beq.w	8009780 <_dtoa_r+0x698>
 8009ec6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8009eca:	e559      	b.n	8009980 <_dtoa_r+0x898>
 8009ecc:	40240000 	.word	0x40240000
 8009ed0:	401c0000 	.word	0x401c0000
 8009ed4:	3fe00000 	.word	0x3fe00000
 8009ed8:	0800e684 	.word	0x0800e684

08009edc <__sflush_r>:
 8009edc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	0711      	lsls	r1, r2, #28
 8009eea:	4680      	mov	r8, r0
 8009eec:	d444      	bmi.n	8009f78 <__sflush_r+0x9c>
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	dd59      	ble.n	8009fae <__sflush_r+0xd2>
 8009efa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	d053      	beq.n	8009fa8 <__sflush_r+0xcc>
 8009f00:	2200      	movs	r2, #0
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	f8d8 6000 	ldr.w	r6, [r8]
 8009f08:	69e1      	ldr	r1, [r4, #28]
 8009f0a:	f8c8 2000 	str.w	r2, [r8]
 8009f0e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8009f12:	f040 8083 	bne.w	800a01c <__sflush_r+0x140>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4640      	mov	r0, r8
 8009f1a:	47a8      	blx	r5
 8009f1c:	1c42      	adds	r2, r0, #1
 8009f1e:	d04a      	beq.n	8009fb6 <__sflush_r+0xda>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009f24:	69e1      	ldr	r1, [r4, #28]
 8009f26:	075b      	lsls	r3, r3, #29
 8009f28:	d505      	bpl.n	8009f36 <__sflush_r+0x5a>
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f2e:	1a80      	subs	r0, r0, r2
 8009f30:	b10b      	cbz	r3, 8009f36 <__sflush_r+0x5a>
 8009f32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f34:	1ac0      	subs	r0, r0, r3
 8009f36:	4602      	mov	r2, r0
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	47a8      	blx	r5
 8009f3e:	1c47      	adds	r7, r0, #1
 8009f40:	d045      	beq.n	8009fce <__sflush_r+0xf2>
 8009f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4e:	2200      	movs	r2, #0
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	04db      	lsls	r3, r3, #19
 8009f54:	6062      	str	r2, [r4, #4]
 8009f56:	d500      	bpl.n	8009f5a <__sflush_r+0x7e>
 8009f58:	6520      	str	r0, [r4, #80]	; 0x50
 8009f5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f5c:	f8c8 6000 	str.w	r6, [r8]
 8009f60:	b311      	cbz	r1, 8009fa8 <__sflush_r+0xcc>
 8009f62:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009f66:	4299      	cmp	r1, r3
 8009f68:	d002      	beq.n	8009f70 <__sflush_r+0x94>
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	f000 fa16 	bl	800a39c <_free_r>
 8009f70:	2000      	movs	r0, #0
 8009f72:	6320      	str	r0, [r4, #48]	; 0x30
 8009f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f78:	6926      	ldr	r6, [r4, #16]
 8009f7a:	b1ae      	cbz	r6, 8009fa8 <__sflush_r+0xcc>
 8009f7c:	6825      	ldr	r5, [r4, #0]
 8009f7e:	6026      	str	r6, [r4, #0]
 8009f80:	0792      	lsls	r2, r2, #30
 8009f82:	bf0c      	ite	eq
 8009f84:	6963      	ldreq	r3, [r4, #20]
 8009f86:	2300      	movne	r3, #0
 8009f88:	1bad      	subs	r5, r5, r6
 8009f8a:	60a3      	str	r3, [r4, #8]
 8009f8c:	e00a      	b.n	8009fa4 <__sflush_r+0xc8>
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4632      	mov	r2, r6
 8009f92:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009f94:	69e1      	ldr	r1, [r4, #28]
 8009f96:	4640      	mov	r0, r8
 8009f98:	47b8      	blx	r7
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	eba5 0500 	sub.w	r5, r5, r0
 8009fa0:	4406      	add	r6, r0
 8009fa2:	dd2b      	ble.n	8009ffc <__sflush_r+0x120>
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	dcf2      	bgt.n	8009f8e <__sflush_r+0xb2>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009fb0:	2a00      	cmp	r2, #0
 8009fb2:	dca2      	bgt.n	8009efa <__sflush_r+0x1e>
 8009fb4:	e7f8      	b.n	8009fa8 <__sflush_r+0xcc>
 8009fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0b0      	beq.n	8009f20 <__sflush_r+0x44>
 8009fbe:	2b1d      	cmp	r3, #29
 8009fc0:	d001      	beq.n	8009fc6 <__sflush_r+0xea>
 8009fc2:	2b16      	cmp	r3, #22
 8009fc4:	d12c      	bne.n	800a020 <__sflush_r+0x144>
 8009fc6:	f8c8 6000 	str.w	r6, [r8]
 8009fca:	2000      	movs	r0, #0
 8009fcc:	e7ed      	b.n	8009faa <__sflush_r+0xce>
 8009fce:	f8d8 1000 	ldr.w	r1, [r8]
 8009fd2:	291d      	cmp	r1, #29
 8009fd4:	d81a      	bhi.n	800a00c <__sflush_r+0x130>
 8009fd6:	4b15      	ldr	r3, [pc, #84]	; (800a02c <__sflush_r+0x150>)
 8009fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fdc:	40cb      	lsrs	r3, r1
 8009fde:	43db      	mvns	r3, r3
 8009fe0:	f013 0301 	ands.w	r3, r3, #1
 8009fe4:	d114      	bne.n	800a010 <__sflush_r+0x134>
 8009fe6:	6925      	ldr	r5, [r4, #16]
 8009fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fec:	e9c4 5300 	strd	r5, r3, [r4]
 8009ff0:	04d5      	lsls	r5, r2, #19
 8009ff2:	81a2      	strh	r2, [r4, #12]
 8009ff4:	d5b1      	bpl.n	8009f5a <__sflush_r+0x7e>
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d1af      	bne.n	8009f5a <__sflush_r+0x7e>
 8009ffa:	e7ad      	b.n	8009f58 <__sflush_r+0x7c>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a014:	81a2      	strh	r2, [r4, #12]
 800a016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a01a:	e7c6      	b.n	8009faa <__sflush_r+0xce>
 800a01c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a01e:	e782      	b.n	8009f26 <__sflush_r+0x4a>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	e7bf      	b.n	8009faa <__sflush_r+0xce>
 800a02a:	bf00      	nop
 800a02c:	20400001 	.word	0x20400001

0800a030 <_fflush_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	460d      	mov	r5, r1
 800a034:	4604      	mov	r4, r0
 800a036:	b108      	cbz	r0, 800a03c <_fflush_r+0xc>
 800a038:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a03a:	b1a3      	cbz	r3, 800a066 <_fflush_r+0x36>
 800a03c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800a040:	b1b8      	cbz	r0, 800a072 <_fflush_r+0x42>
 800a042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a044:	07db      	lsls	r3, r3, #31
 800a046:	d401      	bmi.n	800a04c <_fflush_r+0x1c>
 800a048:	0581      	lsls	r1, r0, #22
 800a04a:	d51a      	bpl.n	800a082 <_fflush_r+0x52>
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7ff ff44 	bl	8009edc <__sflush_r>
 800a054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a056:	07da      	lsls	r2, r3, #31
 800a058:	4604      	mov	r4, r0
 800a05a:	d402      	bmi.n	800a062 <_fflush_r+0x32>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059b      	lsls	r3, r3, #22
 800a060:	d50a      	bpl.n	800a078 <_fflush_r+0x48>
 800a062:	4620      	mov	r0, r4
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	f000 f88f 	bl	800a188 <__sinit>
 800a06a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800a06e:	2800      	cmp	r0, #0
 800a070:	d1e7      	bne.n	800a042 <_fflush_r+0x12>
 800a072:	4604      	mov	r4, r0
 800a074:	4620      	mov	r0, r4
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a07a:	f000 fb03 	bl	800a684 <__retarget_lock_release_recursive>
 800a07e:	4620      	mov	r0, r4
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a084:	f000 faf6 	bl	800a674 <__retarget_lock_acquire_recursive>
 800a088:	e7e0      	b.n	800a04c <_fflush_r+0x1c>
 800a08a:	bf00      	nop

0800a08c <fflush>:
 800a08c:	b120      	cbz	r0, 800a098 <fflush+0xc>
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <fflush+0x18>)
 800a090:	4601      	mov	r1, r0
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	f7ff bfcc 	b.w	800a030 <_fflush_r>
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <fflush+0x1c>)
 800a09a:	4904      	ldr	r1, [pc, #16]	; (800a0ac <fflush+0x20>)
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f000 ba97 	b.w	800a5d0 <_fwalk_reent>
 800a0a2:	bf00      	nop
 800a0a4:	20000030 	.word	0x20000030
 800a0a8:	0800e61c 	.word	0x0800e61c
 800a0ac:	0800a031 	.word	0x0800a031

0800a0b0 <std>:
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	8181      	strh	r1, [r0, #12]
 800a0b8:	81c2      	strh	r2, [r0, #14]
 800a0ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a0be:	6083      	str	r3, [r0, #8]
 800a0c0:	6643      	str	r3, [r0, #100]	; 0x64
 800a0c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0c6:	6183      	str	r3, [r0, #24]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	305c      	adds	r0, #92	; 0x5c
 800a0ce:	f7fd f8a1 	bl	8007214 <memset>
 800a0d2:	4807      	ldr	r0, [pc, #28]	; (800a0f0 <std+0x40>)
 800a0d4:	4907      	ldr	r1, [pc, #28]	; (800a0f4 <std+0x44>)
 800a0d6:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <std+0x48>)
 800a0d8:	4b08      	ldr	r3, [pc, #32]	; (800a0fc <std+0x4c>)
 800a0da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0dc:	e9c4 4007 	strd	r4, r0, [r4, #28]
 800a0e0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800a0e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ec:	f000 baba 	b.w	800a664 <__retarget_lock_init_recursive>
 800a0f0:	0800b6cd 	.word	0x0800b6cd
 800a0f4:	0800b6f5 	.word	0x0800b6f5
 800a0f8:	0800b731 	.word	0x0800b731
 800a0fc:	0800b751 	.word	0x0800b751

0800a100 <_cleanup_r>:
 800a100:	4901      	ldr	r1, [pc, #4]	; (800a108 <_cleanup_r+0x8>)
 800a102:	f000 ba65 	b.w	800a5d0 <_fwalk_reent>
 800a106:	bf00      	nop
 800a108:	0800c681 	.word	0x0800c681

0800a10c <__fp_lock>:
 800a10c:	b508      	push	{r3, lr}
 800a10e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a110:	07da      	lsls	r2, r3, #31
 800a112:	d402      	bmi.n	800a11a <__fp_lock+0xe>
 800a114:	8983      	ldrh	r3, [r0, #12]
 800a116:	059b      	lsls	r3, r3, #22
 800a118:	d501      	bpl.n	800a11e <__fp_lock+0x12>
 800a11a:	2000      	movs	r0, #0
 800a11c:	bd08      	pop	{r3, pc}
 800a11e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800a120:	f000 faa8 	bl	800a674 <__retarget_lock_acquire_recursive>
 800a124:	2000      	movs	r0, #0
 800a126:	bd08      	pop	{r3, pc}

0800a128 <__fp_unlock>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a12c:	07da      	lsls	r2, r3, #31
 800a12e:	d402      	bmi.n	800a136 <__fp_unlock+0xe>
 800a130:	8983      	ldrh	r3, [r0, #12]
 800a132:	059b      	lsls	r3, r3, #22
 800a134:	d501      	bpl.n	800a13a <__fp_unlock+0x12>
 800a136:	2000      	movs	r0, #0
 800a138:	bd08      	pop	{r3, pc}
 800a13a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800a13c:	f000 faa2 	bl	800a684 <__retarget_lock_release_recursive>
 800a140:	2000      	movs	r0, #0
 800a142:	bd08      	pop	{r3, pc}

0800a144 <__sfmoreglue>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	1e4a      	subs	r2, r1, #1
 800a148:	2568      	movs	r5, #104	; 0x68
 800a14a:	fb05 f502 	mul.w	r5, r5, r2
 800a14e:	460e      	mov	r6, r1
 800a150:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a154:	f000 fb10 	bl	800a778 <_malloc_r>
 800a158:	4604      	mov	r4, r0
 800a15a:	b140      	cbz	r0, 800a16e <__sfmoreglue+0x2a>
 800a15c:	2100      	movs	r1, #0
 800a15e:	300c      	adds	r0, #12
 800a160:	6066      	str	r6, [r4, #4]
 800a162:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a166:	6021      	str	r1, [r4, #0]
 800a168:	60a0      	str	r0, [r4, #8]
 800a16a:	f7fd f853 	bl	8007214 <memset>
 800a16e:	4620      	mov	r0, r4
 800a170:	bd70      	pop	{r4, r5, r6, pc}
 800a172:	bf00      	nop

0800a174 <_cleanup>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <_cleanup+0xc>)
 800a176:	4903      	ldr	r1, [pc, #12]	; (800a184 <_cleanup+0x10>)
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f000 ba29 	b.w	800a5d0 <_fwalk_reent>
 800a17e:	bf00      	nop
 800a180:	0800e61c 	.word	0x0800e61c
 800a184:	0800c681 	.word	0x0800c681

0800a188 <__sinit>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	4812      	ldr	r0, [pc, #72]	; (800a1d8 <__sinit+0x50>)
 800a18e:	f000 fa71 	bl	800a674 <__retarget_lock_acquire_recursive>
 800a192:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a194:	b9d2      	cbnz	r2, 800a1cc <__sinit+0x44>
 800a196:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a19a:	4810      	ldr	r0, [pc, #64]	; (800a1dc <__sinit+0x54>)
 800a19c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a1a0:	2103      	movs	r1, #3
 800a1a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a1a6:	63e0      	str	r0, [r4, #60]	; 0x3c
 800a1a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 800a1ac:	6860      	ldr	r0, [r4, #4]
 800a1ae:	2104      	movs	r1, #4
 800a1b0:	f7ff ff7e 	bl	800a0b0 <std>
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	2109      	movs	r1, #9
 800a1b8:	68a0      	ldr	r0, [r4, #8]
 800a1ba:	f7ff ff79 	bl	800a0b0 <std>
 800a1be:	2202      	movs	r2, #2
 800a1c0:	2112      	movs	r1, #18
 800a1c2:	68e0      	ldr	r0, [r4, #12]
 800a1c4:	f7ff ff74 	bl	800a0b0 <std>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1cc:	4802      	ldr	r0, [pc, #8]	; (800a1d8 <__sinit+0x50>)
 800a1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d2:	f000 ba57 	b.w	800a684 <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20001174 	.word	0x20001174
 800a1dc:	0800a101 	.word	0x0800a101

0800a1e0 <__sfp>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	4824      	ldr	r0, [pc, #144]	; (800a278 <__sfp+0x98>)
 800a1e6:	f000 fa45 	bl	800a674 <__retarget_lock_acquire_recursive>
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <__sfp+0x9c>)
 800a1ec:	681d      	ldr	r5, [r3, #0]
 800a1ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a1f0:	b383      	cbz	r3, 800a254 <__sfp+0x74>
 800a1f2:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800a1f6:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	d505      	bpl.n	800a20a <__sfp+0x2a>
 800a1fe:	e025      	b.n	800a24c <__sfp+0x6c>
 800a200:	3b01      	subs	r3, #1
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a208:	d020      	beq.n	800a24c <__sfp+0x6c>
 800a20a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a20e:	2a00      	cmp	r2, #0
 800a210:	d1f6      	bne.n	800a200 <__sfp+0x20>
 800a212:	2500      	movs	r5, #0
 800a214:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <__sfp+0xa0>)
 800a216:	60e3      	str	r3, [r4, #12]
 800a218:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a21c:	6665      	str	r5, [r4, #100]	; 0x64
 800a21e:	f000 fa21 	bl	800a664 <__retarget_lock_init_recursive>
 800a222:	4815      	ldr	r0, [pc, #84]	; (800a278 <__sfp+0x98>)
 800a224:	f000 fa2e 	bl	800a684 <__retarget_lock_release_recursive>
 800a228:	6025      	str	r5, [r4, #0]
 800a22a:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a22e:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a232:	61a5      	str	r5, [r4, #24]
 800a234:	4629      	mov	r1, r5
 800a236:	2208      	movs	r2, #8
 800a238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a23c:	f7fc ffea 	bl	8007214 <memset>
 800a240:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800a244:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 800a248:	4620      	mov	r0, r4
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	682c      	ldr	r4, [r5, #0]
 800a24e:	b12c      	cbz	r4, 800a25c <__sfp+0x7c>
 800a250:	4625      	mov	r5, r4
 800a252:	e7d0      	b.n	800a1f6 <__sfp+0x16>
 800a254:	4628      	mov	r0, r5
 800a256:	f7ff ff97 	bl	800a188 <__sinit>
 800a25a:	e7ca      	b.n	800a1f2 <__sfp+0x12>
 800a25c:	2104      	movs	r1, #4
 800a25e:	4630      	mov	r0, r6
 800a260:	f7ff ff70 	bl	800a144 <__sfmoreglue>
 800a264:	4604      	mov	r4, r0
 800a266:	6028      	str	r0, [r5, #0]
 800a268:	2800      	cmp	r0, #0
 800a26a:	d1f1      	bne.n	800a250 <__sfp+0x70>
 800a26c:	4802      	ldr	r0, [pc, #8]	; (800a278 <__sfp+0x98>)
 800a26e:	f000 fa09 	bl	800a684 <__retarget_lock_release_recursive>
 800a272:	230c      	movs	r3, #12
 800a274:	6033      	str	r3, [r6, #0]
 800a276:	e7e7      	b.n	800a248 <__sfp+0x68>
 800a278:	20001188 	.word	0x20001188
 800a27c:	0800e61c 	.word	0x0800e61c
 800a280:	ffff0001 	.word	0xffff0001

0800a284 <__sfp_lock_acquire>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__sfp_lock_acquire+0x8>)
 800a286:	f000 b9f5 	b.w	800a674 <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	20001188 	.word	0x20001188

0800a290 <__sfp_lock_release>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sfp_lock_release+0x8>)
 800a292:	f000 b9f7 	b.w	800a684 <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	20001188 	.word	0x20001188

0800a29c <__sinit_lock_acquire>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sinit_lock_acquire+0x8>)
 800a29e:	f000 b9e9 	b.w	800a674 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20001174 	.word	0x20001174

0800a2a8 <__sinit_lock_release>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sinit_lock_release+0x8>)
 800a2aa:	f000 b9eb 	b.w	800a684 <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20001174 	.word	0x20001174

0800a2b4 <__fp_lock_all>:
 800a2b4:	b508      	push	{r3, lr}
 800a2b6:	4805      	ldr	r0, [pc, #20]	; (800a2cc <__fp_lock_all+0x18>)
 800a2b8:	f000 f9dc 	bl	800a674 <__retarget_lock_acquire_recursive>
 800a2bc:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <__fp_lock_all+0x1c>)
 800a2be:	4905      	ldr	r1, [pc, #20]	; (800a2d4 <__fp_lock_all+0x20>)
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2c6:	f000 b95d 	b.w	800a584 <_fwalk>
 800a2ca:	bf00      	nop
 800a2cc:	20001188 	.word	0x20001188
 800a2d0:	20000030 	.word	0x20000030
 800a2d4:	0800a10d 	.word	0x0800a10d

0800a2d8 <__fp_unlock_all>:
 800a2d8:	b508      	push	{r3, lr}
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <__fp_unlock_all+0x18>)
 800a2dc:	4905      	ldr	r1, [pc, #20]	; (800a2f4 <__fp_unlock_all+0x1c>)
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	f000 f950 	bl	800a584 <_fwalk>
 800a2e4:	4804      	ldr	r0, [pc, #16]	; (800a2f8 <__fp_unlock_all+0x20>)
 800a2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2ea:	f000 b9cb 	b.w	800a684 <__retarget_lock_release_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	20000030 	.word	0x20000030
 800a2f4:	0800a129 	.word	0x0800a129
 800a2f8:	20001188 	.word	0x20001188

0800a2fc <_malloc_trim_r>:
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fe:	4f24      	ldr	r7, [pc, #144]	; (800a390 <_malloc_trim_r+0x94>)
 800a300:	460c      	mov	r4, r1
 800a302:	4606      	mov	r6, r0
 800a304:	f000 fd2c 	bl	800ad60 <__malloc_lock>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	685d      	ldr	r5, [r3, #4]
 800a30c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800a310:	310f      	adds	r1, #15
 800a312:	f025 0503 	bic.w	r5, r5, #3
 800a316:	4429      	add	r1, r5
 800a318:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800a31c:	f021 010f 	bic.w	r1, r1, #15
 800a320:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800a324:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800a328:	db07      	blt.n	800a33a <_malloc_trim_r+0x3e>
 800a32a:	2100      	movs	r1, #0
 800a32c:	4630      	mov	r0, r6
 800a32e:	f001 f9bb 	bl	800b6a8 <_sbrk_r>
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	442b      	add	r3, r5
 800a336:	4298      	cmp	r0, r3
 800a338:	d004      	beq.n	800a344 <_malloc_trim_r+0x48>
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 fd16 	bl	800ad6c <__malloc_unlock>
 800a340:	2000      	movs	r0, #0
 800a342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a344:	4261      	negs	r1, r4
 800a346:	4630      	mov	r0, r6
 800a348:	f001 f9ae 	bl	800b6a8 <_sbrk_r>
 800a34c:	3001      	adds	r0, #1
 800a34e:	d00d      	beq.n	800a36c <_malloc_trim_r+0x70>
 800a350:	4b10      	ldr	r3, [pc, #64]	; (800a394 <_malloc_trim_r+0x98>)
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	6819      	ldr	r1, [r3, #0]
 800a356:	1b2d      	subs	r5, r5, r4
 800a358:	f045 0501 	orr.w	r5, r5, #1
 800a35c:	4630      	mov	r0, r6
 800a35e:	1b09      	subs	r1, r1, r4
 800a360:	6055      	str	r5, [r2, #4]
 800a362:	6019      	str	r1, [r3, #0]
 800a364:	f000 fd02 	bl	800ad6c <__malloc_unlock>
 800a368:	2001      	movs	r0, #1
 800a36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a36c:	2100      	movs	r1, #0
 800a36e:	4630      	mov	r0, r6
 800a370:	f001 f99a 	bl	800b6a8 <_sbrk_r>
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	1a83      	subs	r3, r0, r2
 800a378:	2b0f      	cmp	r3, #15
 800a37a:	ddde      	ble.n	800a33a <_malloc_trim_r+0x3e>
 800a37c:	4c06      	ldr	r4, [pc, #24]	; (800a398 <_malloc_trim_r+0x9c>)
 800a37e:	4905      	ldr	r1, [pc, #20]	; (800a394 <_malloc_trim_r+0x98>)
 800a380:	6824      	ldr	r4, [r4, #0]
 800a382:	f043 0301 	orr.w	r3, r3, #1
 800a386:	1b00      	subs	r0, r0, r4
 800a388:	6053      	str	r3, [r2, #4]
 800a38a:	6008      	str	r0, [r1, #0]
 800a38c:	e7d5      	b.n	800a33a <_malloc_trim_r+0x3e>
 800a38e:	bf00      	nop
 800a390:	20000460 	.word	0x20000460
 800a394:	20000a34 	.word	0x20000a34
 800a398:	20000868 	.word	0x20000868

0800a39c <_free_r>:
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d053      	beq.n	800a448 <_free_r+0xac>
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	f000 fcdb 	bl	800ad60 <__malloc_lock>
 800a3aa:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800a3ae:	4f71      	ldr	r7, [pc, #452]	; (800a574 <_free_r+0x1d8>)
 800a3b0:	f02c 0101 	bic.w	r1, ip, #1
 800a3b4:	f1a4 0508 	sub.w	r5, r4, #8
 800a3b8:	186b      	adds	r3, r5, r1
 800a3ba:	68b8      	ldr	r0, [r7, #8]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	4298      	cmp	r0, r3
 800a3c0:	f022 0203 	bic.w	r2, r2, #3
 800a3c4:	d053      	beq.n	800a46e <_free_r+0xd2>
 800a3c6:	f01c 0f01 	tst.w	ip, #1
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	eb03 0002 	add.w	r0, r3, r2
 800a3d0:	d13b      	bne.n	800a44a <_free_r+0xae>
 800a3d2:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800a3d6:	6840      	ldr	r0, [r0, #4]
 800a3d8:	eba5 050c 	sub.w	r5, r5, ip
 800a3dc:	f107 0e08 	add.w	lr, r7, #8
 800a3e0:	68ac      	ldr	r4, [r5, #8]
 800a3e2:	4574      	cmp	r4, lr
 800a3e4:	4461      	add	r1, ip
 800a3e6:	f000 0001 	and.w	r0, r0, #1
 800a3ea:	d075      	beq.n	800a4d8 <_free_r+0x13c>
 800a3ec:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800a3f0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a3f4:	f8cc 4008 	str.w	r4, [ip, #8]
 800a3f8:	b360      	cbz	r0, 800a454 <_free_r+0xb8>
 800a3fa:	f041 0301 	orr.w	r3, r1, #1
 800a3fe:	606b      	str	r3, [r5, #4]
 800a400:	5069      	str	r1, [r5, r1]
 800a402:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a406:	d350      	bcc.n	800a4aa <_free_r+0x10e>
 800a408:	0a4b      	lsrs	r3, r1, #9
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d870      	bhi.n	800a4f0 <_free_r+0x154>
 800a40e:	098b      	lsrs	r3, r1, #6
 800a410:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800a414:	00e4      	lsls	r4, r4, #3
 800a416:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a41a:	1938      	adds	r0, r7, r4
 800a41c:	593b      	ldr	r3, [r7, r4]
 800a41e:	3808      	subs	r0, #8
 800a420:	4298      	cmp	r0, r3
 800a422:	d078      	beq.n	800a516 <_free_r+0x17a>
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	f022 0203 	bic.w	r2, r2, #3
 800a42a:	428a      	cmp	r2, r1
 800a42c:	d971      	bls.n	800a512 <_free_r+0x176>
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	4298      	cmp	r0, r3
 800a432:	d1f7      	bne.n	800a424 <_free_r+0x88>
 800a434:	68c3      	ldr	r3, [r0, #12]
 800a436:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800a43a:	609d      	str	r5, [r3, #8]
 800a43c:	60c5      	str	r5, [r0, #12]
 800a43e:	4630      	mov	r0, r6
 800a440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a444:	f000 bc92 	b.w	800ad6c <__malloc_unlock>
 800a448:	4770      	bx	lr
 800a44a:	6840      	ldr	r0, [r0, #4]
 800a44c:	f000 0001 	and.w	r0, r0, #1
 800a450:	2800      	cmp	r0, #0
 800a452:	d1d2      	bne.n	800a3fa <_free_r+0x5e>
 800a454:	6898      	ldr	r0, [r3, #8]
 800a456:	4c48      	ldr	r4, [pc, #288]	; (800a578 <_free_r+0x1dc>)
 800a458:	4411      	add	r1, r2
 800a45a:	42a0      	cmp	r0, r4
 800a45c:	f041 0201 	orr.w	r2, r1, #1
 800a460:	d062      	beq.n	800a528 <_free_r+0x18c>
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	60c3      	str	r3, [r0, #12]
 800a466:	6098      	str	r0, [r3, #8]
 800a468:	606a      	str	r2, [r5, #4]
 800a46a:	5069      	str	r1, [r5, r1]
 800a46c:	e7c9      	b.n	800a402 <_free_r+0x66>
 800a46e:	f01c 0f01 	tst.w	ip, #1
 800a472:	440a      	add	r2, r1
 800a474:	d107      	bne.n	800a486 <_free_r+0xea>
 800a476:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a47a:	1aed      	subs	r5, r5, r3
 800a47c:	441a      	add	r2, r3
 800a47e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800a482:	60cb      	str	r3, [r1, #12]
 800a484:	6099      	str	r1, [r3, #8]
 800a486:	4b3d      	ldr	r3, [pc, #244]	; (800a57c <_free_r+0x1e0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0101 	orr.w	r1, r2, #1
 800a48e:	4293      	cmp	r3, r2
 800a490:	6069      	str	r1, [r5, #4]
 800a492:	60bd      	str	r5, [r7, #8]
 800a494:	d804      	bhi.n	800a4a0 <_free_r+0x104>
 800a496:	4b3a      	ldr	r3, [pc, #232]	; (800a580 <_free_r+0x1e4>)
 800a498:	4630      	mov	r0, r6
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	f7ff ff2e 	bl	800a2fc <_malloc_trim_r>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4a6:	f000 bc61 	b.w	800ad6c <__malloc_unlock>
 800a4aa:	08c9      	lsrs	r1, r1, #3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	1c4a      	adds	r2, r1, #1
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	1089      	asrs	r1, r1, #2
 800a4b4:	408b      	lsls	r3, r1
 800a4b6:	4303      	orrs	r3, r0
 800a4b8:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800a4bc:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	3908      	subs	r1, #8
 800a4c4:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a4c8:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800a4cc:	60c5      	str	r5, [r0, #12]
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4d4:	f000 bc4a 	b.w	800ad6c <__malloc_unlock>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d145      	bne.n	800a568 <_free_r+0x1cc>
 800a4dc:	440a      	add	r2, r1
 800a4de:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800a4e2:	f042 0001 	orr.w	r0, r2, #1
 800a4e6:	60cb      	str	r3, [r1, #12]
 800a4e8:	6099      	str	r1, [r3, #8]
 800a4ea:	6068      	str	r0, [r5, #4]
 800a4ec:	50aa      	str	r2, [r5, r2]
 800a4ee:	e7d7      	b.n	800a4a0 <_free_r+0x104>
 800a4f0:	2b14      	cmp	r3, #20
 800a4f2:	d908      	bls.n	800a506 <_free_r+0x16a>
 800a4f4:	2b54      	cmp	r3, #84	; 0x54
 800a4f6:	d81e      	bhi.n	800a536 <_free_r+0x19a>
 800a4f8:	0b0b      	lsrs	r3, r1, #12
 800a4fa:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800a4fe:	00e4      	lsls	r4, r4, #3
 800a500:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800a504:	e789      	b.n	800a41a <_free_r+0x7e>
 800a506:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800a50a:	00e4      	lsls	r4, r4, #3
 800a50c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800a510:	e783      	b.n	800a41a <_free_r+0x7e>
 800a512:	4618      	mov	r0, r3
 800a514:	e78e      	b.n	800a434 <_free_r+0x98>
 800a516:	1093      	asrs	r3, r2, #2
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	fa02 f303 	lsl.w	r3, r2, r3
 800a520:	430b      	orrs	r3, r1
 800a522:	607b      	str	r3, [r7, #4]
 800a524:	4603      	mov	r3, r0
 800a526:	e786      	b.n	800a436 <_free_r+0x9a>
 800a528:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800a52c:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800a530:	606a      	str	r2, [r5, #4]
 800a532:	5069      	str	r1, [r5, r1]
 800a534:	e7b4      	b.n	800a4a0 <_free_r+0x104>
 800a536:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a53a:	d806      	bhi.n	800a54a <_free_r+0x1ae>
 800a53c:	0bcb      	lsrs	r3, r1, #15
 800a53e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800a542:	00e4      	lsls	r4, r4, #3
 800a544:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800a548:	e767      	b.n	800a41a <_free_r+0x7e>
 800a54a:	f240 5254 	movw	r2, #1364	; 0x554
 800a54e:	4293      	cmp	r3, r2
 800a550:	d806      	bhi.n	800a560 <_free_r+0x1c4>
 800a552:	0c8b      	lsrs	r3, r1, #18
 800a554:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800a558:	00e4      	lsls	r4, r4, #3
 800a55a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800a55e:	e75c      	b.n	800a41a <_free_r+0x7e>
 800a560:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800a564:	227e      	movs	r2, #126	; 0x7e
 800a566:	e758      	b.n	800a41a <_free_r+0x7e>
 800a568:	f041 0201 	orr.w	r2, r1, #1
 800a56c:	606a      	str	r2, [r5, #4]
 800a56e:	6019      	str	r1, [r3, #0]
 800a570:	e796      	b.n	800a4a0 <_free_r+0x104>
 800a572:	bf00      	nop
 800a574:	20000460 	.word	0x20000460
 800a578:	20000468 	.word	0x20000468
 800a57c:	2000086c 	.word	0x2000086c
 800a580:	20000a64 	.word	0x20000a64

0800a584 <_fwalk>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800a58c:	d01b      	beq.n	800a5c6 <_fwalk+0x42>
 800a58e:	4688      	mov	r8, r1
 800a590:	2600      	movs	r6, #0
 800a592:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800a596:	3d01      	subs	r5, #1
 800a598:	d40f      	bmi.n	800a5ba <_fwalk+0x36>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	d905      	bls.n	800a5b2 <_fwalk+0x2e>
 800a5a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	d001      	beq.n	800a5b2 <_fwalk+0x2e>
 800a5ae:	47c0      	blx	r8
 800a5b0:	4306      	orrs	r6, r0
 800a5b2:	1c6b      	adds	r3, r5, #1
 800a5b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a5b8:	d1ef      	bne.n	800a59a <_fwalk+0x16>
 800a5ba:	683f      	ldr	r7, [r7, #0]
 800a5bc:	2f00      	cmp	r7, #0
 800a5be:	d1e8      	bne.n	800a592 <_fwalk+0xe>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c6:	463e      	mov	r6, r7
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	bf00      	nop

0800a5d0 <_fwalk_reent>:
 800a5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800a5d8:	d01f      	beq.n	800a61a <_fwalk_reent+0x4a>
 800a5da:	4688      	mov	r8, r1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	f04f 0900 	mov.w	r9, #0
 800a5e2:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800a5e6:	3d01      	subs	r5, #1
 800a5e8:	d411      	bmi.n	800a60e <_fwalk_reent+0x3e>
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	d906      	bls.n	800a606 <_fwalk_reent+0x36>
 800a5f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	d002      	beq.n	800a606 <_fwalk_reent+0x36>
 800a600:	47c0      	blx	r8
 800a602:	ea49 0900 	orr.w	r9, r9, r0
 800a606:	1c6b      	adds	r3, r5, #1
 800a608:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a60c:	d1ed      	bne.n	800a5ea <_fwalk_reent+0x1a>
 800a60e:	683f      	ldr	r7, [r7, #0]
 800a610:	2f00      	cmp	r7, #0
 800a612:	d1e6      	bne.n	800a5e2 <_fwalk_reent+0x12>
 800a614:	4648      	mov	r0, r9
 800a616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a61a:	46b9      	mov	r9, r7
 800a61c:	4648      	mov	r0, r9
 800a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a622:	bf00      	nop

0800a624 <__localeconv_l>:
 800a624:	30f0      	adds	r0, #240	; 0xf0
 800a626:	4770      	bx	lr

0800a628 <_localeconv_r>:
 800a628:	4a04      	ldr	r2, [pc, #16]	; (800a63c <_localeconv_r+0x14>)
 800a62a:	4b05      	ldr	r3, [pc, #20]	; (800a640 <_localeconv_r+0x18>)
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800a630:	2800      	cmp	r0, #0
 800a632:	bf08      	it	eq
 800a634:	4618      	moveq	r0, r3
 800a636:	30f0      	adds	r0, #240	; 0xf0
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000030 	.word	0x20000030
 800a640:	20000870 	.word	0x20000870

0800a644 <localeconv>:
 800a644:	4a04      	ldr	r2, [pc, #16]	; (800a658 <localeconv+0x14>)
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <localeconv+0x18>)
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800a64c:	2800      	cmp	r0, #0
 800a64e:	bf08      	it	eq
 800a650:	4618      	moveq	r0, r3
 800a652:	30f0      	adds	r0, #240	; 0xf0
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	20000030 	.word	0x20000030
 800a65c:	20000870 	.word	0x20000870

0800a660 <__retarget_lock_init>:
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop

0800a664 <__retarget_lock_init_recursive>:
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop

0800a668 <__retarget_lock_close>:
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop

0800a66c <__retarget_lock_close_recursive>:
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop

0800a670 <__retarget_lock_acquire>:
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop

0800a674 <__retarget_lock_acquire_recursive>:
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop

0800a678 <__retarget_lock_try_acquire>:
 800a678:	2001      	movs	r0, #1
 800a67a:	4770      	bx	lr

0800a67c <__retarget_lock_try_acquire_recursive>:
 800a67c:	2001      	movs	r0, #1
 800a67e:	4770      	bx	lr

0800a680 <__retarget_lock_release>:
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop

0800a684 <__retarget_lock_release_recursive>:
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop

0800a688 <__swhatbuf_r>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a690:	2900      	cmp	r1, #0
 800a692:	b096      	sub	sp, #88	; 0x58
 800a694:	4615      	mov	r5, r2
 800a696:	461e      	mov	r6, r3
 800a698:	da0f      	bge.n	800a6ba <__swhatbuf_r+0x32>
 800a69a:	89a2      	ldrh	r2, [r4, #12]
 800a69c:	2300      	movs	r3, #0
 800a69e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800a6a2:	6033      	str	r3, [r6, #0]
 800a6a4:	d104      	bne.n	800a6b0 <__swhatbuf_r+0x28>
 800a6a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6aa:	602b      	str	r3, [r5, #0]
 800a6ac:	b016      	add	sp, #88	; 0x58
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	2240      	movs	r2, #64	; 0x40
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	602a      	str	r2, [r5, #0]
 800a6b6:	b016      	add	sp, #88	; 0x58
 800a6b8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ba:	466a      	mov	r2, sp
 800a6bc:	f002 f8ee 	bl	800c89c <_fstat_r>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dbea      	blt.n	800a69a <__swhatbuf_r+0x12>
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6ca:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800a6ce:	fab3 f383 	clz	r3, r3
 800a6d2:	095b      	lsrs	r3, r3, #5
 800a6d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	602a      	str	r2, [r5, #0]
 800a6e0:	b016      	add	sp, #88	; 0x58
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}

0800a6e4 <__smakebuf_r>:
 800a6e4:	898a      	ldrh	r2, [r1, #12]
 800a6e6:	0792      	lsls	r2, r2, #30
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	d506      	bpl.n	800a6fa <__smakebuf_r+0x16>
 800a6ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800a6f8:	4770      	bx	lr
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	ab01      	add	r3, sp, #4
 800a700:	466a      	mov	r2, sp
 800a702:	460c      	mov	r4, r1
 800a704:	4605      	mov	r5, r0
 800a706:	f7ff ffbf 	bl	800a688 <__swhatbuf_r>
 800a70a:	9900      	ldr	r1, [sp, #0]
 800a70c:	4606      	mov	r6, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 f832 	bl	800a778 <_malloc_r>
 800a714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a718:	b1d8      	cbz	r0, 800a752 <__smakebuf_r+0x6e>
 800a71a:	4916      	ldr	r1, [pc, #88]	; (800a774 <__smakebuf_r+0x90>)
 800a71c:	63e9      	str	r1, [r5, #60]	; 0x3c
 800a71e:	9a01      	ldr	r2, [sp, #4]
 800a720:	9900      	ldr	r1, [sp, #0]
 800a722:	6020      	str	r0, [r4, #0]
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800a72e:	b91a      	cbnz	r2, 800a738 <__smakebuf_r+0x54>
 800a730:	4333      	orrs	r3, r6
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	b002      	add	sp, #8
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	4628      	mov	r0, r5
 800a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a73e:	f002 fa3f 	bl	800cbc0 <_isatty_r>
 800a742:	b1a0      	cbz	r0, 800a76e <__smakebuf_r+0x8a>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	b21b      	sxth	r3, r3
 800a750:	e7ee      	b.n	800a730 <__smakebuf_r+0x4c>
 800a752:	059a      	lsls	r2, r3, #22
 800a754:	d4ee      	bmi.n	800a734 <__smakebuf_r+0x50>
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a75e:	f043 0302 	orr.w	r3, r3, #2
 800a762:	2101      	movs	r1, #1
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800a76c:	e7e2      	b.n	800a734 <__smakebuf_r+0x50>
 800a76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a772:	e7dd      	b.n	800a730 <__smakebuf_r+0x4c>
 800a774:	0800a101 	.word	0x0800a101

0800a778 <_malloc_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	f101 050b 	add.w	r5, r1, #11
 800a780:	2d16      	cmp	r5, #22
 800a782:	b083      	sub	sp, #12
 800a784:	4606      	mov	r6, r0
 800a786:	d823      	bhi.n	800a7d0 <_malloc_r+0x58>
 800a788:	2910      	cmp	r1, #16
 800a78a:	f200 80b9 	bhi.w	800a900 <_malloc_r+0x188>
 800a78e:	f000 fae7 	bl	800ad60 <__malloc_lock>
 800a792:	2510      	movs	r5, #16
 800a794:	2318      	movs	r3, #24
 800a796:	2002      	movs	r0, #2
 800a798:	4fc5      	ldr	r7, [pc, #788]	; (800aab0 <_malloc_r+0x338>)
 800a79a:	443b      	add	r3, r7
 800a79c:	f1a3 0208 	sub.w	r2, r3, #8
 800a7a0:	685c      	ldr	r4, [r3, #4]
 800a7a2:	4294      	cmp	r4, r2
 800a7a4:	f000 8166 	beq.w	800aa74 <_malloc_r+0x2fc>
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	f023 0303 	bic.w	r3, r3, #3
 800a7ae:	4423      	add	r3, r4
 800a7b0:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	60e9      	str	r1, [r5, #12]
 800a7b8:	f042 0201 	orr.w	r2, r2, #1
 800a7bc:	608d      	str	r5, [r1, #8]
 800a7be:	4630      	mov	r0, r6
 800a7c0:	605a      	str	r2, [r3, #4]
 800a7c2:	f000 fad3 	bl	800ad6c <__malloc_unlock>
 800a7c6:	3408      	adds	r4, #8
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	b003      	add	sp, #12
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	f035 0507 	bics.w	r5, r5, #7
 800a7d4:	f100 8094 	bmi.w	800a900 <_malloc_r+0x188>
 800a7d8:	42a9      	cmp	r1, r5
 800a7da:	f200 8091 	bhi.w	800a900 <_malloc_r+0x188>
 800a7de:	f000 fabf 	bl	800ad60 <__malloc_lock>
 800a7e2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a7e6:	f0c0 8183 	bcc.w	800aaf0 <_malloc_r+0x378>
 800a7ea:	0a6b      	lsrs	r3, r5, #9
 800a7ec:	f000 808f 	beq.w	800a90e <_malloc_r+0x196>
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	f200 8146 	bhi.w	800aa82 <_malloc_r+0x30a>
 800a7f6:	09ab      	lsrs	r3, r5, #6
 800a7f8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800a7fc:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800a800:	00c3      	lsls	r3, r0, #3
 800a802:	4fab      	ldr	r7, [pc, #684]	; (800aab0 <_malloc_r+0x338>)
 800a804:	443b      	add	r3, r7
 800a806:	f1a3 0108 	sub.w	r1, r3, #8
 800a80a:	685c      	ldr	r4, [r3, #4]
 800a80c:	42a1      	cmp	r1, r4
 800a80e:	d106      	bne.n	800a81e <_malloc_r+0xa6>
 800a810:	e00c      	b.n	800a82c <_malloc_r+0xb4>
 800a812:	2a00      	cmp	r2, #0
 800a814:	f280 811d 	bge.w	800aa52 <_malloc_r+0x2da>
 800a818:	68e4      	ldr	r4, [r4, #12]
 800a81a:	42a1      	cmp	r1, r4
 800a81c:	d006      	beq.n	800a82c <_malloc_r+0xb4>
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	1b5a      	subs	r2, r3, r5
 800a826:	2a0f      	cmp	r2, #15
 800a828:	ddf3      	ble.n	800a812 <_malloc_r+0x9a>
 800a82a:	4660      	mov	r0, ip
 800a82c:	693c      	ldr	r4, [r7, #16]
 800a82e:	f8df c294 	ldr.w	ip, [pc, #660]	; 800aac4 <_malloc_r+0x34c>
 800a832:	4564      	cmp	r4, ip
 800a834:	d071      	beq.n	800a91a <_malloc_r+0x1a2>
 800a836:	6863      	ldr	r3, [r4, #4]
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	1b5a      	subs	r2, r3, r5
 800a83e:	2a0f      	cmp	r2, #15
 800a840:	f300 8144 	bgt.w	800aacc <_malloc_r+0x354>
 800a844:	2a00      	cmp	r2, #0
 800a846:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800a84a:	f280 8126 	bge.w	800aa9a <_malloc_r+0x322>
 800a84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a852:	f080 8169 	bcs.w	800ab28 <_malloc_r+0x3b0>
 800a856:	08db      	lsrs	r3, r3, #3
 800a858:	1c59      	adds	r1, r3, #1
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800a860:	f8c4 8008 	str.w	r8, [r4, #8]
 800a864:	f04f 0e01 	mov.w	lr, #1
 800a868:	109b      	asrs	r3, r3, #2
 800a86a:	fa0e f303 	lsl.w	r3, lr, r3
 800a86e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800a872:	4313      	orrs	r3, r2
 800a874:	f1ae 0208 	sub.w	r2, lr, #8
 800a878:	60e2      	str	r2, [r4, #12]
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800a880:	f8c8 400c 	str.w	r4, [r8, #12]
 800a884:	1082      	asrs	r2, r0, #2
 800a886:	2401      	movs	r4, #1
 800a888:	4094      	lsls	r4, r2
 800a88a:	429c      	cmp	r4, r3
 800a88c:	d84b      	bhi.n	800a926 <_malloc_r+0x1ae>
 800a88e:	421c      	tst	r4, r3
 800a890:	d106      	bne.n	800a8a0 <_malloc_r+0x128>
 800a892:	f020 0003 	bic.w	r0, r0, #3
 800a896:	0064      	lsls	r4, r4, #1
 800a898:	421c      	tst	r4, r3
 800a89a:	f100 0004 	add.w	r0, r0, #4
 800a89e:	d0fa      	beq.n	800a896 <_malloc_r+0x11e>
 800a8a0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a8a4:	46ce      	mov	lr, r9
 800a8a6:	4680      	mov	r8, r0
 800a8a8:	f8de 300c 	ldr.w	r3, [lr, #12]
 800a8ac:	459e      	cmp	lr, r3
 800a8ae:	d107      	bne.n	800a8c0 <_malloc_r+0x148>
 800a8b0:	e122      	b.n	800aaf8 <_malloc_r+0x380>
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	f280 8129 	bge.w	800ab0a <_malloc_r+0x392>
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	459e      	cmp	lr, r3
 800a8bc:	f000 811c 	beq.w	800aaf8 <_malloc_r+0x380>
 800a8c0:	6859      	ldr	r1, [r3, #4]
 800a8c2:	f021 0103 	bic.w	r1, r1, #3
 800a8c6:	1b4a      	subs	r2, r1, r5
 800a8c8:	2a0f      	cmp	r2, #15
 800a8ca:	ddf2      	ble.n	800a8b2 <_malloc_r+0x13a>
 800a8cc:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800a8d0:	195c      	adds	r4, r3, r5
 800a8d2:	f045 0501 	orr.w	r5, r5, #1
 800a8d6:	605d      	str	r5, [r3, #4]
 800a8d8:	f042 0501 	orr.w	r5, r2, #1
 800a8dc:	f8c8 e00c 	str.w	lr, [r8, #12]
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f8ce 8008 	str.w	r8, [lr, #8]
 800a8e6:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800a8ea:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800a8ee:	6065      	str	r5, [r4, #4]
 800a8f0:	505a      	str	r2, [r3, r1]
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	f000 fa3a 	bl	800ad6c <__malloc_unlock>
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	f103 0408 	add.w	r4, r3, #8
 800a8fe:	e763      	b.n	800a7c8 <_malloc_r+0x50>
 800a900:	2400      	movs	r4, #0
 800a902:	230c      	movs	r3, #12
 800a904:	4620      	mov	r0, r4
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	b003      	add	sp, #12
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a912:	2040      	movs	r0, #64	; 0x40
 800a914:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800a918:	e773      	b.n	800a802 <_malloc_r+0x8a>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	1082      	asrs	r2, r0, #2
 800a91e:	2401      	movs	r4, #1
 800a920:	4094      	lsls	r4, r2
 800a922:	429c      	cmp	r4, r3
 800a924:	d9b3      	bls.n	800a88e <_malloc_r+0x116>
 800a926:	68bc      	ldr	r4, [r7, #8]
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	f023 0903 	bic.w	r9, r3, #3
 800a92e:	45a9      	cmp	r9, r5
 800a930:	d303      	bcc.n	800a93a <_malloc_r+0x1c2>
 800a932:	eba9 0305 	sub.w	r3, r9, r5
 800a936:	2b0f      	cmp	r3, #15
 800a938:	dc7b      	bgt.n	800aa32 <_malloc_r+0x2ba>
 800a93a:	4b5e      	ldr	r3, [pc, #376]	; (800aab4 <_malloc_r+0x33c>)
 800a93c:	f8df a188 	ldr.w	sl, [pc, #392]	; 800aac8 <_malloc_r+0x350>
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	f8da 3000 	ldr.w	r3, [sl]
 800a946:	3301      	adds	r3, #1
 800a948:	eb05 0802 	add.w	r8, r5, r2
 800a94c:	f000 8148 	beq.w	800abe0 <_malloc_r+0x468>
 800a950:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800a954:	f108 080f 	add.w	r8, r8, #15
 800a958:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800a95c:	f028 080f 	bic.w	r8, r8, #15
 800a960:	4641      	mov	r1, r8
 800a962:	4630      	mov	r0, r6
 800a964:	f000 fea0 	bl	800b6a8 <_sbrk_r>
 800a968:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a96c:	4683      	mov	fp, r0
 800a96e:	f000 8104 	beq.w	800ab7a <_malloc_r+0x402>
 800a972:	eb04 0009 	add.w	r0, r4, r9
 800a976:	4558      	cmp	r0, fp
 800a978:	f200 80fd 	bhi.w	800ab76 <_malloc_r+0x3fe>
 800a97c:	4a4e      	ldr	r2, [pc, #312]	; (800aab8 <_malloc_r+0x340>)
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	4443      	add	r3, r8
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	f000 814d 	beq.w	800ac22 <_malloc_r+0x4aa>
 800a988:	f8da 1000 	ldr.w	r1, [sl]
 800a98c:	3101      	adds	r1, #1
 800a98e:	bf1b      	ittet	ne
 800a990:	ebab 0000 	subne.w	r0, fp, r0
 800a994:	181b      	addne	r3, r3, r0
 800a996:	f8ca b000 	streq.w	fp, [sl]
 800a99a:	6013      	strne	r3, [r2, #0]
 800a99c:	f01b 0307 	ands.w	r3, fp, #7
 800a9a0:	f000 8134 	beq.w	800ac0c <_malloc_r+0x494>
 800a9a4:	f1c3 0108 	rsb	r1, r3, #8
 800a9a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a9ac:	448b      	add	fp, r1
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	44d8      	add	r8, fp
 800a9b2:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800a9b6:	eba3 0808 	sub.w	r8, r3, r8
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	4630      	mov	r0, r6
 800a9be:	9201      	str	r2, [sp, #4]
 800a9c0:	f000 fe72 	bl	800b6a8 <_sbrk_r>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	9a01      	ldr	r2, [sp, #4]
 800a9c8:	f000 8146 	beq.w	800ac58 <_malloc_r+0x4e0>
 800a9cc:	eba0 010b 	sub.w	r1, r0, fp
 800a9d0:	4441      	add	r1, r8
 800a9d2:	f041 0101 	orr.w	r1, r1, #1
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	f8c7 b008 	str.w	fp, [r7, #8]
 800a9dc:	4443      	add	r3, r8
 800a9de:	42bc      	cmp	r4, r7
 800a9e0:	f8cb 1004 	str.w	r1, [fp, #4]
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	d015      	beq.n	800aa14 <_malloc_r+0x29c>
 800a9e8:	f1b9 0f0f 	cmp.w	r9, #15
 800a9ec:	f240 8130 	bls.w	800ac50 <_malloc_r+0x4d8>
 800a9f0:	6860      	ldr	r0, [r4, #4]
 800a9f2:	f1a9 010c 	sub.w	r1, r9, #12
 800a9f6:	f021 0107 	bic.w	r1, r1, #7
 800a9fa:	f000 0001 	and.w	r0, r0, #1
 800a9fe:	eb04 0c01 	add.w	ip, r4, r1
 800aa02:	4308      	orrs	r0, r1
 800aa04:	f04f 0e05 	mov.w	lr, #5
 800aa08:	290f      	cmp	r1, #15
 800aa0a:	6060      	str	r0, [r4, #4]
 800aa0c:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800aa10:	f200 813a 	bhi.w	800ac88 <_malloc_r+0x510>
 800aa14:	4a29      	ldr	r2, [pc, #164]	; (800aabc <_malloc_r+0x344>)
 800aa16:	482a      	ldr	r0, [pc, #168]	; (800aac0 <_malloc_r+0x348>)
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	68bc      	ldr	r4, [r7, #8]
 800aa1c:	428b      	cmp	r3, r1
 800aa1e:	6801      	ldr	r1, [r0, #0]
 800aa20:	bf88      	it	hi
 800aa22:	6013      	strhi	r3, [r2, #0]
 800aa24:	6862      	ldr	r2, [r4, #4]
 800aa26:	428b      	cmp	r3, r1
 800aa28:	f022 0203 	bic.w	r2, r2, #3
 800aa2c:	bf88      	it	hi
 800aa2e:	6003      	strhi	r3, [r0, #0]
 800aa30:	e0a7      	b.n	800ab82 <_malloc_r+0x40a>
 800aa32:	1962      	adds	r2, r4, r5
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	f045 0501 	orr.w	r5, r5, #1
 800aa3c:	6065      	str	r5, [r4, #4]
 800aa3e:	4630      	mov	r0, r6
 800aa40:	60ba      	str	r2, [r7, #8]
 800aa42:	6053      	str	r3, [r2, #4]
 800aa44:	f000 f992 	bl	800ad6c <__malloc_unlock>
 800aa48:	3408      	adds	r4, #8
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa52:	4423      	add	r3, r4
 800aa54:	68e1      	ldr	r1, [r4, #12]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	68a5      	ldr	r5, [r4, #8]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	60e9      	str	r1, [r5, #12]
 800aa60:	4630      	mov	r0, r6
 800aa62:	608d      	str	r5, [r1, #8]
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	f000 f981 	bl	800ad6c <__malloc_unlock>
 800aa6a:	3408      	adds	r4, #8
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	b003      	add	sp, #12
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	68dc      	ldr	r4, [r3, #12]
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	bf08      	it	eq
 800aa7a:	3002      	addeq	r0, #2
 800aa7c:	f43f aed6 	beq.w	800a82c <_malloc_r+0xb4>
 800aa80:	e692      	b.n	800a7a8 <_malloc_r+0x30>
 800aa82:	2b14      	cmp	r3, #20
 800aa84:	d971      	bls.n	800ab6a <_malloc_r+0x3f2>
 800aa86:	2b54      	cmp	r3, #84	; 0x54
 800aa88:	f200 80ad 	bhi.w	800abe6 <_malloc_r+0x46e>
 800aa8c:	0b2b      	lsrs	r3, r5, #12
 800aa8e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800aa92:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800aa96:	00c3      	lsls	r3, r0, #3
 800aa98:	e6b3      	b.n	800a802 <_malloc_r+0x8a>
 800aa9a:	4423      	add	r3, r4
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	f042 0201 	orr.w	r2, r2, #1
 800aaa4:	605a      	str	r2, [r3, #4]
 800aaa6:	3408      	adds	r4, #8
 800aaa8:	f000 f960 	bl	800ad6c <__malloc_unlock>
 800aaac:	e68c      	b.n	800a7c8 <_malloc_r+0x50>
 800aaae:	bf00      	nop
 800aab0:	20000460 	.word	0x20000460
 800aab4:	20000a64 	.word	0x20000a64
 800aab8:	20000a34 	.word	0x20000a34
 800aabc:	20000a5c 	.word	0x20000a5c
 800aac0:	20000a60 	.word	0x20000a60
 800aac4:	20000468 	.word	0x20000468
 800aac8:	20000868 	.word	0x20000868
 800aacc:	1961      	adds	r1, r4, r5
 800aace:	f045 0e01 	orr.w	lr, r5, #1
 800aad2:	f042 0501 	orr.w	r5, r2, #1
 800aad6:	f8c4 e004 	str.w	lr, [r4, #4]
 800aada:	4630      	mov	r0, r6
 800aadc:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800aae0:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800aae4:	604d      	str	r5, [r1, #4]
 800aae6:	50e2      	str	r2, [r4, r3]
 800aae8:	f000 f940 	bl	800ad6c <__malloc_unlock>
 800aaec:	3408      	adds	r4, #8
 800aaee:	e66b      	b.n	800a7c8 <_malloc_r+0x50>
 800aaf0:	08e8      	lsrs	r0, r5, #3
 800aaf2:	f105 0308 	add.w	r3, r5, #8
 800aaf6:	e64f      	b.n	800a798 <_malloc_r+0x20>
 800aaf8:	f108 0801 	add.w	r8, r8, #1
 800aafc:	f018 0f03 	tst.w	r8, #3
 800ab00:	f10e 0e08 	add.w	lr, lr, #8
 800ab04:	f47f aed0 	bne.w	800a8a8 <_malloc_r+0x130>
 800ab08:	e052      	b.n	800abb0 <_malloc_r+0x438>
 800ab0a:	4419      	add	r1, r3
 800ab0c:	461c      	mov	r4, r3
 800ab0e:	684a      	ldr	r2, [r1, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	604a      	str	r2, [r1, #4]
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	60eb      	str	r3, [r5, #12]
 800ab20:	609d      	str	r5, [r3, #8]
 800ab22:	f000 f923 	bl	800ad6c <__malloc_unlock>
 800ab26:	e64f      	b.n	800a7c8 <_malloc_r+0x50>
 800ab28:	0a5a      	lsrs	r2, r3, #9
 800ab2a:	2a04      	cmp	r2, #4
 800ab2c:	d935      	bls.n	800ab9a <_malloc_r+0x422>
 800ab2e:	2a14      	cmp	r2, #20
 800ab30:	d86f      	bhi.n	800ac12 <_malloc_r+0x49a>
 800ab32:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800ab36:	00c9      	lsls	r1, r1, #3
 800ab38:	325b      	adds	r2, #91	; 0x5b
 800ab3a:	eb07 0e01 	add.w	lr, r7, r1
 800ab3e:	5879      	ldr	r1, [r7, r1]
 800ab40:	f1ae 0e08 	sub.w	lr, lr, #8
 800ab44:	458e      	cmp	lr, r1
 800ab46:	d058      	beq.n	800abfa <_malloc_r+0x482>
 800ab48:	684a      	ldr	r2, [r1, #4]
 800ab4a:	f022 0203 	bic.w	r2, r2, #3
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d902      	bls.n	800ab58 <_malloc_r+0x3e0>
 800ab52:	6889      	ldr	r1, [r1, #8]
 800ab54:	458e      	cmp	lr, r1
 800ab56:	d1f7      	bne.n	800ab48 <_malloc_r+0x3d0>
 800ab58:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800ab62:	f8ce 4008 	str.w	r4, [lr, #8]
 800ab66:	60cc      	str	r4, [r1, #12]
 800ab68:	e68c      	b.n	800a884 <_malloc_r+0x10c>
 800ab6a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800ab6e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800ab72:	00c3      	lsls	r3, r0, #3
 800ab74:	e645      	b.n	800a802 <_malloc_r+0x8a>
 800ab76:	42bc      	cmp	r4, r7
 800ab78:	d072      	beq.n	800ac60 <_malloc_r+0x4e8>
 800ab7a:	68bc      	ldr	r4, [r7, #8]
 800ab7c:	6862      	ldr	r2, [r4, #4]
 800ab7e:	f022 0203 	bic.w	r2, r2, #3
 800ab82:	4295      	cmp	r5, r2
 800ab84:	eba2 0305 	sub.w	r3, r2, r5
 800ab88:	d802      	bhi.n	800ab90 <_malloc_r+0x418>
 800ab8a:	2b0f      	cmp	r3, #15
 800ab8c:	f73f af51 	bgt.w	800aa32 <_malloc_r+0x2ba>
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f8eb 	bl	800ad6c <__malloc_unlock>
 800ab96:	2400      	movs	r4, #0
 800ab98:	e616      	b.n	800a7c8 <_malloc_r+0x50>
 800ab9a:	099a      	lsrs	r2, r3, #6
 800ab9c:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800aba0:	00c9      	lsls	r1, r1, #3
 800aba2:	3238      	adds	r2, #56	; 0x38
 800aba4:	e7c9      	b.n	800ab3a <_malloc_r+0x3c2>
 800aba6:	f8d9 9000 	ldr.w	r9, [r9]
 800abaa:	4599      	cmp	r9, r3
 800abac:	f040 8083 	bne.w	800acb6 <_malloc_r+0x53e>
 800abb0:	f010 0f03 	tst.w	r0, #3
 800abb4:	f1a9 0308 	sub.w	r3, r9, #8
 800abb8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800abbc:	d1f3      	bne.n	800aba6 <_malloc_r+0x42e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	ea23 0304 	bic.w	r3, r3, r4
 800abc4:	607b      	str	r3, [r7, #4]
 800abc6:	0064      	lsls	r4, r4, #1
 800abc8:	429c      	cmp	r4, r3
 800abca:	f63f aeac 	bhi.w	800a926 <_malloc_r+0x1ae>
 800abce:	b91c      	cbnz	r4, 800abd8 <_malloc_r+0x460>
 800abd0:	e6a9      	b.n	800a926 <_malloc_r+0x1ae>
 800abd2:	0064      	lsls	r4, r4, #1
 800abd4:	f108 0804 	add.w	r8, r8, #4
 800abd8:	421c      	tst	r4, r3
 800abda:	d0fa      	beq.n	800abd2 <_malloc_r+0x45a>
 800abdc:	4640      	mov	r0, r8
 800abde:	e65f      	b.n	800a8a0 <_malloc_r+0x128>
 800abe0:	f108 0810 	add.w	r8, r8, #16
 800abe4:	e6bc      	b.n	800a960 <_malloc_r+0x1e8>
 800abe6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800abea:	d826      	bhi.n	800ac3a <_malloc_r+0x4c2>
 800abec:	0beb      	lsrs	r3, r5, #15
 800abee:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800abf2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800abf6:	00c3      	lsls	r3, r0, #3
 800abf8:	e603      	b.n	800a802 <_malloc_r+0x8a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	1092      	asrs	r2, r2, #2
 800abfe:	f04f 0801 	mov.w	r8, #1
 800ac02:	fa08 f202 	lsl.w	r2, r8, r2
 800ac06:	4313      	orrs	r3, r2
 800ac08:	607b      	str	r3, [r7, #4]
 800ac0a:	e7a8      	b.n	800ab5e <_malloc_r+0x3e6>
 800ac0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac10:	e6ce      	b.n	800a9b0 <_malloc_r+0x238>
 800ac12:	2a54      	cmp	r2, #84	; 0x54
 800ac14:	d829      	bhi.n	800ac6a <_malloc_r+0x4f2>
 800ac16:	0b1a      	lsrs	r2, r3, #12
 800ac18:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800ac1c:	00c9      	lsls	r1, r1, #3
 800ac1e:	326e      	adds	r2, #110	; 0x6e
 800ac20:	e78b      	b.n	800ab3a <_malloc_r+0x3c2>
 800ac22:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800ac26:	2900      	cmp	r1, #0
 800ac28:	f47f aeae 	bne.w	800a988 <_malloc_r+0x210>
 800ac2c:	eb09 0208 	add.w	r2, r9, r8
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	604a      	str	r2, [r1, #4]
 800ac38:	e6ec      	b.n	800aa14 <_malloc_r+0x29c>
 800ac3a:	f240 5254 	movw	r2, #1364	; 0x554
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d81c      	bhi.n	800ac7c <_malloc_r+0x504>
 800ac42:	0cab      	lsrs	r3, r5, #18
 800ac44:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800ac48:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800ac4c:	00c3      	lsls	r3, r0, #3
 800ac4e:	e5d8      	b.n	800a802 <_malloc_r+0x8a>
 800ac50:	2301      	movs	r3, #1
 800ac52:	f8cb 3004 	str.w	r3, [fp, #4]
 800ac56:	e79b      	b.n	800ab90 <_malloc_r+0x418>
 800ac58:	2101      	movs	r1, #1
 800ac5a:	f04f 0800 	mov.w	r8, #0
 800ac5e:	e6ba      	b.n	800a9d6 <_malloc_r+0x25e>
 800ac60:	4a16      	ldr	r2, [pc, #88]	; (800acbc <_malloc_r+0x544>)
 800ac62:	6813      	ldr	r3, [r2, #0]
 800ac64:	4443      	add	r3, r8
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	e68e      	b.n	800a988 <_malloc_r+0x210>
 800ac6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ac6e:	d814      	bhi.n	800ac9a <_malloc_r+0x522>
 800ac70:	0bda      	lsrs	r2, r3, #15
 800ac72:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800ac76:	00c9      	lsls	r1, r1, #3
 800ac78:	3277      	adds	r2, #119	; 0x77
 800ac7a:	e75e      	b.n	800ab3a <_malloc_r+0x3c2>
 800ac7c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800ac80:	207f      	movs	r0, #127	; 0x7f
 800ac82:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800ac86:	e5bc      	b.n	800a802 <_malloc_r+0x8a>
 800ac88:	f104 0108 	add.w	r1, r4, #8
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	f7ff fb84 	bl	800a39c <_free_r>
 800ac94:	9a01      	ldr	r2, [sp, #4]
 800ac96:	6813      	ldr	r3, [r2, #0]
 800ac98:	e6bc      	b.n	800aa14 <_malloc_r+0x29c>
 800ac9a:	f240 5154 	movw	r1, #1364	; 0x554
 800ac9e:	428a      	cmp	r2, r1
 800aca0:	d805      	bhi.n	800acae <_malloc_r+0x536>
 800aca2:	0c9a      	lsrs	r2, r3, #18
 800aca4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800aca8:	00c9      	lsls	r1, r1, #3
 800acaa:	327c      	adds	r2, #124	; 0x7c
 800acac:	e745      	b.n	800ab3a <_malloc_r+0x3c2>
 800acae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800acb2:	227e      	movs	r2, #126	; 0x7e
 800acb4:	e741      	b.n	800ab3a <_malloc_r+0x3c2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	e785      	b.n	800abc6 <_malloc_r+0x44e>
 800acba:	bf00      	nop
 800acbc:	20000a34 	.word	0x20000a34

0800acc0 <memchr>:
 800acc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800acc4:	2a10      	cmp	r2, #16
 800acc6:	db2b      	blt.n	800ad20 <memchr+0x60>
 800acc8:	f010 0f07 	tst.w	r0, #7
 800accc:	d008      	beq.n	800ace0 <memchr+0x20>
 800acce:	f810 3b01 	ldrb.w	r3, [r0], #1
 800acd2:	3a01      	subs	r2, #1
 800acd4:	428b      	cmp	r3, r1
 800acd6:	d02d      	beq.n	800ad34 <memchr+0x74>
 800acd8:	f010 0f07 	tst.w	r0, #7
 800acdc:	b342      	cbz	r2, 800ad30 <memchr+0x70>
 800acde:	d1f6      	bne.n	800acce <memchr+0xe>
 800ace0:	b4f0      	push	{r4, r5, r6, r7}
 800ace2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800ace6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800acea:	f022 0407 	bic.w	r4, r2, #7
 800acee:	f07f 0700 	mvns.w	r7, #0
 800acf2:	2300      	movs	r3, #0
 800acf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800acf8:	3c08      	subs	r4, #8
 800acfa:	ea85 0501 	eor.w	r5, r5, r1
 800acfe:	ea86 0601 	eor.w	r6, r6, r1
 800ad02:	fa85 f547 	uadd8	r5, r5, r7
 800ad06:	faa3 f587 	sel	r5, r3, r7
 800ad0a:	fa86 f647 	uadd8	r6, r6, r7
 800ad0e:	faa5 f687 	sel	r6, r5, r7
 800ad12:	b98e      	cbnz	r6, 800ad38 <memchr+0x78>
 800ad14:	d1ee      	bne.n	800acf4 <memchr+0x34>
 800ad16:	bcf0      	pop	{r4, r5, r6, r7}
 800ad18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ad1c:	f002 0207 	and.w	r2, r2, #7
 800ad20:	b132      	cbz	r2, 800ad30 <memchr+0x70>
 800ad22:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad26:	3a01      	subs	r2, #1
 800ad28:	ea83 0301 	eor.w	r3, r3, r1
 800ad2c:	b113      	cbz	r3, 800ad34 <memchr+0x74>
 800ad2e:	d1f8      	bne.n	800ad22 <memchr+0x62>
 800ad30:	2000      	movs	r0, #0
 800ad32:	4770      	bx	lr
 800ad34:	3801      	subs	r0, #1
 800ad36:	4770      	bx	lr
 800ad38:	2d00      	cmp	r5, #0
 800ad3a:	bf06      	itte	eq
 800ad3c:	4635      	moveq	r5, r6
 800ad3e:	3803      	subeq	r0, #3
 800ad40:	3807      	subne	r0, #7
 800ad42:	f015 0f01 	tst.w	r5, #1
 800ad46:	d107      	bne.n	800ad58 <memchr+0x98>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800ad4e:	bf02      	ittt	eq
 800ad50:	3001      	addeq	r0, #1
 800ad52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800ad56:	3001      	addeq	r0, #1
 800ad58:	bcf0      	pop	{r4, r5, r6, r7}
 800ad5a:	3801      	subs	r0, #1
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop

0800ad60 <__malloc_lock>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__malloc_lock+0x8>)
 800ad62:	f7ff bc87 	b.w	800a674 <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	20001178 	.word	0x20001178

0800ad6c <__malloc_unlock>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	; (800ad74 <__malloc_unlock+0x8>)
 800ad6e:	f7ff bc89 	b.w	800a684 <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	20001178 	.word	0x20001178

0800ad78 <_Balloc>:
 800ad78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	460c      	mov	r4, r1
 800ad80:	b14b      	cbz	r3, 800ad96 <_Balloc+0x1e>
 800ad82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ad86:	b180      	cbz	r0, 800adaa <_Balloc+0x32>
 800ad88:	6802      	ldr	r2, [r0, #0]
 800ad8a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	2221      	movs	r2, #33	; 0x21
 800ad98:	2104      	movs	r1, #4
 800ad9a:	f001 fc2b 	bl	800c5f4 <_calloc_r>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d1ed      	bne.n	800ad82 <_Balloc+0xa>
 800ada6:	2000      	movs	r0, #0
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
 800adaa:	2101      	movs	r1, #1
 800adac:	fa01 f604 	lsl.w	r6, r1, r4
 800adb0:	1d72      	adds	r2, r6, #5
 800adb2:	4628      	mov	r0, r5
 800adb4:	0092      	lsls	r2, r2, #2
 800adb6:	f001 fc1d 	bl	800c5f4 <_calloc_r>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0f3      	beq.n	800ada6 <_Balloc+0x2e>
 800adbe:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800adc2:	e7e4      	b.n	800ad8e <_Balloc+0x16>

0800adc4 <_Bfree>:
 800adc4:	b131      	cbz	r1, 800add4 <_Bfree+0x10>
 800adc6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800adc8:	684a      	ldr	r2, [r1, #4]
 800adca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800adce:	6008      	str	r0, [r1, #0]
 800add0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop

0800add8 <__multadd>:
 800add8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adda:	690c      	ldr	r4, [r1, #16]
 800addc:	b083      	sub	sp, #12
 800adde:	460d      	mov	r5, r1
 800ade0:	4606      	mov	r6, r0
 800ade2:	f101 0c14 	add.w	ip, r1, #20
 800ade6:	2700      	movs	r7, #0
 800ade8:	f8dc 0000 	ldr.w	r0, [ip]
 800adec:	b281      	uxth	r1, r0
 800adee:	fb02 3301 	mla	r3, r2, r1, r3
 800adf2:	0c01      	lsrs	r1, r0, #16
 800adf4:	0c18      	lsrs	r0, r3, #16
 800adf6:	fb02 0101 	mla	r1, r2, r1, r0
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	3701      	adds	r7, #1
 800adfe:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800ae02:	42bc      	cmp	r4, r7
 800ae04:	f84c 3b04 	str.w	r3, [ip], #4
 800ae08:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800ae0c:	dcec      	bgt.n	800ade8 <__multadd+0x10>
 800ae0e:	b13b      	cbz	r3, 800ae20 <__multadd+0x48>
 800ae10:	68aa      	ldr	r2, [r5, #8]
 800ae12:	42a2      	cmp	r2, r4
 800ae14:	dd07      	ble.n	800ae26 <__multadd+0x4e>
 800ae16:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800ae1a:	3401      	adds	r4, #1
 800ae1c:	6153      	str	r3, [r2, #20]
 800ae1e:	612c      	str	r4, [r5, #16]
 800ae20:	4628      	mov	r0, r5
 800ae22:	b003      	add	sp, #12
 800ae24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae26:	6869      	ldr	r1, [r5, #4]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	3101      	adds	r1, #1
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff ffa3 	bl	800ad78 <_Balloc>
 800ae32:	692a      	ldr	r2, [r5, #16]
 800ae34:	3202      	adds	r2, #2
 800ae36:	f105 010c 	add.w	r1, r5, #12
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	0092      	lsls	r2, r2, #2
 800ae3e:	300c      	adds	r0, #12
 800ae40:	f7fc f94e 	bl	80070e0 <memcpy>
 800ae44:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800ae46:	6869      	ldr	r1, [r5, #4]
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800ae4e:	6028      	str	r0, [r5, #0]
 800ae50:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800ae54:	463d      	mov	r5, r7
 800ae56:	e7de      	b.n	800ae16 <__multadd+0x3e>

0800ae58 <__s2b>:
 800ae58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae5c:	4c23      	ldr	r4, [pc, #140]	; (800aeec <__s2b+0x94>)
 800ae5e:	9d08      	ldr	r5, [sp, #32]
 800ae60:	461e      	mov	r6, r3
 800ae62:	3308      	adds	r3, #8
 800ae64:	fb84 4c03 	smull	r4, ip, r4, r3
 800ae68:	17db      	asrs	r3, r3, #31
 800ae6a:	ebc3 0c6c 	rsb	ip, r3, ip, asr #1
 800ae6e:	f1bc 0f01 	cmp.w	ip, #1
 800ae72:	4607      	mov	r7, r0
 800ae74:	460c      	mov	r4, r1
 800ae76:	4690      	mov	r8, r2
 800ae78:	dd35      	ble.n	800aee6 <__s2b+0x8e>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	459c      	cmp	ip, r3
 800ae82:	f101 0101 	add.w	r1, r1, #1
 800ae86:	dcfa      	bgt.n	800ae7e <__s2b+0x26>
 800ae88:	4638      	mov	r0, r7
 800ae8a:	f7ff ff75 	bl	800ad78 <_Balloc>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f1b8 0f09 	cmp.w	r8, #9
 800ae94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae98:	dd21      	ble.n	800aede <__s2b+0x86>
 800ae9a:	f104 0909 	add.w	r9, r4, #9
 800ae9e:	464d      	mov	r5, r9
 800aea0:	4444      	add	r4, r8
 800aea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aea6:	4601      	mov	r1, r0
 800aea8:	3b30      	subs	r3, #48	; 0x30
 800aeaa:	220a      	movs	r2, #10
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ff93 	bl	800add8 <__multadd>
 800aeb2:	42ac      	cmp	r4, r5
 800aeb4:	d1f5      	bne.n	800aea2 <__s2b+0x4a>
 800aeb6:	eb09 0408 	add.w	r4, r9, r8
 800aeba:	3c08      	subs	r4, #8
 800aebc:	4546      	cmp	r6, r8
 800aebe:	dd0c      	ble.n	800aeda <__s2b+0x82>
 800aec0:	eba6 0608 	sub.w	r6, r6, r8
 800aec4:	4426      	add	r6, r4
 800aec6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aeca:	4601      	mov	r1, r0
 800aecc:	3b30      	subs	r3, #48	; 0x30
 800aece:	220a      	movs	r2, #10
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ff81 	bl	800add8 <__multadd>
 800aed6:	42a6      	cmp	r6, r4
 800aed8:	d1f5      	bne.n	800aec6 <__s2b+0x6e>
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	340a      	adds	r4, #10
 800aee0:	f04f 0809 	mov.w	r8, #9
 800aee4:	e7ea      	b.n	800aebc <__s2b+0x64>
 800aee6:	2100      	movs	r1, #0
 800aee8:	e7ce      	b.n	800ae88 <__s2b+0x30>
 800aeea:	bf00      	nop
 800aeec:	38e38e39 	.word	0x38e38e39

0800aef0 <__hi0bits>:
 800aef0:	0c02      	lsrs	r2, r0, #16
 800aef2:	0412      	lsls	r2, r2, #16
 800aef4:	4603      	mov	r3, r0
 800aef6:	b9c2      	cbnz	r2, 800af2a <__hi0bits+0x3a>
 800aef8:	0403      	lsls	r3, r0, #16
 800aefa:	2010      	movs	r0, #16
 800aefc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af00:	bf04      	itt	eq
 800af02:	021b      	lsleq	r3, r3, #8
 800af04:	3008      	addeq	r0, #8
 800af06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af0a:	bf04      	itt	eq
 800af0c:	011b      	lsleq	r3, r3, #4
 800af0e:	3004      	addeq	r0, #4
 800af10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af14:	bf04      	itt	eq
 800af16:	009b      	lsleq	r3, r3, #2
 800af18:	3002      	addeq	r0, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	db04      	blt.n	800af28 <__hi0bits+0x38>
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	d501      	bpl.n	800af26 <__hi0bits+0x36>
 800af22:	3001      	adds	r0, #1
 800af24:	4770      	bx	lr
 800af26:	2020      	movs	r0, #32
 800af28:	4770      	bx	lr
 800af2a:	2000      	movs	r0, #0
 800af2c:	e7e6      	b.n	800aefc <__hi0bits+0xc>
 800af2e:	bf00      	nop

0800af30 <__lo0bits>:
 800af30:	6803      	ldr	r3, [r0, #0]
 800af32:	f013 0207 	ands.w	r2, r3, #7
 800af36:	4601      	mov	r1, r0
 800af38:	d007      	beq.n	800af4a <__lo0bits+0x1a>
 800af3a:	07da      	lsls	r2, r3, #31
 800af3c:	d41f      	bmi.n	800af7e <__lo0bits+0x4e>
 800af3e:	0798      	lsls	r0, r3, #30
 800af40:	d51f      	bpl.n	800af82 <__lo0bits+0x52>
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	600b      	str	r3, [r1, #0]
 800af46:	2001      	movs	r0, #1
 800af48:	4770      	bx	lr
 800af4a:	b298      	uxth	r0, r3
 800af4c:	b1a0      	cbz	r0, 800af78 <__lo0bits+0x48>
 800af4e:	4610      	mov	r0, r2
 800af50:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af54:	bf04      	itt	eq
 800af56:	0a1b      	lsreq	r3, r3, #8
 800af58:	3008      	addeq	r0, #8
 800af5a:	071a      	lsls	r2, r3, #28
 800af5c:	bf04      	itt	eq
 800af5e:	091b      	lsreq	r3, r3, #4
 800af60:	3004      	addeq	r0, #4
 800af62:	079a      	lsls	r2, r3, #30
 800af64:	bf04      	itt	eq
 800af66:	089b      	lsreq	r3, r3, #2
 800af68:	3002      	addeq	r0, #2
 800af6a:	07da      	lsls	r2, r3, #31
 800af6c:	d402      	bmi.n	800af74 <__lo0bits+0x44>
 800af6e:	085b      	lsrs	r3, r3, #1
 800af70:	d00b      	beq.n	800af8a <__lo0bits+0x5a>
 800af72:	3001      	adds	r0, #1
 800af74:	600b      	str	r3, [r1, #0]
 800af76:	4770      	bx	lr
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	2010      	movs	r0, #16
 800af7c:	e7e8      	b.n	800af50 <__lo0bits+0x20>
 800af7e:	2000      	movs	r0, #0
 800af80:	4770      	bx	lr
 800af82:	089b      	lsrs	r3, r3, #2
 800af84:	600b      	str	r3, [r1, #0]
 800af86:	2002      	movs	r0, #2
 800af88:	4770      	bx	lr
 800af8a:	2020      	movs	r0, #32
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop

0800af90 <__i2b>:
 800af90:	b510      	push	{r4, lr}
 800af92:	460c      	mov	r4, r1
 800af94:	2101      	movs	r1, #1
 800af96:	f7ff feef 	bl	800ad78 <_Balloc>
 800af9a:	2201      	movs	r2, #1
 800af9c:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800afa0:	bd10      	pop	{r4, pc}
 800afa2:	bf00      	nop

0800afa4 <__multiply>:
 800afa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa8:	690e      	ldr	r6, [r1, #16]
 800afaa:	6914      	ldr	r4, [r2, #16]
 800afac:	42a6      	cmp	r6, r4
 800afae:	b083      	sub	sp, #12
 800afb0:	460f      	mov	r7, r1
 800afb2:	4615      	mov	r5, r2
 800afb4:	da04      	bge.n	800afc0 <__multiply+0x1c>
 800afb6:	4632      	mov	r2, r6
 800afb8:	462f      	mov	r7, r5
 800afba:	4626      	mov	r6, r4
 800afbc:	460d      	mov	r5, r1
 800afbe:	4614      	mov	r4, r2
 800afc0:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 800afc4:	eb06 0804 	add.w	r8, r6, r4
 800afc8:	4543      	cmp	r3, r8
 800afca:	bfb8      	it	lt
 800afcc:	3101      	addlt	r1, #1
 800afce:	f7ff fed3 	bl	800ad78 <_Balloc>
 800afd2:	f100 0914 	add.w	r9, r0, #20
 800afd6:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800afda:	45f1      	cmp	r9, lr
 800afdc:	9000      	str	r0, [sp, #0]
 800afde:	d205      	bcs.n	800afec <__multiply+0x48>
 800afe0:	464b      	mov	r3, r9
 800afe2:	2200      	movs	r2, #0
 800afe4:	f843 2b04 	str.w	r2, [r3], #4
 800afe8:	459e      	cmp	lr, r3
 800afea:	d8fb      	bhi.n	800afe4 <__multiply+0x40>
 800afec:	f105 0a14 	add.w	sl, r5, #20
 800aff0:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 800aff4:	f107 0314 	add.w	r3, r7, #20
 800aff8:	45a2      	cmp	sl, r4
 800affa:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800affe:	d261      	bcs.n	800b0c4 <__multiply+0x120>
 800b000:	1b64      	subs	r4, r4, r5
 800b002:	3c15      	subs	r4, #21
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	f8cd e004 	str.w	lr, [sp, #4]
 800b00c:	44a2      	add	sl, r4
 800b00e:	f105 0210 	add.w	r2, r5, #16
 800b012:	469e      	mov	lr, r3
 800b014:	e005      	b.n	800b022 <__multiply+0x7e>
 800b016:	0c2d      	lsrs	r5, r5, #16
 800b018:	d12b      	bne.n	800b072 <__multiply+0xce>
 800b01a:	4592      	cmp	sl, r2
 800b01c:	f109 0904 	add.w	r9, r9, #4
 800b020:	d04e      	beq.n	800b0c0 <__multiply+0x11c>
 800b022:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800b026:	fa1f fb85 	uxth.w	fp, r5
 800b02a:	f1bb 0f00 	cmp.w	fp, #0
 800b02e:	d0f2      	beq.n	800b016 <__multiply+0x72>
 800b030:	4677      	mov	r7, lr
 800b032:	464e      	mov	r6, r9
 800b034:	2000      	movs	r0, #0
 800b036:	e000      	b.n	800b03a <__multiply+0x96>
 800b038:	4626      	mov	r6, r4
 800b03a:	f857 1b04 	ldr.w	r1, [r7], #4
 800b03e:	6834      	ldr	r4, [r6, #0]
 800b040:	b28b      	uxth	r3, r1
 800b042:	b2a5      	uxth	r5, r4
 800b044:	0c09      	lsrs	r1, r1, #16
 800b046:	0c24      	lsrs	r4, r4, #16
 800b048:	fb0b 5303 	mla	r3, fp, r3, r5
 800b04c:	4403      	add	r3, r0
 800b04e:	fb0b 4001 	mla	r0, fp, r1, r4
 800b052:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800b056:	4634      	mov	r4, r6
 800b058:	b29b      	uxth	r3, r3
 800b05a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b05e:	45bc      	cmp	ip, r7
 800b060:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b064:	f844 3b04 	str.w	r3, [r4], #4
 800b068:	d8e6      	bhi.n	800b038 <__multiply+0x94>
 800b06a:	6070      	str	r0, [r6, #4]
 800b06c:	6815      	ldr	r5, [r2, #0]
 800b06e:	0c2d      	lsrs	r5, r5, #16
 800b070:	d0d3      	beq.n	800b01a <__multiply+0x76>
 800b072:	f8d9 3000 	ldr.w	r3, [r9]
 800b076:	4676      	mov	r6, lr
 800b078:	4618      	mov	r0, r3
 800b07a:	46cb      	mov	fp, r9
 800b07c:	2100      	movs	r1, #0
 800b07e:	e000      	b.n	800b082 <__multiply+0xde>
 800b080:	46a3      	mov	fp, r4
 800b082:	8834      	ldrh	r4, [r6, #0]
 800b084:	0c00      	lsrs	r0, r0, #16
 800b086:	fb05 0004 	mla	r0, r5, r4, r0
 800b08a:	4401      	add	r1, r0
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	465c      	mov	r4, fp
 800b090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b094:	f844 3b04 	str.w	r3, [r4], #4
 800b098:	f856 3b04 	ldr.w	r3, [r6], #4
 800b09c:	f8db 0004 	ldr.w	r0, [fp, #4]
 800b0a0:	0c1b      	lsrs	r3, r3, #16
 800b0a2:	b287      	uxth	r7, r0
 800b0a4:	fb05 7303 	mla	r3, r5, r3, r7
 800b0a8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800b0ac:	45b4      	cmp	ip, r6
 800b0ae:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800b0b2:	d8e5      	bhi.n	800b080 <__multiply+0xdc>
 800b0b4:	4592      	cmp	sl, r2
 800b0b6:	f8cb 3004 	str.w	r3, [fp, #4]
 800b0ba:	f109 0904 	add.w	r9, r9, #4
 800b0be:	d1b0      	bne.n	800b022 <__multiply+0x7e>
 800b0c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b0c4:	f1b8 0f00 	cmp.w	r8, #0
 800b0c8:	dd0b      	ble.n	800b0e2 <__multiply+0x13e>
 800b0ca:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800b0ce:	f1ae 0e04 	sub.w	lr, lr, #4
 800b0d2:	b11b      	cbz	r3, 800b0dc <__multiply+0x138>
 800b0d4:	e005      	b.n	800b0e2 <__multiply+0x13e>
 800b0d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b0da:	b913      	cbnz	r3, 800b0e2 <__multiply+0x13e>
 800b0dc:	f1b8 0801 	subs.w	r8, r8, #1
 800b0e0:	d1f9      	bne.n	800b0d6 <__multiply+0x132>
 800b0e2:	9800      	ldr	r0, [sp, #0]
 800b0e4:	f8c0 8010 	str.w	r8, [r0, #16]
 800b0e8:	b003      	add	sp, #12
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	bf00      	nop

0800b0f0 <__pow5mult>:
 800b0f0:	f012 0303 	ands.w	r3, r2, #3
 800b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	d12e      	bne.n	800b15c <__pow5mult+0x6c>
 800b0fe:	460d      	mov	r5, r1
 800b100:	10a4      	asrs	r4, r4, #2
 800b102:	d01c      	beq.n	800b13e <__pow5mult+0x4e>
 800b104:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800b106:	b396      	cbz	r6, 800b16e <__pow5mult+0x7e>
 800b108:	07e3      	lsls	r3, r4, #31
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	d406      	bmi.n	800b11e <__pow5mult+0x2e>
 800b110:	1064      	asrs	r4, r4, #1
 800b112:	d014      	beq.n	800b13e <__pow5mult+0x4e>
 800b114:	6830      	ldr	r0, [r6, #0]
 800b116:	b1a8      	cbz	r0, 800b144 <__pow5mult+0x54>
 800b118:	4606      	mov	r6, r0
 800b11a:	07e3      	lsls	r3, r4, #31
 800b11c:	d5f8      	bpl.n	800b110 <__pow5mult+0x20>
 800b11e:	4632      	mov	r2, r6
 800b120:	4629      	mov	r1, r5
 800b122:	4638      	mov	r0, r7
 800b124:	f7ff ff3e 	bl	800afa4 <__multiply>
 800b128:	b1b5      	cbz	r5, 800b158 <__pow5mult+0x68>
 800b12a:	686a      	ldr	r2, [r5, #4]
 800b12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12e:	1064      	asrs	r4, r4, #1
 800b130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b134:	6029      	str	r1, [r5, #0]
 800b136:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b13a:	4605      	mov	r5, r0
 800b13c:	d1ea      	bne.n	800b114 <__pow5mult+0x24>
 800b13e:	4628      	mov	r0, r5
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4632      	mov	r2, r6
 800b146:	4631      	mov	r1, r6
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ff2b 	bl	800afa4 <__multiply>
 800b14e:	6030      	str	r0, [r6, #0]
 800b150:	f8c0 8000 	str.w	r8, [r0]
 800b154:	4606      	mov	r6, r0
 800b156:	e7e0      	b.n	800b11a <__pow5mult+0x2a>
 800b158:	4605      	mov	r5, r0
 800b15a:	e7d9      	b.n	800b110 <__pow5mult+0x20>
 800b15c:	3b01      	subs	r3, #1
 800b15e:	4a0b      	ldr	r2, [pc, #44]	; (800b18c <__pow5mult+0x9c>)
 800b160:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b164:	2300      	movs	r3, #0
 800b166:	f7ff fe37 	bl	800add8 <__multadd>
 800b16a:	4605      	mov	r5, r0
 800b16c:	e7c8      	b.n	800b100 <__pow5mult+0x10>
 800b16e:	2101      	movs	r1, #1
 800b170:	4638      	mov	r0, r7
 800b172:	f7ff fe01 	bl	800ad78 <_Balloc>
 800b176:	f240 2371 	movw	r3, #625	; 0x271
 800b17a:	6143      	str	r3, [r0, #20]
 800b17c:	2201      	movs	r2, #1
 800b17e:	2300      	movs	r3, #0
 800b180:	6102      	str	r2, [r0, #16]
 800b182:	4606      	mov	r6, r0
 800b184:	64b8      	str	r0, [r7, #72]	; 0x48
 800b186:	6003      	str	r3, [r0, #0]
 800b188:	e7be      	b.n	800b108 <__pow5mult+0x18>
 800b18a:	bf00      	nop
 800b18c:	0800e7b0 	.word	0x0800e7b0

0800b190 <__lshift>:
 800b190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b194:	4691      	mov	r9, r2
 800b196:	690a      	ldr	r2, [r1, #16]
 800b198:	460e      	mov	r6, r1
 800b19a:	ea4f 1469 	mov.w	r4, r9, asr #5
 800b19e:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 800b1a2:	eb04 0802 	add.w	r8, r4, r2
 800b1a6:	f108 0501 	add.w	r5, r8, #1
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	dd04      	ble.n	800b1ba <__lshift+0x2a>
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	f101 0101 	add.w	r1, r1, #1
 800b1b8:	dcfa      	bgt.n	800b1b0 <__lshift+0x20>
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7ff fddc 	bl	800ad78 <_Balloc>
 800b1c0:	2c00      	cmp	r4, #0
 800b1c2:	f100 0314 	add.w	r3, r0, #20
 800b1c6:	dd37      	ble.n	800b238 <__lshift+0xa8>
 800b1c8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f843 2b04 	str.w	r2, [r3], #4
 800b1d2:	428b      	cmp	r3, r1
 800b1d4:	d1fb      	bne.n	800b1ce <__lshift+0x3e>
 800b1d6:	6934      	ldr	r4, [r6, #16]
 800b1d8:	f106 0314 	add.w	r3, r6, #20
 800b1dc:	f019 091f 	ands.w	r9, r9, #31
 800b1e0:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 800b1e4:	d020      	beq.n	800b228 <__lshift+0x98>
 800b1e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	e000      	b.n	800b1f0 <__lshift+0x60>
 800b1ee:	4651      	mov	r1, sl
 800b1f0:	681c      	ldr	r4, [r3, #0]
 800b1f2:	468a      	mov	sl, r1
 800b1f4:	fa04 f409 	lsl.w	r4, r4, r9
 800b1f8:	4314      	orrs	r4, r2
 800b1fa:	f84a 4b04 	str.w	r4, [sl], #4
 800b1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b202:	4563      	cmp	r3, ip
 800b204:	fa22 f20e 	lsr.w	r2, r2, lr
 800b208:	d3f1      	bcc.n	800b1ee <__lshift+0x5e>
 800b20a:	604a      	str	r2, [r1, #4]
 800b20c:	b10a      	cbz	r2, 800b212 <__lshift+0x82>
 800b20e:	f108 0502 	add.w	r5, r8, #2
 800b212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b214:	6872      	ldr	r2, [r6, #4]
 800b216:	3d01      	subs	r5, #1
 800b218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b21c:	6105      	str	r5, [r0, #16]
 800b21e:	6031      	str	r1, [r6, #0]
 800b220:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800b224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b228:	3904      	subs	r1, #4
 800b22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b232:	459c      	cmp	ip, r3
 800b234:	d8f9      	bhi.n	800b22a <__lshift+0x9a>
 800b236:	e7ec      	b.n	800b212 <__lshift+0x82>
 800b238:	4619      	mov	r1, r3
 800b23a:	e7cc      	b.n	800b1d6 <__lshift+0x46>

0800b23c <__mcmp>:
 800b23c:	b430      	push	{r4, r5}
 800b23e:	690b      	ldr	r3, [r1, #16]
 800b240:	4605      	mov	r5, r0
 800b242:	6900      	ldr	r0, [r0, #16]
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	d10f      	bne.n	800b268 <__mcmp+0x2c>
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	3514      	adds	r5, #20
 800b24c:	3114      	adds	r1, #20
 800b24e:	4419      	add	r1, r3
 800b250:	442b      	add	r3, r5
 800b252:	e001      	b.n	800b258 <__mcmp+0x1c>
 800b254:	429d      	cmp	r5, r3
 800b256:	d207      	bcs.n	800b268 <__mcmp+0x2c>
 800b258:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b25c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b260:	4294      	cmp	r4, r2
 800b262:	d0f7      	beq.n	800b254 <__mcmp+0x18>
 800b264:	d302      	bcc.n	800b26c <__mcmp+0x30>
 800b266:	2001      	movs	r0, #1
 800b268:	bc30      	pop	{r4, r5}
 800b26a:	4770      	bx	lr
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b270:	e7fa      	b.n	800b268 <__mcmp+0x2c>
 800b272:	bf00      	nop

0800b274 <__mdiff>:
 800b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	6913      	ldr	r3, [r2, #16]
 800b27a:	690d      	ldr	r5, [r1, #16]
 800b27c:	1aed      	subs	r5, r5, r3
 800b27e:	2d00      	cmp	r5, #0
 800b280:	460e      	mov	r6, r1
 800b282:	4690      	mov	r8, r2
 800b284:	f101 0414 	add.w	r4, r1, #20
 800b288:	f102 0714 	add.w	r7, r2, #20
 800b28c:	d114      	bne.n	800b2b8 <__mdiff+0x44>
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	18e2      	adds	r2, r4, r3
 800b292:	443b      	add	r3, r7
 800b294:	e001      	b.n	800b29a <__mdiff+0x26>
 800b296:	42a2      	cmp	r2, r4
 800b298:	d959      	bls.n	800b34e <__mdiff+0xda>
 800b29a:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800b29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2a2:	458c      	cmp	ip, r1
 800b2a4:	d0f7      	beq.n	800b296 <__mdiff+0x22>
 800b2a6:	d209      	bcs.n	800b2bc <__mdiff+0x48>
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4633      	mov	r3, r6
 800b2ac:	463c      	mov	r4, r7
 800b2ae:	4646      	mov	r6, r8
 800b2b0:	4617      	mov	r7, r2
 800b2b2:	4698      	mov	r8, r3
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	e001      	b.n	800b2bc <__mdiff+0x48>
 800b2b8:	dbf6      	blt.n	800b2a8 <__mdiff+0x34>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	6871      	ldr	r1, [r6, #4]
 800b2be:	f7ff fd5b 	bl	800ad78 <_Balloc>
 800b2c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b2c6:	6936      	ldr	r6, [r6, #16]
 800b2c8:	60c5      	str	r5, [r0, #12]
 800b2ca:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800b2ce:	46bc      	mov	ip, r7
 800b2d0:	f100 0514 	add.w	r5, r0, #20
 800b2d4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2de:	f854 8b04 	ldr.w	r8, [r4], #4
 800b2e2:	b28a      	uxth	r2, r1
 800b2e4:	fa13 f388 	uxtah	r3, r3, r8
 800b2e8:	0c09      	lsrs	r1, r1, #16
 800b2ea:	1a9a      	subs	r2, r3, r2
 800b2ec:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800b2f0:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b2f4:	b292      	uxth	r2, r2
 800b2f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2fa:	45e6      	cmp	lr, ip
 800b2fc:	f845 2b04 	str.w	r2, [r5], #4
 800b300:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b304:	d8e9      	bhi.n	800b2da <__mdiff+0x66>
 800b306:	42a7      	cmp	r7, r4
 800b308:	d917      	bls.n	800b33a <__mdiff+0xc6>
 800b30a:	46ae      	mov	lr, r5
 800b30c:	46a4      	mov	ip, r4
 800b30e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b312:	fa13 f382 	uxtah	r3, r3, r2
 800b316:	1419      	asrs	r1, r3, #16
 800b318:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800b322:	4567      	cmp	r7, ip
 800b324:	f84e 2b04 	str.w	r2, [lr], #4
 800b328:	ea4f 4321 	mov.w	r3, r1, asr #16
 800b32c:	d8ef      	bhi.n	800b30e <__mdiff+0x9a>
 800b32e:	43e4      	mvns	r4, r4
 800b330:	4427      	add	r7, r4
 800b332:	f027 0703 	bic.w	r7, r7, #3
 800b336:	3704      	adds	r7, #4
 800b338:	443d      	add	r5, r7
 800b33a:	3d04      	subs	r5, #4
 800b33c:	b922      	cbnz	r2, 800b348 <__mdiff+0xd4>
 800b33e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b342:	3e01      	subs	r6, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0fa      	beq.n	800b33e <__mdiff+0xca>
 800b348:	6106      	str	r6, [r0, #16]
 800b34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34e:	2100      	movs	r1, #0
 800b350:	f7ff fd12 	bl	800ad78 <_Balloc>
 800b354:	2201      	movs	r2, #1
 800b356:	2300      	movs	r3, #0
 800b358:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b360 <__ulp>:
 800b360:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <__ulp+0x40>)
 800b362:	400b      	ands	r3, r1
 800b364:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dd02      	ble.n	800b372 <__ulp+0x12>
 800b36c:	2000      	movs	r0, #0
 800b36e:	4619      	mov	r1, r3
 800b370:	4770      	bx	lr
 800b372:	425b      	negs	r3, r3
 800b374:	151b      	asrs	r3, r3, #20
 800b376:	2b13      	cmp	r3, #19
 800b378:	dd0b      	ble.n	800b392 <__ulp+0x32>
 800b37a:	3b14      	subs	r3, #20
 800b37c:	2b1e      	cmp	r3, #30
 800b37e:	bfdd      	ittte	le
 800b380:	f1c3 031f 	rsble	r3, r3, #31
 800b384:	2201      	movle	r2, #1
 800b386:	fa02 f303 	lslle.w	r3, r2, r3
 800b38a:	2301      	movgt	r3, #1
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	4770      	bx	lr
 800b392:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b396:	2000      	movs	r0, #0
 800b398:	fa42 f103 	asr.w	r1, r2, r3
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	7ff00000 	.word	0x7ff00000

0800b3a4 <__b2d>:
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	6906      	ldr	r6, [r0, #16]
 800b3aa:	f100 0814 	add.w	r8, r0, #20
 800b3ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3b2:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f7ff fd9a 	bl	800aef0 <__hi0bits>
 800b3bc:	f1c0 0320 	rsb	r3, r0, #32
 800b3c0:	280a      	cmp	r0, #10
 800b3c2:	600b      	str	r3, [r1, #0]
 800b3c4:	f1a6 0204 	sub.w	r2, r6, #4
 800b3c8:	dc19      	bgt.n	800b3fe <__b2d+0x5a>
 800b3ca:	4590      	cmp	r8, r2
 800b3cc:	bf38      	it	cc
 800b3ce:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
 800b3d2:	f1c0 030b 	rsb	r3, r0, #11
 800b3d6:	fa27 f103 	lsr.w	r1, r7, r3
 800b3da:	bf38      	it	cc
 800b3dc:	40da      	lsrcc	r2, r3
 800b3de:	f100 0315 	add.w	r3, r0, #21
 800b3e2:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
 800b3e6:	bf28      	it	cs
 800b3e8:	2200      	movcs	r2, #0
 800b3ea:	fa07 f303 	lsl.w	r3, r7, r3
 800b3ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3f2:	ea43 0402 	orr.w	r4, r3, r2
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fe:	4590      	cmp	r8, r2
 800b400:	f1a0 030b 	sub.w	r3, r0, #11
 800b404:	d21c      	bcs.n	800b440 <__b2d+0x9c>
 800b406:	f856 0c08 	ldr.w	r0, [r6, #-8]
 800b40a:	b1db      	cbz	r3, 800b444 <__b2d+0xa0>
 800b40c:	409f      	lsls	r7, r3
 800b40e:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800b412:	f1c3 0120 	rsb	r1, r3, #32
 800b416:	f1a6 0208 	sub.w	r2, r6, #8
 800b41a:	fa20 fc01 	lsr.w	ip, r0, r1
 800b41e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b422:	4590      	cmp	r8, r2
 800b424:	fa00 f003 	lsl.w	r0, r0, r3
 800b428:	ea47 050c 	orr.w	r5, r7, ip
 800b42c:	d203      	bcs.n	800b436 <__b2d+0x92>
 800b42e:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800b432:	40cb      	lsrs	r3, r1
 800b434:	4318      	orrs	r0, r3
 800b436:	4604      	mov	r4, r0
 800b438:	4620      	mov	r0, r4
 800b43a:	4629      	mov	r1, r5
 800b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b440:	b933      	cbnz	r3, 800b450 <__b2d+0xac>
 800b442:	4618      	mov	r0, r3
 800b444:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 800b448:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b44c:	4604      	mov	r4, r0
 800b44e:	e7f3      	b.n	800b438 <__b2d+0x94>
 800b450:	fa07 f303 	lsl.w	r3, r7, r3
 800b454:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b458:	2000      	movs	r0, #0
 800b45a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b45e:	4604      	mov	r4, r0
 800b460:	e7ea      	b.n	800b438 <__b2d+0x94>
 800b462:	bf00      	nop

0800b464 <__d2b>:
 800b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	2101      	movs	r1, #1
 800b46a:	b082      	sub	sp, #8
 800b46c:	461c      	mov	r4, r3
 800b46e:	4690      	mov	r8, r2
 800b470:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b474:	f7ff fc80 	bl	800ad78 <_Balloc>
 800b478:	4623      	mov	r3, r4
 800b47a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b47e:	4607      	mov	r7, r0
 800b480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b484:	b10c      	cbz	r4, 800b48a <__d2b+0x26>
 800b486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b48a:	f1b8 0200 	subs.w	r2, r8, #0
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	d01f      	beq.n	800b4d2 <__d2b+0x6e>
 800b492:	a802      	add	r0, sp, #8
 800b494:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b498:	f7ff fd4a 	bl	800af30 <__lo0bits>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d12d      	bne.n	800b4fc <__d2b+0x98>
 800b4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a4:	617a      	str	r2, [r7, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bf0c      	ite	eq
 800b4aa:	2101      	moveq	r1, #1
 800b4ac:	2102      	movne	r1, #2
 800b4ae:	61bb      	str	r3, [r7, #24]
 800b4b0:	6139      	str	r1, [r7, #16]
 800b4b2:	b9c4      	cbnz	r4, 800b4e6 <__d2b+0x82>
 800b4b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b4b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4bc:	6030      	str	r0, [r6, #0]
 800b4be:	6918      	ldr	r0, [r3, #16]
 800b4c0:	f7ff fd16 	bl	800aef0 <__hi0bits>
 800b4c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b4c8:	6028      	str	r0, [r5, #0]
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	b002      	add	sp, #8
 800b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d2:	a801      	add	r0, sp, #4
 800b4d4:	f7ff fd2c 	bl	800af30 <__lo0bits>
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	617b      	str	r3, [r7, #20]
 800b4dc:	2101      	movs	r1, #1
 800b4de:	3020      	adds	r0, #32
 800b4e0:	6139      	str	r1, [r7, #16]
 800b4e2:	2c00      	cmp	r4, #0
 800b4e4:	d0e6      	beq.n	800b4b4 <__d2b+0x50>
 800b4e6:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
 800b4ea:	4403      	add	r3, r0
 800b4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f0:	6033      	str	r3, [r6, #0]
 800b4f2:	6028      	str	r0, [r5, #0]
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	b002      	add	sp, #8
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	e9dd 1300 	ldrd	r1, r3, [sp]
 800b500:	f1c0 0220 	rsb	r2, r0, #32
 800b504:	fa03 f202 	lsl.w	r2, r3, r2
 800b508:	430a      	orrs	r2, r1
 800b50a:	40c3      	lsrs	r3, r0
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	617a      	str	r2, [r7, #20]
 800b510:	e7c9      	b.n	800b4a6 <__d2b+0x42>
 800b512:	bf00      	nop

0800b514 <__ratio>:
 800b514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b518:	b083      	sub	sp, #12
 800b51a:	4688      	mov	r8, r1
 800b51c:	4669      	mov	r1, sp
 800b51e:	4681      	mov	r9, r0
 800b520:	f7ff ff40 	bl	800b3a4 <__b2d>
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	4640      	mov	r0, r8
 800b52a:	a901      	add	r1, sp, #4
 800b52c:	f7ff ff3a 	bl	800b3a4 <__b2d>
 800b530:	460f      	mov	r7, r1
 800b532:	e9dd 1300 	ldrd	r1, r3, [sp]
 800b536:	4606      	mov	r6, r0
 800b538:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b53c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b540:	1acb      	subs	r3, r1, r3
 800b542:	1a12      	subs	r2, r2, r0
 800b544:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dd0b      	ble.n	800b564 <__ratio+0x50>
 800b54c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 800b550:	464d      	mov	r5, r9
 800b552:	4632      	mov	r2, r6
 800b554:	463b      	mov	r3, r7
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	f002 fb77 	bl	800dc4c <__aeabi_ddiv>
 800b55e:	b003      	add	sp, #12
 800b560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b564:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800b568:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 800b56c:	460f      	mov	r7, r1
 800b56e:	e7f0      	b.n	800b552 <__ratio+0x3e>

0800b570 <_mprec_log10>:
 800b570:	2817      	cmp	r0, #23
 800b572:	b5d0      	push	{r4, r6, r7, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	dd0a      	ble.n	800b58e <_mprec_log10+0x1e>
 800b578:	4908      	ldr	r1, [pc, #32]	; (800b59c <_mprec_log10+0x2c>)
 800b57a:	4f09      	ldr	r7, [pc, #36]	; (800b5a0 <_mprec_log10+0x30>)
 800b57c:	2000      	movs	r0, #0
 800b57e:	2600      	movs	r6, #0
 800b580:	4632      	mov	r2, r6
 800b582:	463b      	mov	r3, r7
 800b584:	f002 fa38 	bl	800d9f8 <__aeabi_dmul>
 800b588:	3c01      	subs	r4, #1
 800b58a:	d1f9      	bne.n	800b580 <_mprec_log10+0x10>
 800b58c:	bdd0      	pop	{r4, r6, r7, pc}
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <_mprec_log10+0x34>)
 800b590:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800b594:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b598:	bdd0      	pop	{r4, r6, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	3ff00000 	.word	0x3ff00000
 800b5a0:	40240000 	.word	0x40240000
 800b5a4:	0800e6c0 	.word	0x0800e6c0

0800b5a8 <__copybits>:
 800b5a8:	b470      	push	{r4, r5, r6}
 800b5aa:	6914      	ldr	r4, [r2, #16]
 800b5ac:	1e4d      	subs	r5, r1, #1
 800b5ae:	f102 0314 	add.w	r3, r2, #20
 800b5b2:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800b5b6:	116d      	asrs	r5, r5, #5
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	428b      	cmp	r3, r1
 800b5bc:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 800b5c0:	d20c      	bcs.n	800b5dc <__copybits+0x34>
 800b5c2:	1f05      	subs	r5, r0, #4
 800b5c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5cc:	4299      	cmp	r1, r3
 800b5ce:	d8f9      	bhi.n	800b5c4 <__copybits+0x1c>
 800b5d0:	1a8b      	subs	r3, r1, r2
 800b5d2:	3b15      	subs	r3, #21
 800b5d4:	f023 0303 	bic.w	r3, r3, #3
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4418      	add	r0, r3
 800b5dc:	4284      	cmp	r4, r0
 800b5de:	d904      	bls.n	800b5ea <__copybits+0x42>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f840 3b04 	str.w	r3, [r0], #4
 800b5e6:	4284      	cmp	r4, r0
 800b5e8:	d8fb      	bhi.n	800b5e2 <__copybits+0x3a>
 800b5ea:	bc70      	pop	{r4, r5, r6}
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop

0800b5f0 <__any_on>:
 800b5f0:	6903      	ldr	r3, [r0, #16]
 800b5f2:	b410      	push	{r4}
 800b5f4:	114c      	asrs	r4, r1, #5
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	f100 0214 	add.w	r2, r0, #20
 800b5fc:	da0f      	bge.n	800b61e <__any_on+0x2e>
 800b5fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b602:	429a      	cmp	r2, r3
 800b604:	d21c      	bcs.n	800b640 <__any_on+0x50>
 800b606:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b60a:	3b04      	subs	r3, #4
 800b60c:	b118      	cbz	r0, 800b616 <__any_on+0x26>
 800b60e:	e014      	b.n	800b63a <__any_on+0x4a>
 800b610:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b614:	b989      	cbnz	r1, 800b63a <__any_on+0x4a>
 800b616:	429a      	cmp	r2, r3
 800b618:	d3fa      	bcc.n	800b610 <__any_on+0x20>
 800b61a:	bc10      	pop	{r4}
 800b61c:	4770      	bx	lr
 800b61e:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800b622:	ddee      	ble.n	800b602 <__any_on+0x12>
 800b624:	f011 011f 	ands.w	r1, r1, #31
 800b628:	d0eb      	beq.n	800b602 <__any_on+0x12>
 800b62a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800b62e:	fa24 f001 	lsr.w	r0, r4, r1
 800b632:	fa00 f101 	lsl.w	r1, r0, r1
 800b636:	428c      	cmp	r4, r1
 800b638:	d0e3      	beq.n	800b602 <__any_on+0x12>
 800b63a:	2001      	movs	r0, #1
 800b63c:	bc10      	pop	{r4}
 800b63e:	4770      	bx	lr
 800b640:	2000      	movs	r0, #0
 800b642:	e7ea      	b.n	800b61a <__any_on+0x2a>

0800b644 <frexp>:
 800b644:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800b6a4 <frexp+0x60>
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b64e:	2700      	movs	r7, #0
 800b650:	4563      	cmp	r3, ip
 800b652:	4604      	mov	r4, r0
 800b654:	460d      	mov	r5, r1
 800b656:	4616      	mov	r6, r2
 800b658:	6017      	str	r7, [r2, #0]
 800b65a:	dc1e      	bgt.n	800b69a <frexp+0x56>
 800b65c:	4684      	mov	ip, r0
 800b65e:	ea53 0c0c 	orrs.w	ip, r3, ip
 800b662:	d01a      	beq.n	800b69a <frexp+0x56>
 800b664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b668:	460a      	mov	r2, r1
 800b66a:	da09      	bge.n	800b680 <frexp+0x3c>
 800b66c:	2200      	movs	r2, #0
 800b66e:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <frexp+0x5c>)
 800b670:	f002 f9c2 	bl	800d9f8 <__aeabi_dmul>
 800b674:	f06f 0735 	mvn.w	r7, #53	; 0x35
 800b678:	4604      	mov	r4, r0
 800b67a:	460a      	mov	r2, r1
 800b67c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b680:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b684:	151b      	asrs	r3, r3, #20
 800b686:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800b68a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b68e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b692:	443b      	add	r3, r7
 800b694:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b698:	6033      	str	r3, [r6, #0]
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a0:	43500000 	.word	0x43500000
 800b6a4:	7fefffff 	.word	0x7fefffff

0800b6a8 <_sbrk_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4c07      	ldr	r4, [pc, #28]	; (800b6c8 <_sbrk_r+0x20>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	f7fb fcae 	bl	8007014 <_sbrk>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d000      	beq.n	800b6be <_sbrk_r+0x16>
 800b6bc:	bd38      	pop	{r3, r4, r5, pc}
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0fb      	beq.n	800b6bc <_sbrk_r+0x14>
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	2000118c 	.word	0x2000118c

0800b6cc <__sread>:
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d4:	f001 fb70 	bl	800cdb8 <_read_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	db03      	blt.n	800b6e4 <__sread+0x18>
 800b6dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b6de:	4403      	add	r3, r0
 800b6e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6e2:	bd10      	pop	{r4, pc}
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop

0800b6f0 <__seofread>:
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	4770      	bx	lr

0800b6f4 <__swrite>:
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6fe:	461f      	mov	r7, r3
 800b700:	05d3      	lsls	r3, r2, #23
 800b702:	460c      	mov	r4, r1
 800b704:	4605      	mov	r5, r0
 800b706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70a:	d507      	bpl.n	800b71c <__swrite+0x28>
 800b70c:	2200      	movs	r2, #0
 800b70e:	2302      	movs	r3, #2
 800b710:	f001 fab0 	bl	800cc74 <_lseek_r>
 800b714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b71c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b720:	81a2      	strh	r2, [r4, #12]
 800b722:	463b      	mov	r3, r7
 800b724:	4632      	mov	r2, r6
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b72c:	f000 bf4c 	b.w	800c5c8 <_write_r>

0800b730 <__sseek>:
 800b730:	b510      	push	{r4, lr}
 800b732:	460c      	mov	r4, r1
 800b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b738:	f001 fa9c 	bl	800cc74 <_lseek_r>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	1c42      	adds	r2, r0, #1
 800b740:	bf0e      	itee	eq
 800b742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b74a:	6520      	strne	r0, [r4, #80]	; 0x50
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	bd10      	pop	{r4, pc}

0800b750 <__sclose>:
 800b750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b754:	f000 bf82 	b.w	800c65c <_close_r>

0800b758 <strncpy>:
 800b758:	ea40 0301 	orr.w	r3, r0, r1
 800b75c:	079b      	lsls	r3, r3, #30
 800b75e:	b470      	push	{r4, r5, r6}
 800b760:	d12a      	bne.n	800b7b8 <strncpy+0x60>
 800b762:	2a03      	cmp	r2, #3
 800b764:	d928      	bls.n	800b7b8 <strncpy+0x60>
 800b766:	460c      	mov	r4, r1
 800b768:	4603      	mov	r3, r0
 800b76a:	4621      	mov	r1, r4
 800b76c:	f854 6b04 	ldr.w	r6, [r4], #4
 800b770:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800b774:	ea25 0506 	bic.w	r5, r5, r6
 800b778:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b77c:	d106      	bne.n	800b78c <strncpy+0x34>
 800b77e:	3a04      	subs	r2, #4
 800b780:	2a03      	cmp	r2, #3
 800b782:	f843 6b04 	str.w	r6, [r3], #4
 800b786:	4621      	mov	r1, r4
 800b788:	d8ef      	bhi.n	800b76a <strncpy+0x12>
 800b78a:	b19a      	cbz	r2, 800b7b4 <strncpy+0x5c>
 800b78c:	780c      	ldrb	r4, [r1, #0]
 800b78e:	701c      	strb	r4, [r3, #0]
 800b790:	3a01      	subs	r2, #1
 800b792:	3301      	adds	r3, #1
 800b794:	b13c      	cbz	r4, 800b7a6 <strncpy+0x4e>
 800b796:	b16a      	cbz	r2, 800b7b4 <strncpy+0x5c>
 800b798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b79c:	f803 4b01 	strb.w	r4, [r3], #1
 800b7a0:	3a01      	subs	r2, #1
 800b7a2:	2c00      	cmp	r4, #0
 800b7a4:	d1f7      	bne.n	800b796 <strncpy+0x3e>
 800b7a6:	b12a      	cbz	r2, 800b7b4 <strncpy+0x5c>
 800b7a8:	441a      	add	r2, r3
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d1fb      	bne.n	800b7ac <strncpy+0x54>
 800b7b4:	bc70      	pop	{r4, r5, r6}
 800b7b6:	4770      	bx	lr
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	e7e6      	b.n	800b78a <strncpy+0x32>

0800b7bc <__sprint_r.part.0>:
 800b7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b7c2:	049c      	lsls	r4, r3, #18
 800b7c4:	4692      	mov	sl, r2
 800b7c6:	d52d      	bpl.n	800b824 <__sprint_r.part.0+0x68>
 800b7c8:	6893      	ldr	r3, [r2, #8]
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	b343      	cbz	r3, 800b820 <__sprint_r.part.0+0x64>
 800b7ce:	460e      	mov	r6, r1
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	f102 0908 	add.w	r9, r2, #8
 800b7d6:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
 800b7da:	ea5f 089b 	movs.w	r8, fp, lsr #2
 800b7de:	d015      	beq.n	800b80c <__sprint_r.part.0+0x50>
 800b7e0:	3d04      	subs	r5, #4
 800b7e2:	2400      	movs	r4, #0
 800b7e4:	e001      	b.n	800b7ea <__sprint_r.part.0+0x2e>
 800b7e6:	45a0      	cmp	r8, r4
 800b7e8:	d00e      	beq.n	800b808 <__sprint_r.part.0+0x4c>
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f001 f805 	bl	800c800 <_fputwc_r>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	f104 0401 	add.w	r4, r4, #1
 800b7fc:	d1f3      	bne.n	800b7e6 <__sprint_r.part.0+0x2a>
 800b7fe:	2300      	movs	r3, #0
 800b800:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800b804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b80c:	f02b 0b03 	bic.w	fp, fp, #3
 800b810:	eba3 030b 	sub.w	r3, r3, fp
 800b814:	f8ca 3008 	str.w	r3, [sl, #8]
 800b818:	f109 0908 	add.w	r9, r9, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1da      	bne.n	800b7d6 <__sprint_r.part.0+0x1a>
 800b820:	2000      	movs	r0, #0
 800b822:	e7ec      	b.n	800b7fe <__sprint_r.part.0+0x42>
 800b824:	f001 f84e 	bl	800c8c4 <__sfvwrite_r>
 800b828:	2300      	movs	r3, #0
 800b82a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800b82e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b832:	bf00      	nop

0800b834 <__sprint_r>:
 800b834:	6893      	ldr	r3, [r2, #8]
 800b836:	b10b      	cbz	r3, 800b83c <__sprint_r+0x8>
 800b838:	f7ff bfc0 	b.w	800b7bc <__sprint_r.part.0>
 800b83c:	b410      	push	{r4}
 800b83e:	4618      	mov	r0, r3
 800b840:	6053      	str	r3, [r2, #4]
 800b842:	bc10      	pop	{r4}
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop

0800b848 <_vfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	b0bd      	sub	sp, #244	; 0xf4
 800b84e:	461c      	mov	r4, r3
 800b850:	9101      	str	r1, [sp, #4]
 800b852:	4690      	mov	r8, r2
 800b854:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800b858:	b118      	cbz	r0, 800b862 <_vfiprintf_r+0x1a>
 800b85a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 83ce 	beq.w	800bffe <_vfiprintf_r+0x7b6>
 800b862:	9b01      	ldr	r3, [sp, #4]
 800b864:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b86a:	07db      	lsls	r3, r3, #31
 800b86c:	b28a      	uxth	r2, r1
 800b86e:	d402      	bmi.n	800b876 <_vfiprintf_r+0x2e>
 800b870:	0597      	lsls	r7, r2, #22
 800b872:	f140 853b 	bpl.w	800c2ec <_vfiprintf_r+0xaa4>
 800b876:	0496      	lsls	r6, r2, #18
 800b878:	d408      	bmi.n	800b88c <_vfiprintf_r+0x44>
 800b87a:	9801      	ldr	r0, [sp, #4]
 800b87c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b87e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800b882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b886:	8182      	strh	r2, [r0, #12]
 800b888:	6643      	str	r3, [r0, #100]	; 0x64
 800b88a:	b292      	uxth	r2, r2
 800b88c:	0715      	lsls	r5, r2, #28
 800b88e:	f140 80c7 	bpl.w	800ba20 <_vfiprintf_r+0x1d8>
 800b892:	9b01      	ldr	r3, [sp, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80c2 	beq.w	800ba20 <_vfiprintf_r+0x1d8>
 800b89c:	f002 031a 	and.w	r3, r2, #26
 800b8a0:	2b0a      	cmp	r3, #10
 800b8a2:	f000 8393 	beq.w	800bfcc <_vfiprintf_r+0x784>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800b8ac:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800b8b0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b8b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800b8be:	46cb      	mov	fp, r9
 800b8c0:	f898 3000 	ldrb.w	r3, [r8]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 8445 	beq.w	800c154 <_vfiprintf_r+0x90c>
 800b8ca:	2b25      	cmp	r3, #37	; 0x25
 800b8cc:	4644      	mov	r4, r8
 800b8ce:	d102      	bne.n	800b8d6 <_vfiprintf_r+0x8e>
 800b8d0:	e01e      	b.n	800b910 <_vfiprintf_r+0xc8>
 800b8d2:	2b25      	cmp	r3, #37	; 0x25
 800b8d4:	d003      	beq.n	800b8de <_vfiprintf_r+0x96>
 800b8d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f9      	bne.n	800b8d2 <_vfiprintf_r+0x8a>
 800b8de:	eba4 0508 	sub.w	r5, r4, r8
 800b8e2:	b18d      	cbz	r5, 800b908 <_vfiprintf_r+0xc0>
 800b8e4:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	442a      	add	r2, r5
 800b8ec:	2b07      	cmp	r3, #7
 800b8ee:	f8cb 8000 	str.w	r8, [fp]
 800b8f2:	f8cb 5004 	str.w	r5, [fp, #4]
 800b8f6:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 800b8fa:	f300 80a6 	bgt.w	800ba4a <_vfiprintf_r+0x202>
 800b8fe:	f10b 0b08 	add.w	fp, fp, #8
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	442b      	add	r3, r5
 800b906:	9302      	str	r3, [sp, #8]
 800b908:	7823      	ldrb	r3, [r4, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 8422 	beq.w	800c154 <_vfiprintf_r+0x90c>
 800b910:	2300      	movs	r3, #0
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	461f      	mov	r7, r3
 800b91a:	7863      	ldrb	r3, [r4, #1]
 800b91c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b920:	f104 0801 	add.w	r8, r4, #1
 800b924:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b928:	252b      	movs	r5, #43	; 0x2b
 800b92a:	f108 0801 	add.w	r8, r8, #1
 800b92e:	f1a3 0220 	sub.w	r2, r3, #32
 800b932:	2a5a      	cmp	r2, #90	; 0x5a
 800b934:	f200 8366 	bhi.w	800c004 <_vfiprintf_r+0x7bc>
 800b938:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b93c:	036402db 	.word	0x036402db
 800b940:	02d60364 	.word	0x02d60364
 800b944:	03640364 	.word	0x03640364
 800b948:	02fc0364 	.word	0x02fc0364
 800b94c:	03640364 	.word	0x03640364
 800b950:	02eb02f0 	.word	0x02eb02f0
 800b954:	02e60364 	.word	0x02e60364
 800b958:	03640320 	.word	0x03640320
 800b95c:	0136031b 	.word	0x0136031b
 800b960:	01360136 	.word	0x01360136
 800b964:	01360136 	.word	0x01360136
 800b968:	01360136 	.word	0x01360136
 800b96c:	01360136 	.word	0x01360136
 800b970:	03640364 	.word	0x03640364
 800b974:	03640364 	.word	0x03640364
 800b978:	03640364 	.word	0x03640364
 800b97c:	03640364 	.word	0x03640364
 800b980:	01450364 	.word	0x01450364
 800b984:	036402a6 	.word	0x036402a6
 800b988:	03640364 	.word	0x03640364
 800b98c:	03640364 	.word	0x03640364
 800b990:	03640364 	.word	0x03640364
 800b994:	03640364 	.word	0x03640364
 800b998:	00600364 	.word	0x00600364
 800b99c:	03640364 	.word	0x03640364
 800b9a0:	028a0364 	.word	0x028a0364
 800b9a4:	02760364 	.word	0x02760364
 800b9a8:	03640364 	.word	0x03640364
 800b9ac:	03640238 	.word	0x03640238
 800b9b0:	03640364 	.word	0x03640364
 800b9b4:	03640364 	.word	0x03640364
 800b9b8:	03640364 	.word	0x03640364
 800b9bc:	03640364 	.word	0x03640364
 800b9c0:	01450364 	.word	0x01450364
 800b9c4:	036400e9 	.word	0x036400e9
 800b9c8:	03640364 	.word	0x03640364
 800b9cc:	00e902c9 	.word	0x00e902c9
 800b9d0:	0364005b 	.word	0x0364005b
 800b9d4:	036402bc 	.word	0x036402bc
 800b9d8:	00620263 	.word	0x00620263
 800b9dc:	005b0254 	.word	0x005b0254
 800b9e0:	028a0364 	.word	0x028a0364
 800b9e4:	0094005d 	.word	0x0094005d
 800b9e8:	03640364 	.word	0x03640364
 800b9ec:	036400cb 	.word	0x036400cb
 800b9f0:	005d      	.short	0x005d
 800b9f2:	f047 0720 	orr.w	r7, r7, #32
 800b9f6:	f898 3000 	ldrb.w	r3, [r8]
 800b9fa:	e796      	b.n	800b92a <_vfiprintf_r+0xe2>
 800b9fc:	f047 0710 	orr.w	r7, r7, #16
 800ba00:	06bc      	lsls	r4, r7, #26
 800ba02:	f140 82d5 	bpl.w	800bfb0 <_vfiprintf_r+0x768>
 800ba06:	9b06      	ldr	r3, [sp, #24]
 800ba08:	3307      	adds	r3, #7
 800ba0a:	f023 0307 	bic.w	r3, r3, #7
 800ba0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ba12:	f103 0208 	add.w	r2, r3, #8
 800ba16:	9206      	str	r2, [sp, #24]
 800ba18:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	e02f      	b.n	800ba80 <_vfiprintf_r+0x238>
 800ba20:	9d01      	ldr	r5, [sp, #4]
 800ba22:	9805      	ldr	r0, [sp, #20]
 800ba24:	4629      	mov	r1, r5
 800ba26:	f7fd fa67 	bl	8008ef8 <__swsetup_r>
 800ba2a:	b1a0      	cbz	r0, 800ba56 <_vfiprintf_r+0x20e>
 800ba2c:	9a01      	ldr	r2, [sp, #4]
 800ba2e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ba30:	07d8      	lsls	r0, r3, #31
 800ba32:	d403      	bmi.n	800ba3c <_vfiprintf_r+0x1f4>
 800ba34:	8993      	ldrh	r3, [r2, #12]
 800ba36:	0599      	lsls	r1, r3, #22
 800ba38:	f140 84ad 	bpl.w	800c396 <_vfiprintf_r+0xb4e>
 800ba3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	9802      	ldr	r0, [sp, #8]
 800ba44:	b03d      	add	sp, #244	; 0xf4
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	f040 841d 	bne.w	800c28a <_vfiprintf_r+0xa42>
 800ba50:	9211      	str	r2, [sp, #68]	; 0x44
 800ba52:	46cb      	mov	fp, r9
 800ba54:	e755      	b.n	800b902 <_vfiprintf_r+0xba>
 800ba56:	89aa      	ldrh	r2, [r5, #12]
 800ba58:	f002 031a 	and.w	r3, r2, #26
 800ba5c:	2b0a      	cmp	r3, #10
 800ba5e:	f47f af22 	bne.w	800b8a6 <_vfiprintf_r+0x5e>
 800ba62:	e2b3      	b.n	800bfcc <_vfiprintf_r+0x784>
 800ba64:	463b      	mov	r3, r7
 800ba66:	069d      	lsls	r5, r3, #26
 800ba68:	9a06      	ldr	r2, [sp, #24]
 800ba6a:	f140 81e3 	bpl.w	800be34 <_vfiprintf_r+0x5ec>
 800ba6e:	3207      	adds	r2, #7
 800ba70:	f022 0207 	bic.w	r2, r2, #7
 800ba74:	f102 0108 	add.w	r1, r2, #8
 800ba78:	e9d2 4500 	ldrd	r4, r5, [r2]
 800ba7c:	9106      	str	r1, [sp, #24]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f04f 0100 	mov.w	r1, #0
 800ba84:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 800ba88:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ba8c:	a93c      	add	r1, sp, #240	; 0xf0
 800ba8e:	9100      	str	r1, [sp, #0]
 800ba90:	f000 83c8 	beq.w	800c224 <_vfiprintf_r+0x9dc>
 800ba94:	ea54 0105 	orrs.w	r1, r4, r5
 800ba98:	f023 0780 	bic.w	r7, r3, #128	; 0x80
 800ba9c:	d15c      	bne.n	800bb58 <_vfiprintf_r+0x310>
 800ba9e:	f1ba 0f00 	cmp.w	sl, #0
 800baa2:	f040 84da 	bne.w	800c45a <_vfiprintf_r+0xc12>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	f040 83eb 	bne.w	800c282 <_vfiprintf_r+0xa3a>
 800baac:	f013 0301 	ands.w	r3, r3, #1
 800bab0:	ae3c      	add	r6, sp, #240	; 0xf0
 800bab2:	9303      	str	r3, [sp, #12]
 800bab4:	f040 8423 	bne.w	800c2fe <_vfiprintf_r+0xab6>
 800bab8:	9a03      	ldr	r2, [sp, #12]
 800baba:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800babe:	4552      	cmp	r2, sl
 800bac0:	bfb8      	it	lt
 800bac2:	4652      	movlt	r2, sl
 800bac4:	9200      	str	r2, [sp, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 808d 	beq.w	800bbe6 <_vfiprintf_r+0x39e>
 800bacc:	3201      	adds	r2, #1
 800bace:	9200      	str	r2, [sp, #0]
 800bad0:	e089      	b.n	800bbe6 <_vfiprintf_r+0x39e>
 800bad2:	4ac0      	ldr	r2, [pc, #768]	; (800bdd4 <_vfiprintf_r+0x58c>)
 800bad4:	920a      	str	r2, [sp, #40]	; 0x28
 800bad6:	06be      	lsls	r6, r7, #26
 800bad8:	f140 816d 	bpl.w	800bdb6 <_vfiprintf_r+0x56e>
 800badc:	9a06      	ldr	r2, [sp, #24]
 800bade:	3207      	adds	r2, #7
 800bae0:	f022 0207 	bic.w	r2, r2, #7
 800bae4:	e9d2 4500 	ldrd	r4, r5, [r2]
 800bae8:	f102 0108 	add.w	r1, r2, #8
 800baec:	9106      	str	r1, [sp, #24]
 800baee:	07fe      	lsls	r6, r7, #31
 800baf0:	d509      	bpl.n	800bb06 <_vfiprintf_r+0x2be>
 800baf2:	ea54 0205 	orrs.w	r2, r4, r5
 800baf6:	d006      	beq.n	800bb06 <_vfiprintf_r+0x2be>
 800baf8:	2230      	movs	r2, #48	; 0x30
 800bafa:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800bafe:	f047 0702 	orr.w	r7, r7, #2
 800bb02:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 800bb06:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800bb0a:	2202      	movs	r2, #2
 800bb0c:	e7b8      	b.n	800ba80 <_vfiprintf_r+0x238>
 800bb0e:	463b      	mov	r3, r7
 800bb10:	069e      	lsls	r6, r3, #26
 800bb12:	f140 81be 	bpl.w	800be92 <_vfiprintf_r+0x64a>
 800bb16:	9a06      	ldr	r2, [sp, #24]
 800bb18:	3207      	adds	r2, #7
 800bb1a:	f022 0207 	bic.w	r2, r2, #7
 800bb1e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800bb22:	3208      	adds	r2, #8
 800bb24:	9206      	str	r2, [sp, #24]
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f171 0200 	sbcs.w	r2, r1, #0
 800bb30:	da05      	bge.n	800bb3e <_vfiprintf_r+0x2f6>
 800bb32:	222d      	movs	r2, #45	; 0x2d
 800bb34:	4264      	negs	r4, r4
 800bb36:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bb3a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800bb3e:	aa3c      	add	r2, sp, #240	; 0xf0
 800bb40:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bb44:	9200      	str	r2, [sp, #0]
 800bb46:	f000 8445 	beq.w	800c3d4 <_vfiprintf_r+0xb8c>
 800bb4a:	ea54 0105 	orrs.w	r1, r4, r5
 800bb4e:	f04f 0201 	mov.w	r2, #1
 800bb52:	f023 0780 	bic.w	r7, r3, #128	; 0x80
 800bb56:	d0a2      	beq.n	800ba9e <_vfiprintf_r+0x256>
 800bb58:	2a01      	cmp	r2, #1
 800bb5a:	f000 8367 	beq.w	800c22c <_vfiprintf_r+0x9e4>
 800bb5e:	2a02      	cmp	r2, #2
 800bb60:	f000 837b 	beq.w	800c25a <_vfiprintf_r+0xa12>
 800bb64:	a93c      	add	r1, sp, #240	; 0xf0
 800bb66:	e000      	b.n	800bb6a <_vfiprintf_r+0x322>
 800bb68:	4631      	mov	r1, r6
 800bb6a:	08e2      	lsrs	r2, r4, #3
 800bb6c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800bb70:	08e8      	lsrs	r0, r5, #3
 800bb72:	f004 0307 	and.w	r3, r4, #7
 800bb76:	4605      	mov	r5, r0
 800bb78:	4614      	mov	r4, r2
 800bb7a:	3330      	adds	r3, #48	; 0x30
 800bb7c:	ea54 0205 	orrs.w	r2, r4, r5
 800bb80:	f801 3c01 	strb.w	r3, [r1, #-1]
 800bb84:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800bb88:	d1ee      	bne.n	800bb68 <_vfiprintf_r+0x320>
 800bb8a:	07fd      	lsls	r5, r7, #31
 800bb8c:	f140 82fa 	bpl.w	800c184 <_vfiprintf_r+0x93c>
 800bb90:	2b30      	cmp	r3, #48	; 0x30
 800bb92:	f000 82f7 	beq.w	800c184 <_vfiprintf_r+0x93c>
 800bb96:	9a00      	ldr	r2, [sp, #0]
 800bb98:	3902      	subs	r1, #2
 800bb9a:	2330      	movs	r3, #48	; 0x30
 800bb9c:	1a52      	subs	r2, r2, r1
 800bb9e:	f806 3c01 	strb.w	r3, [r6, #-1]
 800bba2:	9203      	str	r2, [sp, #12]
 800bba4:	460e      	mov	r6, r1
 800bba6:	e787      	b.n	800bab8 <_vfiprintf_r+0x270>
 800bba8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bbac:	2100      	movs	r1, #0
 800bbae:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbb2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800bbb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bbba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bbbe:	2a09      	cmp	r2, #9
 800bbc0:	d9f5      	bls.n	800bbae <_vfiprintf_r+0x366>
 800bbc2:	9104      	str	r1, [sp, #16]
 800bbc4:	e6b3      	b.n	800b92e <_vfiprintf_r+0xe6>
 800bbc6:	9a06      	ldr	r2, [sp, #24]
 800bbc8:	f04f 0100 	mov.w	r1, #0
 800bbcc:	6813      	ldr	r3, [r2, #0]
 800bbce:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 800bbd2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	1d13      	adds	r3, r2, #4
 800bbda:	9100      	str	r1, [sp, #0]
 800bbdc:	9306      	str	r3, [sp, #24]
 800bbde:	9103      	str	r1, [sp, #12]
 800bbe0:	ae23      	add	r6, sp, #140	; 0x8c
 800bbe2:	f04f 0a00 	mov.w	sl, #0
 800bbe6:	f017 0302 	ands.w	r3, r7, #2
 800bbea:	9308      	str	r3, [sp, #32]
 800bbec:	d002      	beq.n	800bbf4 <_vfiprintf_r+0x3ac>
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	3302      	adds	r3, #2
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800bbf8:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800bbfc:	f101 0c01 	add.w	ip, r1, #1
 800bc00:	4660      	mov	r0, ip
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	d133      	bne.n	800bc6e <_vfiprintf_r+0x426>
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	9c00      	ldr	r4, [sp, #0]
 800bc0a:	1b1c      	subs	r4, r3, r4
 800bc0c:	2c00      	cmp	r4, #0
 800bc0e:	dd2e      	ble.n	800bc6e <_vfiprintf_r+0x426>
 800bc10:	2c10      	cmp	r4, #16
 800bc12:	4d71      	ldr	r5, [pc, #452]	; (800bdd8 <_vfiprintf_r+0x590>)
 800bc14:	f340 844a 	ble.w	800c4ac <_vfiprintf_r+0xc64>
 800bc18:	2310      	movs	r3, #16
 800bc1a:	e008      	b.n	800bc2e <_vfiprintf_r+0x3e6>
 800bc1c:	f101 0e02 	add.w	lr, r1, #2
 800bc20:	f10b 0b08 	add.w	fp, fp, #8
 800bc24:	4601      	mov	r1, r0
 800bc26:	3c10      	subs	r4, #16
 800bc28:	2c10      	cmp	r4, #16
 800bc2a:	dd11      	ble.n	800bc50 <_vfiprintf_r+0x408>
 800bc2c:	1c48      	adds	r0, r1, #1
 800bc2e:	3210      	adds	r2, #16
 800bc30:	2807      	cmp	r0, #7
 800bc32:	9212      	str	r2, [sp, #72]	; 0x48
 800bc34:	e9cb 5300 	strd	r5, r3, [fp]
 800bc38:	9011      	str	r0, [sp, #68]	; 0x44
 800bc3a:	ddef      	ble.n	800bc1c <_vfiprintf_r+0x3d4>
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	f040 82a5 	bne.w	800c18c <_vfiprintf_r+0x944>
 800bc42:	3c10      	subs	r4, #16
 800bc44:	2c10      	cmp	r4, #16
 800bc46:	4611      	mov	r1, r2
 800bc48:	f04f 0e01 	mov.w	lr, #1
 800bc4c:	46cb      	mov	fp, r9
 800bc4e:	dced      	bgt.n	800bc2c <_vfiprintf_r+0x3e4>
 800bc50:	4422      	add	r2, r4
 800bc52:	f1be 0f07 	cmp.w	lr, #7
 800bc56:	9212      	str	r2, [sp, #72]	; 0x48
 800bc58:	e9cb 5400 	strd	r5, r4, [fp]
 800bc5c:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800bc60:	f300 82bc 	bgt.w	800c1dc <_vfiprintf_r+0x994>
 800bc64:	f10b 0b08 	add.w	fp, fp, #8
 800bc68:	f10e 0001 	add.w	r0, lr, #1
 800bc6c:	4671      	mov	r1, lr
 800bc6e:	f89d 403b 	ldrb.w	r4, [sp, #59]	; 0x3b
 800bc72:	f10b 0c08 	add.w	ip, fp, #8
 800bc76:	2c00      	cmp	r4, #0
 800bc78:	f000 81ed 	beq.w	800c056 <_vfiprintf_r+0x80e>
 800bc7c:	3201      	adds	r2, #1
 800bc7e:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 800bc82:	2101      	movs	r1, #1
 800bc84:	2807      	cmp	r0, #7
 800bc86:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
 800bc8a:	e9cb 4100 	strd	r4, r1, [fp]
 800bc8e:	f340 82b6 	ble.w	800c1fe <_vfiprintf_r+0x9b6>
 800bc92:	2a00      	cmp	r2, #0
 800bc94:	f040 81d1 	bne.w	800c03a <_vfiprintf_r+0x7f2>
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 82b5 	bne.w	800c20a <_vfiprintf_r+0x9c2>
 800bca0:	4608      	mov	r0, r1
 800bca2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bca6:	4611      	mov	r1, r2
 800bca8:	46cb      	mov	fp, r9
 800bcaa:	9b07      	ldr	r3, [sp, #28]
 800bcac:	2b80      	cmp	r3, #128	; 0x80
 800bcae:	f000 81ed 	beq.w	800c08c <_vfiprintf_r+0x844>
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	ebaa 0403 	sub.w	r4, sl, r3
 800bcb8:	2c00      	cmp	r4, #0
 800bcba:	dd2d      	ble.n	800bd18 <_vfiprintf_r+0x4d0>
 800bcbc:	2c10      	cmp	r4, #16
 800bcbe:	4d47      	ldr	r5, [pc, #284]	; (800bddc <_vfiprintf_r+0x594>)
 800bcc0:	f340 83cf 	ble.w	800c462 <_vfiprintf_r+0xc1a>
 800bcc4:	f04f 0a10 	mov.w	sl, #16
 800bcc8:	e006      	b.n	800bcd8 <_vfiprintf_r+0x490>
 800bcca:	1c88      	adds	r0, r1, #2
 800bccc:	f10b 0b08 	add.w	fp, fp, #8
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	3c10      	subs	r4, #16
 800bcd4:	2c10      	cmp	r4, #16
 800bcd6:	dd11      	ble.n	800bcfc <_vfiprintf_r+0x4b4>
 800bcd8:	1c4b      	adds	r3, r1, #1
 800bcda:	3210      	adds	r2, #16
 800bcdc:	2b07      	cmp	r3, #7
 800bcde:	9212      	str	r2, [sp, #72]	; 0x48
 800bce0:	e9cb 5a00 	strd	r5, sl, [fp]
 800bce4:	9311      	str	r3, [sp, #68]	; 0x44
 800bce6:	ddf0      	ble.n	800bcca <_vfiprintf_r+0x482>
 800bce8:	2a00      	cmp	r2, #0
 800bcea:	f040 8199 	bne.w	800c020 <_vfiprintf_r+0x7d8>
 800bcee:	3c10      	subs	r4, #16
 800bcf0:	2c10      	cmp	r4, #16
 800bcf2:	f04f 0001 	mov.w	r0, #1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	46cb      	mov	fp, r9
 800bcfa:	dced      	bgt.n	800bcd8 <_vfiprintf_r+0x490>
 800bcfc:	f10b 0308 	add.w	r3, fp, #8
 800bd00:	4422      	add	r2, r4
 800bd02:	2807      	cmp	r0, #7
 800bd04:	9212      	str	r2, [sp, #72]	; 0x48
 800bd06:	e9cb 5400 	strd	r5, r4, [fp]
 800bd0a:	9011      	str	r0, [sp, #68]	; 0x44
 800bd0c:	f300 829a 	bgt.w	800c244 <_vfiprintf_r+0x9fc>
 800bd10:	3001      	adds	r0, #1
 800bd12:	f103 0c08 	add.w	ip, r3, #8
 800bd16:	469b      	mov	fp, r3
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	9011      	str	r0, [sp, #68]	; 0x44
 800bd1c:	441a      	add	r2, r3
 800bd1e:	2807      	cmp	r0, #7
 800bd20:	9212      	str	r2, [sp, #72]	; 0x48
 800bd22:	e9cb 6300 	strd	r6, r3, [fp]
 800bd26:	f340 81f6 	ble.w	800c116 <_vfiprintf_r+0x8ce>
 800bd2a:	2a00      	cmp	r2, #0
 800bd2c:	f040 81eb 	bne.w	800c106 <_vfiprintf_r+0x8be>
 800bd30:	077c      	lsls	r4, r7, #29
 800bd32:	9211      	str	r2, [sp, #68]	; 0x44
 800bd34:	d531      	bpl.n	800bd9a <_vfiprintf_r+0x552>
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	9900      	ldr	r1, [sp, #0]
 800bd3a:	1a5c      	subs	r4, r3, r1
 800bd3c:	2c00      	cmp	r4, #0
 800bd3e:	dd2c      	ble.n	800bd9a <_vfiprintf_r+0x552>
 800bd40:	46cc      	mov	ip, r9
 800bd42:	2c10      	cmp	r4, #16
 800bd44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd46:	4d24      	ldr	r5, [pc, #144]	; (800bdd8 <_vfiprintf_r+0x590>)
 800bd48:	f340 83b3 	ble.w	800c4b2 <_vfiprintf_r+0xc6a>
 800bd4c:	2610      	movs	r6, #16
 800bd4e:	9f05      	ldr	r7, [sp, #20]
 800bd50:	e006      	b.n	800bd60 <_vfiprintf_r+0x518>
 800bd52:	1c88      	adds	r0, r1, #2
 800bd54:	f10c 0c08 	add.w	ip, ip, #8
 800bd58:	4619      	mov	r1, r3
 800bd5a:	3c10      	subs	r4, #16
 800bd5c:	2c10      	cmp	r4, #16
 800bd5e:	dd11      	ble.n	800bd84 <_vfiprintf_r+0x53c>
 800bd60:	1c4b      	adds	r3, r1, #1
 800bd62:	3210      	adds	r2, #16
 800bd64:	2b07      	cmp	r3, #7
 800bd66:	9212      	str	r2, [sp, #72]	; 0x48
 800bd68:	e9cc 5600 	strd	r5, r6, [ip]
 800bd6c:	9311      	str	r3, [sp, #68]	; 0x44
 800bd6e:	ddf0      	ble.n	800bd52 <_vfiprintf_r+0x50a>
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	f040 821a 	bne.w	800c1aa <_vfiprintf_r+0x962>
 800bd76:	3c10      	subs	r4, #16
 800bd78:	2c10      	cmp	r4, #16
 800bd7a:	f04f 0001 	mov.w	r0, #1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	46cc      	mov	ip, r9
 800bd82:	dced      	bgt.n	800bd60 <_vfiprintf_r+0x518>
 800bd84:	4422      	add	r2, r4
 800bd86:	2807      	cmp	r0, #7
 800bd88:	9212      	str	r2, [sp, #72]	; 0x48
 800bd8a:	e9cc 5400 	strd	r5, r4, [ip]
 800bd8e:	9011      	str	r0, [sp, #68]	; 0x44
 800bd90:	f340 81c9 	ble.w	800c126 <_vfiprintf_r+0x8de>
 800bd94:	2a00      	cmp	r2, #0
 800bd96:	f040 82f4 	bne.w	800c382 <_vfiprintf_r+0xb3a>
 800bd9a:	9b02      	ldr	r3, [sp, #8]
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	9900      	ldr	r1, [sp, #0]
 800bda0:	428a      	cmp	r2, r1
 800bda2:	bfac      	ite	ge
 800bda4:	189b      	addge	r3, r3, r2
 800bda6:	185b      	addlt	r3, r3, r1
 800bda8:	9302      	str	r3, [sp, #8]
 800bdaa:	e1cb      	b.n	800c144 <_vfiprintf_r+0x8fc>
 800bdac:	4a0c      	ldr	r2, [pc, #48]	; (800bde0 <_vfiprintf_r+0x598>)
 800bdae:	920a      	str	r2, [sp, #40]	; 0x28
 800bdb0:	06be      	lsls	r6, r7, #26
 800bdb2:	f53f ae93 	bmi.w	800badc <_vfiprintf_r+0x294>
 800bdb6:	9906      	ldr	r1, [sp, #24]
 800bdb8:	06fd      	lsls	r5, r7, #27
 800bdba:	f101 0204 	add.w	r2, r1, #4
 800bdbe:	f100 82b8 	bmi.w	800c332 <_vfiprintf_r+0xaea>
 800bdc2:	067c      	lsls	r4, r7, #25
 800bdc4:	9906      	ldr	r1, [sp, #24]
 800bdc6:	f140 82b1 	bpl.w	800c32c <_vfiprintf_r+0xae4>
 800bdca:	880c      	ldrh	r4, [r1, #0]
 800bdcc:	9206      	str	r2, [sp, #24]
 800bdce:	2500      	movs	r5, #0
 800bdd0:	e68d      	b.n	800baee <_vfiprintf_r+0x2a6>
 800bdd2:	bf00      	nop
 800bdd4:	0800e630 	.word	0x0800e630
 800bdd8:	0800e7bc 	.word	0x0800e7bc
 800bddc:	0800e7cc 	.word	0x0800e7cc
 800bde0:	0800e644 	.word	0x0800e644
 800bde4:	9906      	ldr	r1, [sp, #24]
 800bde6:	4bae      	ldr	r3, [pc, #696]	; (800c0a0 <_vfiprintf_r+0x858>)
 800bde8:	680c      	ldr	r4, [r1, #0]
 800bdea:	930a      	str	r3, [sp, #40]	; 0x28
 800bdec:	f647 0230 	movw	r2, #30768	; 0x7830
 800bdf0:	3104      	adds	r1, #4
 800bdf2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800bdf6:	f047 0302 	orr.w	r3, r7, #2
 800bdfa:	9106      	str	r1, [sp, #24]
 800bdfc:	2500      	movs	r5, #0
 800bdfe:	2202      	movs	r2, #2
 800be00:	e63e      	b.n	800ba80 <_vfiprintf_r+0x238>
 800be02:	9a06      	ldr	r2, [sp, #24]
 800be04:	06b9      	lsls	r1, r7, #26
 800be06:	f852 3b04 	ldr.w	r3, [r2], #4
 800be0a:	9206      	str	r2, [sp, #24]
 800be0c:	f100 829e 	bmi.w	800c34c <_vfiprintf_r+0xb04>
 800be10:	06fa      	lsls	r2, r7, #27
 800be12:	f100 8336 	bmi.w	800c482 <_vfiprintf_r+0xc3a>
 800be16:	067e      	lsls	r6, r7, #25
 800be18:	f100 834d 	bmi.w	800c4b6 <_vfiprintf_r+0xc6e>
 800be1c:	05bd      	lsls	r5, r7, #22
 800be1e:	f140 8330 	bpl.w	800c482 <_vfiprintf_r+0xc3a>
 800be22:	9a02      	ldr	r2, [sp, #8]
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e54b      	b.n	800b8c0 <_vfiprintf_r+0x78>
 800be28:	f047 0310 	orr.w	r3, r7, #16
 800be2c:	069d      	lsls	r5, r3, #26
 800be2e:	9a06      	ldr	r2, [sp, #24]
 800be30:	f53f ae1d 	bmi.w	800ba6e <_vfiprintf_r+0x226>
 800be34:	06dc      	lsls	r4, r3, #27
 800be36:	f102 0104 	add.w	r1, r2, #4
 800be3a:	f100 8271 	bmi.w	800c320 <_vfiprintf_r+0xad8>
 800be3e:	0658      	lsls	r0, r3, #25
 800be40:	9a06      	ldr	r2, [sp, #24]
 800be42:	f140 826a 	bpl.w	800c31a <_vfiprintf_r+0xad2>
 800be46:	8814      	ldrh	r4, [r2, #0]
 800be48:	9106      	str	r1, [sp, #24]
 800be4a:	2500      	movs	r5, #0
 800be4c:	2201      	movs	r2, #1
 800be4e:	e617      	b.n	800ba80 <_vfiprintf_r+0x238>
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	681e      	ldr	r6, [r3, #0]
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800be5c:	1d1c      	adds	r4, r3, #4
 800be5e:	2e00      	cmp	r6, #0
 800be60:	f000 82a0 	beq.w	800c3a4 <_vfiprintf_r+0xb5c>
 800be64:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800be68:	f000 830f 	beq.w	800c48a <_vfiprintf_r+0xc42>
 800be6c:	4652      	mov	r2, sl
 800be6e:	2100      	movs	r1, #0
 800be70:	4630      	mov	r0, r6
 800be72:	f7fe ff25 	bl	800acc0 <memchr>
 800be76:	2800      	cmp	r0, #0
 800be78:	f000 8339 	beq.w	800c4ee <_vfiprintf_r+0xca6>
 800be7c:	1b83      	subs	r3, r0, r6
 800be7e:	9303      	str	r3, [sp, #12]
 800be80:	9406      	str	r4, [sp, #24]
 800be82:	f04f 0a00 	mov.w	sl, #0
 800be86:	e617      	b.n	800bab8 <_vfiprintf_r+0x270>
 800be88:	f047 0310 	orr.w	r3, r7, #16
 800be8c:	069e      	lsls	r6, r3, #26
 800be8e:	f53f ae42 	bmi.w	800bb16 <_vfiprintf_r+0x2ce>
 800be92:	9906      	ldr	r1, [sp, #24]
 800be94:	06dd      	lsls	r5, r3, #27
 800be96:	f101 0204 	add.w	r2, r1, #4
 800be9a:	f100 8238 	bmi.w	800c30e <_vfiprintf_r+0xac6>
 800be9e:	065c      	lsls	r4, r3, #25
 800bea0:	9906      	ldr	r1, [sp, #24]
 800bea2:	f140 8231 	bpl.w	800c308 <_vfiprintf_r+0xac0>
 800bea6:	f9b1 4000 	ldrsh.w	r4, [r1]
 800beaa:	9206      	str	r2, [sp, #24]
 800beac:	17e5      	asrs	r5, r4, #31
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	e63a      	b.n	800bb2a <_vfiprintf_r+0x2e2>
 800beb4:	f898 3000 	ldrb.w	r3, [r8]
 800beb8:	2b6c      	cmp	r3, #108	; 0x6c
 800beba:	bf03      	ittte	eq
 800bebc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800bec0:	f047 0720 	orreq.w	r7, r7, #32
 800bec4:	f108 0801 	addeq.w	r8, r8, #1
 800bec8:	f047 0710 	orrne.w	r7, r7, #16
 800becc:	e52d      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bece:	f898 3000 	ldrb.w	r3, [r8]
 800bed2:	2b68      	cmp	r3, #104	; 0x68
 800bed4:	bf03      	ittte	eq
 800bed6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800beda:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 800bede:	f108 0801 	addeq.w	r8, r8, #1
 800bee2:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 800bee6:	e520      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bee8:	f047 0701 	orr.w	r7, r7, #1
 800beec:	f898 3000 	ldrb.w	r3, [r8]
 800bef0:	e51b      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bef2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800bef6:	f898 3000 	ldrb.w	r3, [r8]
 800befa:	2a00      	cmp	r2, #0
 800befc:	f47f ad15 	bne.w	800b92a <_vfiprintf_r+0xe2>
 800bf00:	2220      	movs	r2, #32
 800bf02:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800bf06:	e510      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf08:	f898 3000 	ldrb.w	r3, [r8]
 800bf0c:	f047 0704 	orr.w	r7, r7, #4
 800bf10:	e50b      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf12:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 800bf16:	f898 3000 	ldrb.w	r3, [r8]
 800bf1a:	e506      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf1c:	9a06      	ldr	r2, [sp, #24]
 800bf1e:	f898 3000 	ldrb.w	r3, [r8]
 800bf22:	6811      	ldr	r1, [r2, #0]
 800bf24:	9104      	str	r1, [sp, #16]
 800bf26:	2900      	cmp	r1, #0
 800bf28:	f102 0204 	add.w	r2, r2, #4
 800bf2c:	f2c0 821f 	blt.w	800c36e <_vfiprintf_r+0xb26>
 800bf30:	9206      	str	r2, [sp, #24]
 800bf32:	e4fa      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf34:	9e05      	ldr	r6, [sp, #20]
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7fe fb76 	bl	800a628 <_localeconv_r>
 800bf3c:	6843      	ldr	r3, [r0, #4]
 800bf3e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fb f9dd 	bl	8007300 <strlen>
 800bf46:	900d      	str	r0, [sp, #52]	; 0x34
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7fe fb6c 	bl	800a628 <_localeconv_r>
 800bf50:	6882      	ldr	r2, [r0, #8]
 800bf52:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf54:	2c00      	cmp	r4, #0
 800bf56:	f43f ad4e 	beq.w	800b9f6 <_vfiprintf_r+0x1ae>
 800bf5a:	f898 3000 	ldrb.w	r3, [r8]
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	f43f ace3 	beq.w	800b92a <_vfiprintf_r+0xe2>
 800bf64:	7812      	ldrb	r2, [r2, #0]
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	f43f acdf 	beq.w	800b92a <_vfiprintf_r+0xe2>
 800bf6c:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800bf70:	e4db      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf72:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800bf76:	f898 3000 	ldrb.w	r3, [r8]
 800bf7a:	e4d6      	b.n	800b92a <_vfiprintf_r+0xe2>
 800bf7c:	f898 3000 	ldrb.w	r3, [r8]
 800bf80:	2b2a      	cmp	r3, #42	; 0x2a
 800bf82:	f108 0101 	add.w	r1, r8, #1
 800bf86:	f000 82c4 	beq.w	800c512 <_vfiprintf_r+0xcca>
 800bf8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bf8e:	2a09      	cmp	r2, #9
 800bf90:	4688      	mov	r8, r1
 800bf92:	f04f 0a00 	mov.w	sl, #0
 800bf96:	f63f acca 	bhi.w	800b92e <_vfiprintf_r+0xe6>
 800bf9a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf9e:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800bfa2:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
 800bfa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bfaa:	2a09      	cmp	r2, #9
 800bfac:	d9f5      	bls.n	800bf9a <_vfiprintf_r+0x752>
 800bfae:	e4be      	b.n	800b92e <_vfiprintf_r+0xe6>
 800bfb0:	9a06      	ldr	r2, [sp, #24]
 800bfb2:	06f8      	lsls	r0, r7, #27
 800bfb4:	f102 0304 	add.w	r3, r2, #4
 800bfb8:	f100 81c3 	bmi.w	800c342 <_vfiprintf_r+0xafa>
 800bfbc:	0679      	lsls	r1, r7, #25
 800bfbe:	9a06      	ldr	r2, [sp, #24]
 800bfc0:	f140 81bc 	bpl.w	800c33c <_vfiprintf_r+0xaf4>
 800bfc4:	8814      	ldrh	r4, [r2, #0]
 800bfc6:	9306      	str	r3, [sp, #24]
 800bfc8:	2500      	movs	r5, #0
 800bfca:	e525      	b.n	800ba18 <_vfiprintf_r+0x1d0>
 800bfcc:	9901      	ldr	r1, [sp, #4]
 800bfce:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f6ff ac67 	blt.w	800b8a6 <_vfiprintf_r+0x5e>
 800bfd8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d404      	bmi.n	800bfe8 <_vfiprintf_r+0x7a0>
 800bfde:	0597      	lsls	r7, r2, #22
 800bfe0:	d402      	bmi.n	800bfe8 <_vfiprintf_r+0x7a0>
 800bfe2:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800bfe4:	f7fe fb4e 	bl	800a684 <__retarget_lock_release_recursive>
 800bfe8:	4623      	mov	r3, r4
 800bfea:	4642      	mov	r2, r8
 800bfec:	9901      	ldr	r1, [sp, #4]
 800bfee:	9805      	ldr	r0, [sp, #20]
 800bff0:	f000 faa8 	bl	800c544 <__sbprintf>
 800bff4:	9002      	str	r0, [sp, #8]
 800bff6:	9802      	ldr	r0, [sp, #8]
 800bff8:	b03d      	add	sp, #244	; 0xf4
 800bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffe:	f7fe f8c3 	bl	800a188 <__sinit>
 800c002:	e42e      	b.n	800b862 <_vfiprintf_r+0x1a>
 800c004:	2b00      	cmp	r3, #0
 800c006:	f000 80a5 	beq.w	800c154 <_vfiprintf_r+0x90c>
 800c00a:	2201      	movs	r2, #1
 800c00c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800c010:	f04f 0300 	mov.w	r3, #0
 800c014:	9200      	str	r2, [sp, #0]
 800c016:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800c01a:	9203      	str	r2, [sp, #12]
 800c01c:	ae23      	add	r6, sp, #140	; 0x8c
 800c01e:	e5e0      	b.n	800bbe2 <_vfiprintf_r+0x39a>
 800c020:	aa10      	add	r2, sp, #64	; 0x40
 800c022:	9901      	ldr	r1, [sp, #4]
 800c024:	9805      	ldr	r0, [sp, #20]
 800c026:	f7ff fbc9 	bl	800b7bc <__sprint_r.part.0>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	f040 8098 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c030:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c034:	46cb      	mov	fp, r9
 800c036:	1c48      	adds	r0, r1, #1
 800c038:	e64b      	b.n	800bcd2 <_vfiprintf_r+0x48a>
 800c03a:	aa10      	add	r2, sp, #64	; 0x40
 800c03c:	9901      	ldr	r1, [sp, #4]
 800c03e:	9805      	ldr	r0, [sp, #20]
 800c040:	f7ff fbbc 	bl	800b7bc <__sprint_r.part.0>
 800c044:	2800      	cmp	r0, #0
 800c046:	f040 808b 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c04a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c04e:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c052:	1c48      	adds	r0, r1, #1
 800c054:	46cb      	mov	fp, r9
 800c056:	9b08      	ldr	r3, [sp, #32]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f43f ae26 	beq.w	800bcaa <_vfiprintf_r+0x462>
 800c05e:	3202      	adds	r2, #2
 800c060:	a90f      	add	r1, sp, #60	; 0x3c
 800c062:	2302      	movs	r3, #2
 800c064:	2807      	cmp	r0, #7
 800c066:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
 800c06a:	e9cb 1300 	strd	r1, r3, [fp]
 800c06e:	f340 80d3 	ble.w	800c218 <_vfiprintf_r+0x9d0>
 800c072:	2a00      	cmp	r2, #0
 800c074:	f040 8114 	bne.w	800c2a0 <_vfiprintf_r+0xa58>
 800c078:	9b07      	ldr	r3, [sp, #28]
 800c07a:	2b80      	cmp	r3, #128	; 0x80
 800c07c:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c080:	f04f 0001 	mov.w	r0, #1
 800c084:	4611      	mov	r1, r2
 800c086:	46cb      	mov	fp, r9
 800c088:	f47f ae13 	bne.w	800bcb2 <_vfiprintf_r+0x46a>
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	9c00      	ldr	r4, [sp, #0]
 800c090:	1b1c      	subs	r4, r3, r4
 800c092:	2c00      	cmp	r4, #0
 800c094:	f77f ae0d 	ble.w	800bcb2 <_vfiprintf_r+0x46a>
 800c098:	2c10      	cmp	r4, #16
 800c09a:	4d02      	ldr	r5, [pc, #8]	; (800c0a4 <_vfiprintf_r+0x85c>)
 800c09c:	dc0c      	bgt.n	800c0b8 <_vfiprintf_r+0x870>
 800c09e:	e22c      	b.n	800c4fa <_vfiprintf_r+0xcb2>
 800c0a0:	0800e630 	.word	0x0800e630
 800c0a4:	0800e7cc 	.word	0x0800e7cc
 800c0a8:	f101 0c02 	add.w	ip, r1, #2
 800c0ac:	f10b 0b08 	add.w	fp, fp, #8
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	3c10      	subs	r4, #16
 800c0b4:	2c10      	cmp	r4, #16
 800c0b6:	dd13      	ble.n	800c0e0 <_vfiprintf_r+0x898>
 800c0b8:	1c4b      	adds	r3, r1, #1
 800c0ba:	3210      	adds	r2, #16
 800c0bc:	2010      	movs	r0, #16
 800c0be:	2b07      	cmp	r3, #7
 800c0c0:	9212      	str	r2, [sp, #72]	; 0x48
 800c0c2:	f8cb 5000 	str.w	r5, [fp]
 800c0c6:	f8cb 0004 	str.w	r0, [fp, #4]
 800c0ca:	9311      	str	r3, [sp, #68]	; 0x44
 800c0cc:	ddec      	ble.n	800c0a8 <_vfiprintf_r+0x860>
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	d177      	bne.n	800c1c2 <_vfiprintf_r+0x97a>
 800c0d2:	3c10      	subs	r4, #16
 800c0d4:	2c10      	cmp	r4, #16
 800c0d6:	f04f 0c01 	mov.w	ip, #1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	46cb      	mov	fp, r9
 800c0de:	dceb      	bgt.n	800c0b8 <_vfiprintf_r+0x870>
 800c0e0:	f10b 0308 	add.w	r3, fp, #8
 800c0e4:	4422      	add	r2, r4
 800c0e6:	f1bc 0f07 	cmp.w	ip, #7
 800c0ea:	9212      	str	r2, [sp, #72]	; 0x48
 800c0ec:	e9cb 5400 	strd	r5, r4, [fp]
 800c0f0:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 800c0f4:	f300 80e3 	bgt.w	800c2be <_vfiprintf_r+0xa76>
 800c0f8:	f10c 0001 	add.w	r0, ip, #1
 800c0fc:	4661      	mov	r1, ip
 800c0fe:	469b      	mov	fp, r3
 800c100:	f103 0c08 	add.w	ip, r3, #8
 800c104:	e5d5      	b.n	800bcb2 <_vfiprintf_r+0x46a>
 800c106:	aa10      	add	r2, sp, #64	; 0x40
 800c108:	9901      	ldr	r1, [sp, #4]
 800c10a:	9805      	ldr	r0, [sp, #20]
 800c10c:	f7ff fb56 	bl	800b7bc <__sprint_r.part.0>
 800c110:	bb30      	cbnz	r0, 800c160 <_vfiprintf_r+0x918>
 800c112:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c114:	46cc      	mov	ip, r9
 800c116:	0778      	lsls	r0, r7, #29
 800c118:	d505      	bpl.n	800c126 <_vfiprintf_r+0x8de>
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	9900      	ldr	r1, [sp, #0]
 800c11e:	1a5c      	subs	r4, r3, r1
 800c120:	2c00      	cmp	r4, #0
 800c122:	f73f ae0e 	bgt.w	800bd42 <_vfiprintf_r+0x4fa>
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	9904      	ldr	r1, [sp, #16]
 800c12a:	9800      	ldr	r0, [sp, #0]
 800c12c:	4281      	cmp	r1, r0
 800c12e:	bfac      	ite	ge
 800c130:	185b      	addge	r3, r3, r1
 800c132:	181b      	addlt	r3, r3, r0
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	b12a      	cbz	r2, 800c144 <_vfiprintf_r+0x8fc>
 800c138:	aa10      	add	r2, sp, #64	; 0x40
 800c13a:	9901      	ldr	r1, [sp, #4]
 800c13c:	9805      	ldr	r0, [sp, #20]
 800c13e:	f7ff fb3d 	bl	800b7bc <__sprint_r.part.0>
 800c142:	b968      	cbnz	r0, 800c160 <_vfiprintf_r+0x918>
 800c144:	2300      	movs	r3, #0
 800c146:	9311      	str	r3, [sp, #68]	; 0x44
 800c148:	f898 3000 	ldrb.w	r3, [r8]
 800c14c:	46cb      	mov	fp, r9
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f47f abbb 	bne.w	800b8ca <_vfiprintf_r+0x82>
 800c154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 81d2 	bne.w	800c500 <_vfiprintf_r+0xcb8>
 800c15c:	2300      	movs	r3, #0
 800c15e:	9311      	str	r3, [sp, #68]	; 0x44
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c164:	899b      	ldrh	r3, [r3, #12]
 800c166:	07d1      	lsls	r1, r2, #31
 800c168:	d402      	bmi.n	800c170 <_vfiprintf_r+0x928>
 800c16a:	059a      	lsls	r2, r3, #22
 800c16c:	f140 8103 	bpl.w	800c376 <_vfiprintf_r+0xb2e>
 800c170:	065b      	lsls	r3, r3, #25
 800c172:	f53f ac63 	bmi.w	800ba3c <_vfiprintf_r+0x1f4>
 800c176:	9802      	ldr	r0, [sp, #8]
 800c178:	b03d      	add	sp, #244	; 0xf4
 800c17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17e:	9f03      	ldr	r7, [sp, #12]
 800c180:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	1b9b      	subs	r3, r3, r6
 800c188:	9303      	str	r3, [sp, #12]
 800c18a:	e495      	b.n	800bab8 <_vfiprintf_r+0x270>
 800c18c:	aa10      	add	r2, sp, #64	; 0x40
 800c18e:	9901      	ldr	r1, [sp, #4]
 800c190:	9805      	ldr	r0, [sp, #20]
 800c192:	9309      	str	r3, [sp, #36]	; 0x24
 800c194:	f7ff fb12 	bl	800b7bc <__sprint_r.part.0>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d1e1      	bne.n	800c160 <_vfiprintf_r+0x918>
 800c19c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c1a0:	46cb      	mov	fp, r9
 800c1a2:	f101 0e01 	add.w	lr, r1, #1
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	e53d      	b.n	800bc26 <_vfiprintf_r+0x3de>
 800c1aa:	aa10      	add	r2, sp, #64	; 0x40
 800c1ac:	9901      	ldr	r1, [sp, #4]
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7ff fb04 	bl	800b7bc <__sprint_r.part.0>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d1d3      	bne.n	800c160 <_vfiprintf_r+0x918>
 800c1b8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c1bc:	46cc      	mov	ip, r9
 800c1be:	1c48      	adds	r0, r1, #1
 800c1c0:	e5cb      	b.n	800bd5a <_vfiprintf_r+0x512>
 800c1c2:	aa10      	add	r2, sp, #64	; 0x40
 800c1c4:	9901      	ldr	r1, [sp, #4]
 800c1c6:	9805      	ldr	r0, [sp, #20]
 800c1c8:	f7ff faf8 	bl	800b7bc <__sprint_r.part.0>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1c7      	bne.n	800c160 <_vfiprintf_r+0x918>
 800c1d0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c1d4:	46cb      	mov	fp, r9
 800c1d6:	f101 0c01 	add.w	ip, r1, #1
 800c1da:	e76a      	b.n	800c0b2 <_vfiprintf_r+0x86a>
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	f040 8142 	bne.w	800c466 <_vfiprintf_r+0xc1e>
 800c1e2:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	f000 80b7 	beq.w	800c35a <_vfiprintf_r+0xb12>
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 800c1f2:	460a      	mov	r2, r1
 800c1f4:	9114      	str	r1, [sp, #80]	; 0x50
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	9413      	str	r4, [sp, #76]	; 0x4c
 800c1fa:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c1fe:	4601      	mov	r1, r0
 800c200:	46e3      	mov	fp, ip
 800c202:	3001      	adds	r0, #1
 800c204:	f10c 0c08 	add.w	ip, ip, #8
 800c208:	e725      	b.n	800c056 <_vfiprintf_r+0x80e>
 800c20a:	ab0f      	add	r3, sp, #60	; 0x3c
 800c20c:	2202      	movs	r2, #2
 800c20e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 800c212:	4608      	mov	r0, r1
 800c214:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c218:	4601      	mov	r1, r0
 800c21a:	46e3      	mov	fp, ip
 800c21c:	3001      	adds	r0, #1
 800c21e:	f10c 0c08 	add.w	ip, ip, #8
 800c222:	e542      	b.n	800bcaa <_vfiprintf_r+0x462>
 800c224:	2a01      	cmp	r2, #1
 800c226:	461f      	mov	r7, r3
 800c228:	f47f ac99 	bne.w	800bb5e <_vfiprintf_r+0x316>
 800c22c:	2d00      	cmp	r5, #0
 800c22e:	bf08      	it	eq
 800c230:	2c0a      	cmpeq	r4, #10
 800c232:	f080 80d5 	bcs.w	800c3e0 <_vfiprintf_r+0xb98>
 800c236:	ae3c      	add	r6, sp, #240	; 0xf0
 800c238:	3430      	adds	r4, #48	; 0x30
 800c23a:	2301      	movs	r3, #1
 800c23c:	f806 4d01 	strb.w	r4, [r6, #-1]!
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	e439      	b.n	800bab8 <_vfiprintf_r+0x270>
 800c244:	2a00      	cmp	r2, #0
 800c246:	d142      	bne.n	800c2ce <_vfiprintf_r+0xa86>
 800c248:	9a03      	ldr	r2, [sp, #12]
 800c24a:	9214      	str	r2, [sp, #80]	; 0x50
 800c24c:	2301      	movs	r3, #1
 800c24e:	e9cd 2612 	strd	r2, r6, [sp, #72]	; 0x48
 800c252:	9311      	str	r3, [sp, #68]	; 0x44
 800c254:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c258:	e75d      	b.n	800c116 <_vfiprintf_r+0x8ce>
 800c25a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c25c:	ae3c      	add	r6, sp, #240	; 0xf0
 800c25e:	0923      	lsrs	r3, r4, #4
 800c260:	f004 010f 	and.w	r1, r4, #15
 800c264:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800c268:	092a      	lsrs	r2, r5, #4
 800c26a:	461c      	mov	r4, r3
 800c26c:	4615      	mov	r5, r2
 800c26e:	5c43      	ldrb	r3, [r0, r1]
 800c270:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800c274:	ea54 0305 	orrs.w	r3, r4, r5
 800c278:	d1f1      	bne.n	800c25e <_vfiprintf_r+0xa16>
 800c27a:	9b00      	ldr	r3, [sp, #0]
 800c27c:	1b9b      	subs	r3, r3, r6
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	e41a      	b.n	800bab8 <_vfiprintf_r+0x270>
 800c282:	f8cd a00c 	str.w	sl, [sp, #12]
 800c286:	ae3c      	add	r6, sp, #240	; 0xf0
 800c288:	e416      	b.n	800bab8 <_vfiprintf_r+0x270>
 800c28a:	aa10      	add	r2, sp, #64	; 0x40
 800c28c:	9901      	ldr	r1, [sp, #4]
 800c28e:	9805      	ldr	r0, [sp, #20]
 800c290:	f7ff fa94 	bl	800b7bc <__sprint_r.part.0>
 800c294:	2800      	cmp	r0, #0
 800c296:	f47f af63 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c29a:	46cb      	mov	fp, r9
 800c29c:	f7ff bb31 	b.w	800b902 <_vfiprintf_r+0xba>
 800c2a0:	aa10      	add	r2, sp, #64	; 0x40
 800c2a2:	9901      	ldr	r1, [sp, #4]
 800c2a4:	9805      	ldr	r0, [sp, #20]
 800c2a6:	f7ff fa89 	bl	800b7bc <__sprint_r.part.0>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	f47f af58 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c2b0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c2b4:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c2b8:	1c48      	adds	r0, r1, #1
 800c2ba:	46cb      	mov	fp, r9
 800c2bc:	e4f5      	b.n	800bcaa <_vfiprintf_r+0x462>
 800c2be:	2a00      	cmp	r2, #0
 800c2c0:	d179      	bne.n	800c3b6 <_vfiprintf_r+0xb6e>
 800c2c2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	46cb      	mov	fp, r9
 800c2cc:	e4f1      	b.n	800bcb2 <_vfiprintf_r+0x46a>
 800c2ce:	aa10      	add	r2, sp, #64	; 0x40
 800c2d0:	9901      	ldr	r1, [sp, #4]
 800c2d2:	9805      	ldr	r0, [sp, #20]
 800c2d4:	f7ff fa72 	bl	800b7bc <__sprint_r.part.0>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	f47f af41 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c2de:	e9dd 0211 	ldrd	r0, r2, [sp, #68]	; 0x44
 800c2e2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	46cb      	mov	fp, r9
 800c2ea:	e515      	b.n	800bd18 <_vfiprintf_r+0x4d0>
 800c2ec:	9d01      	ldr	r5, [sp, #4]
 800c2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2f0:	f7fe f9c0 	bl	800a674 <__retarget_lock_acquire_recursive>
 800c2f4:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 800c2f8:	b28a      	uxth	r2, r1
 800c2fa:	f7ff babc 	b.w	800b876 <_vfiprintf_r+0x2e>
 800c2fe:	2330      	movs	r3, #48	; 0x30
 800c300:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800c304:	f7ff bbd8 	b.w	800bab8 <_vfiprintf_r+0x270>
 800c308:	0598      	lsls	r0, r3, #22
 800c30a:	f100 80d8 	bmi.w	800c4be <_vfiprintf_r+0xc76>
 800c30e:	680c      	ldr	r4, [r1, #0]
 800c310:	9206      	str	r2, [sp, #24]
 800c312:	17e5      	asrs	r5, r4, #31
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	e407      	b.n	800bb2a <_vfiprintf_r+0x2e2>
 800c31a:	059f      	lsls	r7, r3, #22
 800c31c:	f100 80dc 	bmi.w	800c4d8 <_vfiprintf_r+0xc90>
 800c320:	6814      	ldr	r4, [r2, #0]
 800c322:	9106      	str	r1, [sp, #24]
 800c324:	2201      	movs	r2, #1
 800c326:	2500      	movs	r5, #0
 800c328:	f7ff bbaa 	b.w	800ba80 <_vfiprintf_r+0x238>
 800c32c:	05b8      	lsls	r0, r7, #22
 800c32e:	f100 80d9 	bmi.w	800c4e4 <_vfiprintf_r+0xc9c>
 800c332:	680c      	ldr	r4, [r1, #0]
 800c334:	9206      	str	r2, [sp, #24]
 800c336:	2500      	movs	r5, #0
 800c338:	f7ff bbd9 	b.w	800baee <_vfiprintf_r+0x2a6>
 800c33c:	05be      	lsls	r6, r7, #22
 800c33e:	f100 80c6 	bmi.w	800c4ce <_vfiprintf_r+0xc86>
 800c342:	6814      	ldr	r4, [r2, #0]
 800c344:	9306      	str	r3, [sp, #24]
 800c346:	2500      	movs	r5, #0
 800c348:	f7ff bb66 	b.w	800ba18 <_vfiprintf_r+0x1d0>
 800c34c:	9a02      	ldr	r2, [sp, #8]
 800c34e:	4610      	mov	r0, r2
 800c350:	17d1      	asrs	r1, r2, #31
 800c352:	e9c3 0100 	strd	r0, r1, [r3]
 800c356:	f7ff bab3 	b.w	800b8c0 <_vfiprintf_r+0x78>
 800c35a:	9b08      	ldr	r3, [sp, #32]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f040 809d 	bne.w	800c49c <_vfiprintf_r+0xc54>
 800c362:	4611      	mov	r1, r2
 800c364:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c368:	2001      	movs	r0, #1
 800c36a:	46cb      	mov	fp, r9
 800c36c:	e4a1      	b.n	800bcb2 <_vfiprintf_r+0x46a>
 800c36e:	4249      	negs	r1, r1
 800c370:	9104      	str	r1, [sp, #16]
 800c372:	9206      	str	r2, [sp, #24]
 800c374:	e5ca      	b.n	800bf0c <_vfiprintf_r+0x6c4>
 800c376:	9c01      	ldr	r4, [sp, #4]
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f7fe f983 	bl	800a684 <__retarget_lock_release_recursive>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	e6f6      	b.n	800c170 <_vfiprintf_r+0x928>
 800c382:	aa10      	add	r2, sp, #64	; 0x40
 800c384:	9901      	ldr	r1, [sp, #4]
 800c386:	9805      	ldr	r0, [sp, #20]
 800c388:	f7ff fa18 	bl	800b7bc <__sprint_r.part.0>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f47f aee7 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c392:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c394:	e6c7      	b.n	800c126 <_vfiprintf_r+0x8de>
 800c396:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c398:	f7fe f974 	bl	800a684 <__retarget_lock_release_recursive>
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a0:	9302      	str	r3, [sp, #8]
 800c3a2:	e6e8      	b.n	800c176 <_vfiprintf_r+0x92e>
 800c3a4:	4653      	mov	r3, sl
 800c3a6:	2b06      	cmp	r3, #6
 800c3a8:	bf28      	it	cs
 800c3aa:	2306      	movcs	r3, #6
 800c3ac:	9303      	str	r3, [sp, #12]
 800c3ae:	9406      	str	r4, [sp, #24]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4e5d      	ldr	r6, [pc, #372]	; (800c528 <_vfiprintf_r+0xce0>)
 800c3b4:	e415      	b.n	800bbe2 <_vfiprintf_r+0x39a>
 800c3b6:	aa10      	add	r2, sp, #64	; 0x40
 800c3b8:	9901      	ldr	r1, [sp, #4]
 800c3ba:	9805      	ldr	r0, [sp, #20]
 800c3bc:	f7ff f9fe 	bl	800b7bc <__sprint_r.part.0>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	f47f aecd 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c3c6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c3ca:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c3ce:	1c48      	adds	r0, r1, #1
 800c3d0:	46cb      	mov	fp, r9
 800c3d2:	e46e      	b.n	800bcb2 <_vfiprintf_r+0x46a>
 800c3d4:	2d00      	cmp	r5, #0
 800c3d6:	bf08      	it	eq
 800c3d8:	2c0a      	cmpeq	r4, #10
 800c3da:	461f      	mov	r7, r3
 800c3dc:	f4ff af2b 	bcc.w	800c236 <_vfiprintf_r+0x9ee>
 800c3e0:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	9703      	str	r7, [sp, #12]
 800c3e8:	f8cd 801c 	str.w	r8, [sp, #28]
 800c3ec:	ae3c      	add	r6, sp, #240	; 0xf0
 800c3ee:	4617      	mov	r7, r2
 800c3f0:	4698      	mov	r8, r3
 800c3f2:	e00b      	b.n	800c40c <_vfiprintf_r+0xbc4>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	220a      	movs	r2, #10
 800c3fc:	f001 fdd4 	bl	800dfa8 <__aeabi_uldivmod>
 800c400:	4604      	mov	r4, r0
 800c402:	460d      	mov	r5, r1
 800c404:	ea54 0305 	orrs.w	r3, r4, r5
 800c408:	f43f aeb9 	beq.w	800c17e <_vfiprintf_r+0x936>
 800c40c:	220a      	movs	r2, #10
 800c40e:	2300      	movs	r3, #0
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	f001 fdc8 	bl	800dfa8 <__aeabi_uldivmod>
 800c418:	3230      	adds	r2, #48	; 0x30
 800c41a:	f806 2c01 	strb.w	r2, [r6, #-1]
 800c41e:	3701      	adds	r7, #1
 800c420:	3e01      	subs	r6, #1
 800c422:	f1b8 0f00 	cmp.w	r8, #0
 800c426:	d0e5      	beq.n	800c3f4 <_vfiprintf_r+0xbac>
 800c428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	42bb      	cmp	r3, r7
 800c42e:	d1e1      	bne.n	800c3f4 <_vfiprintf_r+0xbac>
 800c430:	2fff      	cmp	r7, #255	; 0xff
 800c432:	d0df      	beq.n	800c3f4 <_vfiprintf_r+0xbac>
 800c434:	2d00      	cmp	r5, #0
 800c436:	bf08      	it	eq
 800c438:	2c0a      	cmpeq	r4, #10
 800c43a:	d3db      	bcc.n	800c3f4 <_vfiprintf_r+0xbac>
 800c43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c43e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c440:	1af6      	subs	r6, r6, r3
 800c442:	461a      	mov	r2, r3
 800c444:	4630      	mov	r0, r6
 800c446:	f7ff f987 	bl	800b758 <strncpy>
 800c44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c44c:	785f      	ldrb	r7, [r3, #1]
 800c44e:	2f00      	cmp	r7, #0
 800c450:	d0d0      	beq.n	800c3f4 <_vfiprintf_r+0xbac>
 800c452:	3301      	adds	r3, #1
 800c454:	930b      	str	r3, [sp, #44]	; 0x2c
 800c456:	2700      	movs	r7, #0
 800c458:	e7cc      	b.n	800c3f4 <_vfiprintf_r+0xbac>
 800c45a:	2a01      	cmp	r2, #1
 800c45c:	f47f ab7f 	bne.w	800bb5e <_vfiprintf_r+0x316>
 800c460:	e6e9      	b.n	800c236 <_vfiprintf_r+0x9ee>
 800c462:	4663      	mov	r3, ip
 800c464:	e44c      	b.n	800bd00 <_vfiprintf_r+0x4b8>
 800c466:	aa10      	add	r2, sp, #64	; 0x40
 800c468:	9901      	ldr	r1, [sp, #4]
 800c46a:	9805      	ldr	r0, [sp, #20]
 800c46c:	f7ff f9a6 	bl	800b7bc <__sprint_r.part.0>
 800c470:	2800      	cmp	r0, #0
 800c472:	f47f ae75 	bne.w	800c160 <_vfiprintf_r+0x918>
 800c476:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c47a:	46cb      	mov	fp, r9
 800c47c:	1c48      	adds	r0, r1, #1
 800c47e:	f7ff bbf6 	b.w	800bc6e <_vfiprintf_r+0x426>
 800c482:	9a02      	ldr	r2, [sp, #8]
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	f7ff ba1b 	b.w	800b8c0 <_vfiprintf_r+0x78>
 800c48a:	4630      	mov	r0, r6
 800c48c:	9406      	str	r4, [sp, #24]
 800c48e:	f7fa ff37 	bl	8007300 <strlen>
 800c492:	f04f 0a00 	mov.w	sl, #0
 800c496:	9003      	str	r0, [sp, #12]
 800c498:	f7ff bb0e 	b.w	800bab8 <_vfiprintf_r+0x270>
 800c49c:	ab0f      	add	r3, sp, #60	; 0x3c
 800c49e:	2202      	movs	r2, #2
 800c4a0:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c4aa:	e6b5      	b.n	800c218 <_vfiprintf_r+0x9d0>
 800c4ac:	46e6      	mov	lr, ip
 800c4ae:	f7ff bbcf 	b.w	800bc50 <_vfiprintf_r+0x408>
 800c4b2:	1c48      	adds	r0, r1, #1
 800c4b4:	e466      	b.n	800bd84 <_vfiprintf_r+0x53c>
 800c4b6:	9a02      	ldr	r2, [sp, #8]
 800c4b8:	801a      	strh	r2, [r3, #0]
 800c4ba:	f7ff ba01 	b.w	800b8c0 <_vfiprintf_r+0x78>
 800c4be:	f991 4000 	ldrsb.w	r4, [r1]
 800c4c2:	9206      	str	r2, [sp, #24]
 800c4c4:	17e5      	asrs	r5, r4, #31
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7ff bb2e 	b.w	800bb2a <_vfiprintf_r+0x2e2>
 800c4ce:	7814      	ldrb	r4, [r2, #0]
 800c4d0:	9306      	str	r3, [sp, #24]
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	f7ff baa0 	b.w	800ba18 <_vfiprintf_r+0x1d0>
 800c4d8:	7814      	ldrb	r4, [r2, #0]
 800c4da:	9106      	str	r1, [sp, #24]
 800c4dc:	2500      	movs	r5, #0
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f7ff bace 	b.w	800ba80 <_vfiprintf_r+0x238>
 800c4e4:	780c      	ldrb	r4, [r1, #0]
 800c4e6:	9206      	str	r2, [sp, #24]
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	f7ff bb00 	b.w	800baee <_vfiprintf_r+0x2a6>
 800c4ee:	f8cd a00c 	str.w	sl, [sp, #12]
 800c4f2:	9406      	str	r4, [sp, #24]
 800c4f4:	4682      	mov	sl, r0
 800c4f6:	f7ff badf 	b.w	800bab8 <_vfiprintf_r+0x270>
 800c4fa:	4663      	mov	r3, ip
 800c4fc:	4684      	mov	ip, r0
 800c4fe:	e5f1      	b.n	800c0e4 <_vfiprintf_r+0x89c>
 800c500:	9805      	ldr	r0, [sp, #20]
 800c502:	9901      	ldr	r1, [sp, #4]
 800c504:	aa10      	add	r2, sp, #64	; 0x40
 800c506:	f7ff f959 	bl	800b7bc <__sprint_r.part.0>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	f43f ae26 	beq.w	800c15c <_vfiprintf_r+0x914>
 800c510:	e626      	b.n	800c160 <_vfiprintf_r+0x918>
 800c512:	9806      	ldr	r0, [sp, #24]
 800c514:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c518:	6802      	ldr	r2, [r0, #0]
 800c51a:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
 800c51e:	1d02      	adds	r2, r0, #4
 800c520:	4688      	mov	r8, r1
 800c522:	9206      	str	r2, [sp, #24]
 800c524:	f7ff ba01 	b.w	800b92a <_vfiprintf_r+0xe2>
 800c528:	0800e658 	.word	0x0800e658

0800c52c <vfiprintf>:
 800c52c:	b410      	push	{r4}
 800c52e:	4c04      	ldr	r4, [pc, #16]	; (800c540 <vfiprintf+0x14>)
 800c530:	4613      	mov	r3, r2
 800c532:	460a      	mov	r2, r1
 800c534:	4601      	mov	r1, r0
 800c536:	6820      	ldr	r0, [r4, #0]
 800c538:	bc10      	pop	{r4}
 800c53a:	f7ff b985 	b.w	800b848 <_vfiprintf_r>
 800c53e:	bf00      	nop
 800c540:	20000030 	.word	0x20000030

0800c544 <__sbprintf>:
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800c54e:	8989      	ldrh	r1, [r1, #12]
 800c550:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800c552:	89e5      	ldrh	r5, [r4, #14]
 800c554:	9619      	str	r6, [sp, #100]	; 0x64
 800c556:	f021 0102 	bic.w	r1, r1, #2
 800c55a:	4606      	mov	r6, r0
 800c55c:	69e0      	ldr	r0, [r4, #28]
 800c55e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c562:	4617      	mov	r7, r2
 800c564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c568:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c56a:	f8ad 500e 	strh.w	r5, [sp, #14]
 800c56e:	4698      	mov	r8, r3
 800c570:	ad1a      	add	r5, sp, #104	; 0x68
 800c572:	2300      	movs	r3, #0
 800c574:	9007      	str	r0, [sp, #28]
 800c576:	a816      	add	r0, sp, #88	; 0x58
 800c578:	9209      	str	r2, [sp, #36]	; 0x24
 800c57a:	9306      	str	r3, [sp, #24]
 800c57c:	9500      	str	r5, [sp, #0]
 800c57e:	9504      	str	r5, [sp, #16]
 800c580:	9102      	str	r1, [sp, #8]
 800c582:	9105      	str	r1, [sp, #20]
 800c584:	f7fe f86e 	bl	800a664 <__retarget_lock_init_recursive>
 800c588:	4643      	mov	r3, r8
 800c58a:	463a      	mov	r2, r7
 800c58c:	4669      	mov	r1, sp
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff f95a 	bl	800b848 <_vfiprintf_r>
 800c594:	1e05      	subs	r5, r0, #0
 800c596:	db07      	blt.n	800c5a8 <__sbprintf+0x64>
 800c598:	4630      	mov	r0, r6
 800c59a:	4669      	mov	r1, sp
 800c59c:	f7fd fd48 	bl	800a030 <_fflush_r>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	bf18      	it	ne
 800c5a4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c5a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c5ac:	065b      	lsls	r3, r3, #25
 800c5ae:	d503      	bpl.n	800c5b8 <__sbprintf+0x74>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c5ba:	f7fe f857 	bl	800a66c <__retarget_lock_close_recursive>
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5c8 <_write_r>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4c08      	ldr	r4, [pc, #32]	; (800c5f0 <_write_r+0x28>)
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	f001 fe8d 	bl	800e2f8 <_write>
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	d000      	beq.n	800c5e4 <_write_r+0x1c>
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0fb      	beq.n	800c5e2 <_write_r+0x1a>
 800c5ea:	6033      	str	r3, [r6, #0]
 800c5ec:	bd70      	pop	{r4, r5, r6, pc}
 800c5ee:	bf00      	nop
 800c5f0:	2000118c 	.word	0x2000118c

0800c5f4 <_calloc_r>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	fb02 f101 	mul.w	r1, r2, r1
 800c5fa:	f7fe f8bd 	bl	800a778 <_malloc_r>
 800c5fe:	4604      	mov	r4, r0
 800c600:	b1d8      	cbz	r0, 800c63a <_calloc_r+0x46>
 800c602:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c606:	f022 0203 	bic.w	r2, r2, #3
 800c60a:	3a04      	subs	r2, #4
 800c60c:	2a24      	cmp	r2, #36	; 0x24
 800c60e:	d81d      	bhi.n	800c64c <_calloc_r+0x58>
 800c610:	2a13      	cmp	r2, #19
 800c612:	d914      	bls.n	800c63e <_calloc_r+0x4a>
 800c614:	2300      	movs	r3, #0
 800c616:	2a1b      	cmp	r2, #27
 800c618:	e9c0 3300 	strd	r3, r3, [r0]
 800c61c:	d91b      	bls.n	800c656 <_calloc_r+0x62>
 800c61e:	2a24      	cmp	r2, #36	; 0x24
 800c620:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c624:	bf0a      	itet	eq
 800c626:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800c62a:	f100 0210 	addne.w	r2, r0, #16
 800c62e:	f100 0218 	addeq.w	r2, r0, #24
 800c632:	2300      	movs	r3, #0
 800c634:	e9c2 3300 	strd	r3, r3, [r2]
 800c638:	6093      	str	r3, [r2, #8]
 800c63a:	4620      	mov	r0, r4
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	4602      	mov	r2, r0
 800c640:	2300      	movs	r3, #0
 800c642:	e9c2 3300 	strd	r3, r3, [r2]
 800c646:	6093      	str	r3, [r2, #8]
 800c648:	4620      	mov	r0, r4
 800c64a:	bd10      	pop	{r4, pc}
 800c64c:	2100      	movs	r1, #0
 800c64e:	f7fa fde1 	bl	8007214 <memset>
 800c652:	4620      	mov	r0, r4
 800c654:	bd10      	pop	{r4, pc}
 800c656:	f100 0208 	add.w	r2, r0, #8
 800c65a:	e7f1      	b.n	800c640 <_calloc_r+0x4c>

0800c65c <_close_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4c07      	ldr	r4, [pc, #28]	; (800c67c <_close_r+0x20>)
 800c660:	2300      	movs	r3, #0
 800c662:	4605      	mov	r5, r0
 800c664:	4608      	mov	r0, r1
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	f001 fe1e 	bl	800e2a8 <_close>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	d000      	beq.n	800c672 <_close_r+0x16>
 800c670:	bd38      	pop	{r3, r4, r5, pc}
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0fb      	beq.n	800c670 <_close_r+0x14>
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	2000118c 	.word	0x2000118c

0800c680 <_fclose_r>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	2900      	cmp	r1, #0
 800c684:	d048      	beq.n	800c718 <_fclose_r+0x98>
 800c686:	4605      	mov	r5, r0
 800c688:	460c      	mov	r4, r1
 800c68a:	b110      	cbz	r0, 800c692 <_fclose_r+0x12>
 800c68c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d048      	beq.n	800c724 <_fclose_r+0xa4>
 800c692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c698:	07d0      	lsls	r0, r2, #31
 800c69a:	d440      	bmi.n	800c71e <_fclose_r+0x9e>
 800c69c:	0599      	lsls	r1, r3, #22
 800c69e:	d530      	bpl.n	800c702 <_fclose_r+0x82>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f7fd fc1a 	bl	8009edc <__sflush_r>
 800c6a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	b133      	cbz	r3, 800c6bc <_fclose_r+0x3c>
 800c6ae:	69e1      	ldr	r1, [r4, #28]
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	4798      	blx	r3
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	bfb8      	it	lt
 800c6b8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	061a      	lsls	r2, r3, #24
 800c6c0:	d43c      	bmi.n	800c73c <_fclose_r+0xbc>
 800c6c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c6c4:	b141      	cbz	r1, 800c6d8 <_fclose_r+0x58>
 800c6c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c6ca:	4299      	cmp	r1, r3
 800c6cc:	d002      	beq.n	800c6d4 <_fclose_r+0x54>
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f7fd fe64 	bl	800a39c <_free_r>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c6da:	b121      	cbz	r1, 800c6e6 <_fclose_r+0x66>
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7fd fe5d 	bl	800a39c <_free_r>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6463      	str	r3, [r4, #68]	; 0x44
 800c6e6:	f7fd fdcd 	bl	800a284 <__sfp_lock_acquire>
 800c6ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	07db      	lsls	r3, r3, #31
 800c6f0:	81a2      	strh	r2, [r4, #12]
 800c6f2:	d51f      	bpl.n	800c734 <_fclose_r+0xb4>
 800c6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6f6:	f7fd ffb9 	bl	800a66c <__retarget_lock_close_recursive>
 800c6fa:	f7fd fdc9 	bl	800a290 <__sfp_lock_release>
 800c6fe:	4630      	mov	r0, r6
 800c700:	bd70      	pop	{r4, r5, r6, pc}
 800c702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c704:	f7fd ffb6 	bl	800a674 <__retarget_lock_acquire_recursive>
 800c708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1c7      	bne.n	800c6a0 <_fclose_r+0x20>
 800c710:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800c712:	f016 0601 	ands.w	r6, r6, #1
 800c716:	d016      	beq.n	800c746 <_fclose_r+0xc6>
 800c718:	2600      	movs	r6, #0
 800c71a:	4630      	mov	r0, r6
 800c71c:	bd70      	pop	{r4, r5, r6, pc}
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0fa      	beq.n	800c718 <_fclose_r+0x98>
 800c722:	e7bd      	b.n	800c6a0 <_fclose_r+0x20>
 800c724:	f7fd fd30 	bl	800a188 <__sinit>
 800c728:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72e:	07d0      	lsls	r0, r2, #31
 800c730:	d4f5      	bmi.n	800c71e <_fclose_r+0x9e>
 800c732:	e7b3      	b.n	800c69c <_fclose_r+0x1c>
 800c734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c736:	f7fd ffa5 	bl	800a684 <__retarget_lock_release_recursive>
 800c73a:	e7db      	b.n	800c6f4 <_fclose_r+0x74>
 800c73c:	6921      	ldr	r1, [r4, #16]
 800c73e:	4628      	mov	r0, r5
 800c740:	f7fd fe2c 	bl	800a39c <_free_r>
 800c744:	e7bd      	b.n	800c6c2 <_fclose_r+0x42>
 800c746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c748:	f7fd ff9c 	bl	800a684 <__retarget_lock_release_recursive>
 800c74c:	4630      	mov	r0, r6
 800c74e:	bd70      	pop	{r4, r5, r6, pc}

0800c750 <fclose>:
 800c750:	4b02      	ldr	r3, [pc, #8]	; (800c75c <fclose+0xc>)
 800c752:	4601      	mov	r1, r0
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	f7ff bf93 	b.w	800c680 <_fclose_r>
 800c75a:	bf00      	nop
 800c75c:	20000030 	.word	0x20000030

0800c760 <__fputwc>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	b082      	sub	sp, #8
 800c766:	4681      	mov	r9, r0
 800c768:	4688      	mov	r8, r1
 800c76a:	4614      	mov	r4, r2
 800c76c:	f000 fa5a 	bl	800cc24 <__locale_mb_cur_max>
 800c770:	2801      	cmp	r0, #1
 800c772:	d103      	bne.n	800c77c <__fputwc+0x1c>
 800c774:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c778:	2bfe      	cmp	r3, #254	; 0xfe
 800c77a:	d933      	bls.n	800c7e4 <__fputwc+0x84>
 800c77c:	4642      	mov	r2, r8
 800c77e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800c782:	a901      	add	r1, sp, #4
 800c784:	4648      	mov	r0, r9
 800c786:	f000 ff09 	bl	800d59c <_wcrtomb_r>
 800c78a:	1c42      	adds	r2, r0, #1
 800c78c:	4606      	mov	r6, r0
 800c78e:	d02f      	beq.n	800c7f0 <__fputwc+0x90>
 800c790:	b320      	cbz	r0, 800c7dc <__fputwc+0x7c>
 800c792:	f89d c004 	ldrb.w	ip, [sp, #4]
 800c796:	2500      	movs	r5, #0
 800c798:	f10d 0a04 	add.w	sl, sp, #4
 800c79c:	e009      	b.n	800c7b2 <__fputwc+0x52>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	6022      	str	r2, [r4, #0]
 800c7a4:	f883 c000 	strb.w	ip, [r3]
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	42b5      	cmp	r5, r6
 800c7ac:	d216      	bcs.n	800c7dc <__fputwc+0x7c>
 800c7ae:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	60a3      	str	r3, [r4, #8]
 800c7ba:	daf0      	bge.n	800c79e <__fputwc+0x3e>
 800c7bc:	69a7      	ldr	r7, [r4, #24]
 800c7be:	42bb      	cmp	r3, r7
 800c7c0:	4661      	mov	r1, ip
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	4648      	mov	r0, r9
 800c7c6:	db02      	blt.n	800c7ce <__fputwc+0x6e>
 800c7c8:	f1bc 0f0a 	cmp.w	ip, #10
 800c7cc:	d1e7      	bne.n	800c79e <__fputwc+0x3e>
 800c7ce:	f000 fe85 	bl	800d4dc <__swbuf_r>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d1e8      	bne.n	800c7a8 <__fputwc+0x48>
 800c7d6:	b002      	add	sp, #8
 800c7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7dc:	4640      	mov	r0, r8
 800c7de:	b002      	add	sp, #8
 800c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e4:	fa5f fc88 	uxtb.w	ip, r8
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	f88d c004 	strb.w	ip, [sp, #4]
 800c7ee:	e7d2      	b.n	800c796 <__fputwc+0x36>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f6:	81a3      	strh	r3, [r4, #12]
 800c7f8:	b002      	add	sp, #8
 800c7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fe:	bf00      	nop

0800c800 <_fputwc_r>:
 800c800:	b530      	push	{r4, r5, lr}
 800c802:	4605      	mov	r5, r0
 800c804:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800c806:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800c80a:	07c0      	lsls	r0, r0, #31
 800c80c:	4614      	mov	r4, r2
 800c80e:	b083      	sub	sp, #12
 800c810:	b29a      	uxth	r2, r3
 800c812:	d401      	bmi.n	800c818 <_fputwc_r+0x18>
 800c814:	0590      	lsls	r0, r2, #22
 800c816:	d51c      	bpl.n	800c852 <_fputwc_r+0x52>
 800c818:	0490      	lsls	r0, r2, #18
 800c81a:	d406      	bmi.n	800c82a <_fputwc_r+0x2a>
 800c81c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c81e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c826:	81a3      	strh	r3, [r4, #12]
 800c828:	6662      	str	r2, [r4, #100]	; 0x64
 800c82a:	4628      	mov	r0, r5
 800c82c:	4622      	mov	r2, r4
 800c82e:	f7ff ff97 	bl	800c760 <__fputwc>
 800c832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c834:	07da      	lsls	r2, r3, #31
 800c836:	4605      	mov	r5, r0
 800c838:	d402      	bmi.n	800c840 <_fputwc_r+0x40>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	059b      	lsls	r3, r3, #22
 800c83e:	d502      	bpl.n	800c846 <_fputwc_r+0x46>
 800c840:	4628      	mov	r0, r5
 800c842:	b003      	add	sp, #12
 800c844:	bd30      	pop	{r4, r5, pc}
 800c846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c848:	f7fd ff1c 	bl	800a684 <__retarget_lock_release_recursive>
 800c84c:	4628      	mov	r0, r5
 800c84e:	b003      	add	sp, #12
 800c850:	bd30      	pop	{r4, r5, pc}
 800c852:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c854:	9101      	str	r1, [sp, #4]
 800c856:	f7fd ff0d 	bl	800a674 <__retarget_lock_acquire_recursive>
 800c85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85e:	9901      	ldr	r1, [sp, #4]
 800c860:	b29a      	uxth	r2, r3
 800c862:	e7d9      	b.n	800c818 <_fputwc_r+0x18>

0800c864 <fputwc>:
 800c864:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <fputwc+0x34>)
 800c866:	b570      	push	{r4, r5, r6, lr}
 800c868:	681c      	ldr	r4, [r3, #0]
 800c86a:	4605      	mov	r5, r0
 800c86c:	460e      	mov	r6, r1
 800c86e:	b10c      	cbz	r4, 800c874 <fputwc+0x10>
 800c870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c872:	b133      	cbz	r3, 800c882 <fputwc+0x1e>
 800c874:	4632      	mov	r2, r6
 800c876:	4629      	mov	r1, r5
 800c878:	4620      	mov	r0, r4
 800c87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c87e:	f7ff bfbf 	b.w	800c800 <_fputwc_r>
 800c882:	4620      	mov	r0, r4
 800c884:	f7fd fc80 	bl	800a188 <__sinit>
 800c888:	4632      	mov	r2, r6
 800c88a:	4629      	mov	r1, r5
 800c88c:	4620      	mov	r0, r4
 800c88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c892:	f7ff bfb5 	b.w	800c800 <_fputwc_r>
 800c896:	bf00      	nop
 800c898:	20000030 	.word	0x20000030

0800c89c <_fstat_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4c07      	ldr	r4, [pc, #28]	; (800c8c0 <_fstat_r+0x24>)
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	6023      	str	r3, [r4, #0]
 800c8ac:	f001 fd04 	bl	800e2b8 <_fstat>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d000      	beq.n	800c8b6 <_fstat_r+0x1a>
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0fb      	beq.n	800c8b4 <_fstat_r+0x18>
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	2000118c 	.word	0x2000118c

0800c8c4 <__sfvwrite_r>:
 800c8c4:	6893      	ldr	r3, [r2, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80e4 	beq.w	800ca94 <__sfvwrite_r+0x1d0>
 800c8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	0719      	lsls	r1, r3, #28
 800c8da:	b083      	sub	sp, #12
 800c8dc:	4682      	mov	sl, r0
 800c8de:	4690      	mov	r8, r2
 800c8e0:	d535      	bpl.n	800c94e <__sfvwrite_r+0x8a>
 800c8e2:	6922      	ldr	r2, [r4, #16]
 800c8e4:	b39a      	cbz	r2, 800c94e <__sfvwrite_r+0x8a>
 800c8e6:	f013 0202 	ands.w	r2, r3, #2
 800c8ea:	f8d8 6000 	ldr.w	r6, [r8]
 800c8ee:	d03d      	beq.n	800c96c <__sfvwrite_r+0xa8>
 800c8f0:	2700      	movs	r7, #0
 800c8f2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c8f6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c8fa:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800cbbc <__sfvwrite_r+0x2f8>
 800c8fe:	463d      	mov	r5, r7
 800c900:	454d      	cmp	r5, r9
 800c902:	462b      	mov	r3, r5
 800c904:	463a      	mov	r2, r7
 800c906:	bf28      	it	cs
 800c908:	464b      	movcs	r3, r9
 800c90a:	4661      	mov	r1, ip
 800c90c:	4650      	mov	r0, sl
 800c90e:	b1d5      	cbz	r5, 800c946 <__sfvwrite_r+0x82>
 800c910:	47d8      	blx	fp
 800c912:	2800      	cmp	r0, #0
 800c914:	f340 80c6 	ble.w	800caa4 <__sfvwrite_r+0x1e0>
 800c918:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c91c:	1a1b      	subs	r3, r3, r0
 800c91e:	4407      	add	r7, r0
 800c920:	1a2d      	subs	r5, r5, r0
 800c922:	f8c8 3008 	str.w	r3, [r8, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 80b0 	beq.w	800ca8c <__sfvwrite_r+0x1c8>
 800c92c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c930:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c934:	454d      	cmp	r5, r9
 800c936:	462b      	mov	r3, r5
 800c938:	463a      	mov	r2, r7
 800c93a:	bf28      	it	cs
 800c93c:	464b      	movcs	r3, r9
 800c93e:	4661      	mov	r1, ip
 800c940:	4650      	mov	r0, sl
 800c942:	2d00      	cmp	r5, #0
 800c944:	d1e4      	bne.n	800c910 <__sfvwrite_r+0x4c>
 800c946:	e9d6 7500 	ldrd	r7, r5, [r6]
 800c94a:	3608      	adds	r6, #8
 800c94c:	e7d8      	b.n	800c900 <__sfvwrite_r+0x3c>
 800c94e:	4621      	mov	r1, r4
 800c950:	4650      	mov	r0, sl
 800c952:	f7fc fad1 	bl	8008ef8 <__swsetup_r>
 800c956:	2800      	cmp	r0, #0
 800c958:	f040 812a 	bne.w	800cbb0 <__sfvwrite_r+0x2ec>
 800c95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c960:	f8d8 6000 	ldr.w	r6, [r8]
 800c964:	b29b      	uxth	r3, r3
 800c966:	f013 0202 	ands.w	r2, r3, #2
 800c96a:	d1c1      	bne.n	800c8f0 <__sfvwrite_r+0x2c>
 800c96c:	f013 0901 	ands.w	r9, r3, #1
 800c970:	d15d      	bne.n	800ca2e <__sfvwrite_r+0x16a>
 800c972:	68a7      	ldr	r7, [r4, #8]
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	464d      	mov	r5, r9
 800c978:	2d00      	cmp	r5, #0
 800c97a:	d054      	beq.n	800ca26 <__sfvwrite_r+0x162>
 800c97c:	059a      	lsls	r2, r3, #22
 800c97e:	f140 809b 	bpl.w	800cab8 <__sfvwrite_r+0x1f4>
 800c982:	42af      	cmp	r7, r5
 800c984:	46bb      	mov	fp, r7
 800c986:	f200 80d8 	bhi.w	800cb3a <__sfvwrite_r+0x276>
 800c98a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c98e:	d02f      	beq.n	800c9f0 <__sfvwrite_r+0x12c>
 800c990:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800c994:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800c998:	eba0 0b01 	sub.w	fp, r0, r1
 800c99c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800c9a0:	1c68      	adds	r0, r5, #1
 800c9a2:	107f      	asrs	r7, r7, #1
 800c9a4:	4458      	add	r0, fp
 800c9a6:	42b8      	cmp	r0, r7
 800c9a8:	463a      	mov	r2, r7
 800c9aa:	bf84      	itt	hi
 800c9ac:	4607      	movhi	r7, r0
 800c9ae:	463a      	movhi	r2, r7
 800c9b0:	055b      	lsls	r3, r3, #21
 800c9b2:	f140 80d3 	bpl.w	800cb5c <__sfvwrite_r+0x298>
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	f7fd fedd 	bl	800a778 <_malloc_r>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	f000 80f0 	beq.w	800cba4 <__sfvwrite_r+0x2e0>
 800c9c4:	465a      	mov	r2, fp
 800c9c6:	6921      	ldr	r1, [r4, #16]
 800c9c8:	9001      	str	r0, [sp, #4]
 800c9ca:	f7fa fb89 	bl	80070e0 <memcpy>
 800c9ce:	89a2      	ldrh	r2, [r4, #12]
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c9d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9da:	81a2      	strh	r2, [r4, #12]
 800c9dc:	eba7 020b 	sub.w	r2, r7, fp
 800c9e0:	eb03 000b 	add.w	r0, r3, fp
 800c9e4:	6167      	str	r7, [r4, #20]
 800c9e6:	6123      	str	r3, [r4, #16]
 800c9e8:	6020      	str	r0, [r4, #0]
 800c9ea:	60a2      	str	r2, [r4, #8]
 800c9ec:	462f      	mov	r7, r5
 800c9ee:	46ab      	mov	fp, r5
 800c9f0:	465a      	mov	r2, fp
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	f000 f97c 	bl	800ccf0 <memmove>
 800c9f8:	68a2      	ldr	r2, [r4, #8]
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	1bd2      	subs	r2, r2, r7
 800c9fe:	445b      	add	r3, fp
 800ca00:	462f      	mov	r7, r5
 800ca02:	60a2      	str	r2, [r4, #8]
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	2500      	movs	r5, #0
 800ca08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca0c:	1bdb      	subs	r3, r3, r7
 800ca0e:	44b9      	add	r9, r7
 800ca10:	f8c8 3008 	str.w	r3, [r8, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d039      	beq.n	800ca8c <__sfvwrite_r+0x1c8>
 800ca18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1c:	68a7      	ldr	r7, [r4, #8]
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2d00      	cmp	r5, #0
 800ca24:	d1aa      	bne.n	800c97c <__sfvwrite_r+0xb8>
 800ca26:	e9d6 9500 	ldrd	r9, r5, [r6]
 800ca2a:	3608      	adds	r6, #8
 800ca2c:	e7a4      	b.n	800c978 <__sfvwrite_r+0xb4>
 800ca2e:	4633      	mov	r3, r6
 800ca30:	4691      	mov	r9, r2
 800ca32:	4610      	mov	r0, r2
 800ca34:	4617      	mov	r7, r2
 800ca36:	464e      	mov	r6, r9
 800ca38:	469b      	mov	fp, r3
 800ca3a:	2f00      	cmp	r7, #0
 800ca3c:	d06b      	beq.n	800cb16 <__sfvwrite_r+0x252>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d071      	beq.n	800cb26 <__sfvwrite_r+0x262>
 800ca42:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ca46:	6820      	ldr	r0, [r4, #0]
 800ca48:	45b9      	cmp	r9, r7
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	bf28      	it	cs
 800ca4e:	463b      	movcs	r3, r7
 800ca50:	4288      	cmp	r0, r1
 800ca52:	d903      	bls.n	800ca5c <__sfvwrite_r+0x198>
 800ca54:	68a5      	ldr	r5, [r4, #8]
 800ca56:	4415      	add	r5, r2
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	dc71      	bgt.n	800cb40 <__sfvwrite_r+0x27c>
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	f300 8093 	bgt.w	800cb88 <__sfvwrite_r+0x2c4>
 800ca62:	4613      	mov	r3, r2
 800ca64:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca66:	69e1      	ldr	r1, [r4, #28]
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	47a8      	blx	r5
 800ca6e:	1e05      	subs	r5, r0, #0
 800ca70:	dd18      	ble.n	800caa4 <__sfvwrite_r+0x1e0>
 800ca72:	ebb9 0905 	subs.w	r9, r9, r5
 800ca76:	d00f      	beq.n	800ca98 <__sfvwrite_r+0x1d4>
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca7e:	1b5b      	subs	r3, r3, r5
 800ca80:	442e      	add	r6, r5
 800ca82:	1b7f      	subs	r7, r7, r5
 800ca84:	f8c8 3008 	str.w	r3, [r8, #8]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1d6      	bne.n	800ca3a <__sfvwrite_r+0x176>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	b003      	add	sp, #12
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	2000      	movs	r0, #0
 800ca96:	4770      	bx	lr
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f7fd fac8 	bl	800a030 <_fflush_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0ea      	beq.n	800ca7a <__sfvwrite_r+0x1b6>
 800caa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	b003      	add	sp, #12
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	4283      	cmp	r3, r0
 800cabc:	d315      	bcc.n	800caea <__sfvwrite_r+0x226>
 800cabe:	6961      	ldr	r1, [r4, #20]
 800cac0:	42a9      	cmp	r1, r5
 800cac2:	d812      	bhi.n	800caea <__sfvwrite_r+0x226>
 800cac4:	4b3c      	ldr	r3, [pc, #240]	; (800cbb8 <__sfvwrite_r+0x2f4>)
 800cac6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800cac8:	429d      	cmp	r5, r3
 800caca:	bf94      	ite	ls
 800cacc:	462b      	movls	r3, r5
 800cace:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800cad2:	464a      	mov	r2, r9
 800cad4:	fb93 f3f1 	sdiv	r3, r3, r1
 800cad8:	4650      	mov	r0, sl
 800cada:	fb01 f303 	mul.w	r3, r1, r3
 800cade:	69e1      	ldr	r1, [r4, #28]
 800cae0:	47b8      	blx	r7
 800cae2:	1e07      	subs	r7, r0, #0
 800cae4:	ddde      	ble.n	800caa4 <__sfvwrite_r+0x1e0>
 800cae6:	1bed      	subs	r5, r5, r7
 800cae8:	e78e      	b.n	800ca08 <__sfvwrite_r+0x144>
 800caea:	42af      	cmp	r7, r5
 800caec:	bf28      	it	cs
 800caee:	462f      	movcs	r7, r5
 800caf0:	463a      	mov	r2, r7
 800caf2:	4649      	mov	r1, r9
 800caf4:	f000 f8fc 	bl	800ccf0 <memmove>
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	1bdb      	subs	r3, r3, r7
 800cafe:	443a      	add	r2, r7
 800cb00:	60a3      	str	r3, [r4, #8]
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1ee      	bne.n	800cae6 <__sfvwrite_r+0x222>
 800cb08:	4621      	mov	r1, r4
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	f7fd fa90 	bl	800a030 <_fflush_r>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d0e8      	beq.n	800cae6 <__sfvwrite_r+0x222>
 800cb14:	e7c6      	b.n	800caa4 <__sfvwrite_r+0x1e0>
 800cb16:	f10b 0308 	add.w	r3, fp, #8
 800cb1a:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800cb1e:	469b      	mov	fp, r3
 800cb20:	3308      	adds	r3, #8
 800cb22:	2f00      	cmp	r7, #0
 800cb24:	d0f9      	beq.n	800cb1a <__sfvwrite_r+0x256>
 800cb26:	463a      	mov	r2, r7
 800cb28:	210a      	movs	r1, #10
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7fe f8c8 	bl	800acc0 <memchr>
 800cb30:	b338      	cbz	r0, 800cb82 <__sfvwrite_r+0x2be>
 800cb32:	3001      	adds	r0, #1
 800cb34:	eba0 0906 	sub.w	r9, r0, r6
 800cb38:	e783      	b.n	800ca42 <__sfvwrite_r+0x17e>
 800cb3a:	462f      	mov	r7, r5
 800cb3c:	46ab      	mov	fp, r5
 800cb3e:	e757      	b.n	800c9f0 <__sfvwrite_r+0x12c>
 800cb40:	4631      	mov	r1, r6
 800cb42:	462a      	mov	r2, r5
 800cb44:	f000 f8d4 	bl	800ccf0 <memmove>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	442b      	add	r3, r5
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4650      	mov	r0, sl
 800cb52:	f7fd fa6d 	bl	800a030 <_fflush_r>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d08b      	beq.n	800ca72 <__sfvwrite_r+0x1ae>
 800cb5a:	e7a3      	b.n	800caa4 <__sfvwrite_r+0x1e0>
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	f000 f941 	bl	800cde4 <_realloc_r>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f47f af39 	bne.w	800c9dc <__sfvwrite_r+0x118>
 800cb6a:	6921      	ldr	r1, [r4, #16]
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	f7fd fc15 	bl	800a39c <_free_r>
 800cb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb76:	220c      	movs	r2, #12
 800cb78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb7c:	f8ca 2000 	str.w	r2, [sl]
 800cb80:	e792      	b.n	800caa8 <__sfvwrite_r+0x1e4>
 800cb82:	f107 0901 	add.w	r9, r7, #1
 800cb86:	e75c      	b.n	800ca42 <__sfvwrite_r+0x17e>
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	f000 f8af 	bl	800ccf0 <memmove>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	68a1      	ldr	r1, [r4, #8]
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	1ac9      	subs	r1, r1, r3
 800cb9a:	441a      	add	r2, r3
 800cb9c:	60a1      	str	r1, [r4, #8]
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	461d      	mov	r5, r3
 800cba2:	e766      	b.n	800ca72 <__sfvwrite_r+0x1ae>
 800cba4:	230c      	movs	r3, #12
 800cba6:	f8ca 3000 	str.w	r3, [sl]
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	e77b      	b.n	800caa8 <__sfvwrite_r+0x1e4>
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbb4:	e76b      	b.n	800ca8e <__sfvwrite_r+0x1ca>
 800cbb6:	bf00      	nop
 800cbb8:	7ffffffe 	.word	0x7ffffffe
 800cbbc:	7ffffc00 	.word	0x7ffffc00

0800cbc0 <_isatty_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4c07      	ldr	r4, [pc, #28]	; (800cbe0 <_isatty_r+0x20>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	f001 fb7c 	bl	800e2c8 <_isatty>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d000      	beq.n	800cbd6 <_isatty_r+0x16>
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0fb      	beq.n	800cbd4 <_isatty_r+0x14>
 800cbdc:	602b      	str	r3, [r5, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	2000118c 	.word	0x2000118c

0800cbe4 <_setlocale_r>:
 800cbe4:	b1b2      	cbz	r2, 800cc14 <_setlocale_r+0x30>
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	490b      	ldr	r1, [pc, #44]	; (800cc18 <_setlocale_r+0x34>)
 800cbea:	4610      	mov	r0, r2
 800cbec:	4614      	mov	r4, r2
 800cbee:	f000 fb0b 	bl	800d208 <strcmp>
 800cbf2:	b908      	cbnz	r0, 800cbf8 <_setlocale_r+0x14>
 800cbf4:	4809      	ldr	r0, [pc, #36]	; (800cc1c <_setlocale_r+0x38>)
 800cbf6:	bd10      	pop	{r4, pc}
 800cbf8:	4908      	ldr	r1, [pc, #32]	; (800cc1c <_setlocale_r+0x38>)
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fb04 	bl	800d208 <strcmp>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d0f7      	beq.n	800cbf4 <_setlocale_r+0x10>
 800cc04:	4620      	mov	r0, r4
 800cc06:	4906      	ldr	r1, [pc, #24]	; (800cc20 <_setlocale_r+0x3c>)
 800cc08:	f000 fafe 	bl	800d208 <strcmp>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d0f1      	beq.n	800cbf4 <_setlocale_r+0x10>
 800cc10:	2000      	movs	r0, #0
 800cc12:	bd10      	pop	{r4, pc}
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <_setlocale_r+0x38>)
 800cc16:	4770      	bx	lr
 800cc18:	0800e7e0 	.word	0x0800e7e0
 800cc1c:	0800e7dc 	.word	0x0800e7dc
 800cc20:	0800e654 	.word	0x0800e654

0800cc24 <__locale_mb_cur_max>:
 800cc24:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <__locale_mb_cur_max+0x14>)
 800cc26:	4a05      	ldr	r2, [pc, #20]	; (800cc3c <__locale_mb_cur_max+0x18>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bf08      	it	eq
 800cc30:	4613      	moveq	r3, r2
 800cc32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800cc36:	4770      	bx	lr
 800cc38:	20000030 	.word	0x20000030
 800cc3c:	20000870 	.word	0x20000870

0800cc40 <__locale_ctype_ptr_l>:
 800cc40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop

0800cc48 <__locale_ctype_ptr>:
 800cc48:	4b04      	ldr	r3, [pc, #16]	; (800cc5c <__locale_ctype_ptr+0x14>)
 800cc4a:	4a05      	ldr	r2, [pc, #20]	; (800cc60 <__locale_ctype_ptr+0x18>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bf08      	it	eq
 800cc54:	4613      	moveq	r3, r2
 800cc56:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800cc5a:	4770      	bx	lr
 800cc5c:	20000030 	.word	0x20000030
 800cc60:	20000870 	.word	0x20000870

0800cc64 <setlocale>:
 800cc64:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <setlocale+0xc>)
 800cc66:	460a      	mov	r2, r1
 800cc68:	4601      	mov	r1, r0
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	f7ff bfba 	b.w	800cbe4 <_setlocale_r>
 800cc70:	20000030 	.word	0x20000030

0800cc74 <_lseek_r>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	460d      	mov	r5, r1
 800cc78:	4c08      	ldr	r4, [pc, #32]	; (800cc9c <_lseek_r+0x28>)
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4628      	mov	r0, r5
 800cc82:	2300      	movs	r3, #0
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	f001 fb27 	bl	800e2d8 <_lseek>
 800cc8a:	1c43      	adds	r3, r0, #1
 800cc8c:	d000      	beq.n	800cc90 <_lseek_r+0x1c>
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d0fb      	beq.n	800cc8e <_lseek_r+0x1a>
 800cc96:	6033      	str	r3, [r6, #0]
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	bf00      	nop
 800cc9c:	2000118c 	.word	0x2000118c

0800cca0 <_mbtowc_r>:
 800cca0:	b430      	push	{r4, r5}
 800cca2:	4c06      	ldr	r4, [pc, #24]	; (800ccbc <_mbtowc_r+0x1c>)
 800cca4:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_mbtowc_r+0x20>)
 800cca6:	6824      	ldr	r4, [r4, #0]
 800cca8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	bf08      	it	eq
 800ccae:	462c      	moveq	r4, r5
 800ccb0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800ccb4:	46a4      	mov	ip, r4
 800ccb6:	bc30      	pop	{r4, r5}
 800ccb8:	4760      	bx	ip
 800ccba:	bf00      	nop
 800ccbc:	20000030 	.word	0x20000030
 800ccc0:	20000870 	.word	0x20000870

0800ccc4 <__ascii_mbtowc>:
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	b149      	cbz	r1, 800ccdc <__ascii_mbtowc+0x18>
 800ccc8:	b15a      	cbz	r2, 800cce2 <__ascii_mbtowc+0x1e>
 800ccca:	b16b      	cbz	r3, 800cce8 <__ascii_mbtowc+0x24>
 800cccc:	7813      	ldrb	r3, [r2, #0]
 800ccce:	600b      	str	r3, [r1, #0]
 800ccd0:	7812      	ldrb	r2, [r2, #0]
 800ccd2:	1c10      	adds	r0, r2, #0
 800ccd4:	bf18      	it	ne
 800ccd6:	2001      	movne	r0, #1
 800ccd8:	b002      	add	sp, #8
 800ccda:	4770      	bx	lr
 800ccdc:	a901      	add	r1, sp, #4
 800ccde:	2a00      	cmp	r2, #0
 800cce0:	d1f3      	bne.n	800ccca <__ascii_mbtowc+0x6>
 800cce2:	4610      	mov	r0, r2
 800cce4:	b002      	add	sp, #8
 800cce6:	4770      	bx	lr
 800cce8:	f06f 0001 	mvn.w	r0, #1
 800ccec:	e7f4      	b.n	800ccd8 <__ascii_mbtowc+0x14>
 800ccee:	bf00      	nop

0800ccf0 <memmove>:
 800ccf0:	4288      	cmp	r0, r1
 800ccf2:	b4f0      	push	{r4, r5, r6, r7}
 800ccf4:	d90d      	bls.n	800cd12 <memmove+0x22>
 800ccf6:	188b      	adds	r3, r1, r2
 800ccf8:	4283      	cmp	r3, r0
 800ccfa:	d90a      	bls.n	800cd12 <memmove+0x22>
 800ccfc:	1884      	adds	r4, r0, r2
 800ccfe:	b132      	cbz	r2, 800cd0e <memmove+0x1e>
 800cd00:	4622      	mov	r2, r4
 800cd02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	d1f9      	bne.n	800cd02 <memmove+0x12>
 800cd0e:	bcf0      	pop	{r4, r5, r6, r7}
 800cd10:	4770      	bx	lr
 800cd12:	2a0f      	cmp	r2, #15
 800cd14:	d949      	bls.n	800cdaa <memmove+0xba>
 800cd16:	ea40 0301 	orr.w	r3, r0, r1
 800cd1a:	079b      	lsls	r3, r3, #30
 800cd1c:	d147      	bne.n	800cdae <memmove+0xbe>
 800cd1e:	f1a2 0310 	sub.w	r3, r2, #16
 800cd22:	091b      	lsrs	r3, r3, #4
 800cd24:	f101 0720 	add.w	r7, r1, #32
 800cd28:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800cd2c:	f101 0410 	add.w	r4, r1, #16
 800cd30:	f100 0510 	add.w	r5, r0, #16
 800cd34:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800cd38:	f845 6c10 	str.w	r6, [r5, #-16]
 800cd3c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800cd40:	f845 6c0c 	str.w	r6, [r5, #-12]
 800cd44:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800cd48:	f845 6c08 	str.w	r6, [r5, #-8]
 800cd4c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800cd50:	f845 6c04 	str.w	r6, [r5, #-4]
 800cd54:	3410      	adds	r4, #16
 800cd56:	42bc      	cmp	r4, r7
 800cd58:	f105 0510 	add.w	r5, r5, #16
 800cd5c:	d1ea      	bne.n	800cd34 <memmove+0x44>
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f002 050f 	and.w	r5, r2, #15
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	2d03      	cmp	r5, #3
 800cd68:	4419      	add	r1, r3
 800cd6a:	4403      	add	r3, r0
 800cd6c:	d921      	bls.n	800cdb2 <memmove+0xc2>
 800cd6e:	1f1f      	subs	r7, r3, #4
 800cd70:	460e      	mov	r6, r1
 800cd72:	462c      	mov	r4, r5
 800cd74:	3c04      	subs	r4, #4
 800cd76:	f856 cb04 	ldr.w	ip, [r6], #4
 800cd7a:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd7e:	2c03      	cmp	r4, #3
 800cd80:	d8f8      	bhi.n	800cd74 <memmove+0x84>
 800cd82:	1f2c      	subs	r4, r5, #4
 800cd84:	f024 0403 	bic.w	r4, r4, #3
 800cd88:	3404      	adds	r4, #4
 800cd8a:	4423      	add	r3, r4
 800cd8c:	4421      	add	r1, r4
 800cd8e:	f002 0203 	and.w	r2, r2, #3
 800cd92:	2a00      	cmp	r2, #0
 800cd94:	d0bb      	beq.n	800cd0e <memmove+0x1e>
 800cd96:	3b01      	subs	r3, #1
 800cd98:	440a      	add	r2, r1
 800cd9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cda2:	4291      	cmp	r1, r2
 800cda4:	d1f9      	bne.n	800cd9a <memmove+0xaa>
 800cda6:	bcf0      	pop	{r4, r5, r6, r7}
 800cda8:	4770      	bx	lr
 800cdaa:	4603      	mov	r3, r0
 800cdac:	e7f1      	b.n	800cd92 <memmove+0xa2>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	e7f1      	b.n	800cd96 <memmove+0xa6>
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	e7ed      	b.n	800cd92 <memmove+0xa2>
 800cdb6:	bf00      	nop

0800cdb8 <_read_r>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	460d      	mov	r5, r1
 800cdbc:	4c08      	ldr	r4, [pc, #32]	; (800cde0 <_read_r+0x28>)
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	f001 fa8d 	bl	800e2e8 <_read>
 800cdce:	1c43      	adds	r3, r0, #1
 800cdd0:	d000      	beq.n	800cdd4 <_read_r+0x1c>
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0fb      	beq.n	800cdd2 <_read_r+0x1a>
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	bd70      	pop	{r4, r5, r6, pc}
 800cdde:	bf00      	nop
 800cde0:	2000118c 	.word	0x2000118c

0800cde4 <_realloc_r>:
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	4692      	mov	sl, r2
 800cdea:	b083      	sub	sp, #12
 800cdec:	2900      	cmp	r1, #0
 800cdee:	f000 80a1 	beq.w	800cf34 <_realloc_r+0x150>
 800cdf2:	460d      	mov	r5, r1
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	f10a 040b 	add.w	r4, sl, #11
 800cdfa:	f7fd ffb1 	bl	800ad60 <__malloc_lock>
 800cdfe:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800ce02:	2c16      	cmp	r4, #22
 800ce04:	f022 0603 	bic.w	r6, r2, #3
 800ce08:	f1a5 0708 	sub.w	r7, r5, #8
 800ce0c:	d83e      	bhi.n	800ce8c <_realloc_r+0xa8>
 800ce0e:	2410      	movs	r4, #16
 800ce10:	4621      	mov	r1, r4
 800ce12:	45a2      	cmp	sl, r4
 800ce14:	d83f      	bhi.n	800ce96 <_realloc_r+0xb2>
 800ce16:	428e      	cmp	r6, r1
 800ce18:	eb07 0906 	add.w	r9, r7, r6
 800ce1c:	da74      	bge.n	800cf08 <_realloc_r+0x124>
 800ce1e:	4bc7      	ldr	r3, [pc, #796]	; (800d13c <_realloc_r+0x358>)
 800ce20:	6898      	ldr	r0, [r3, #8]
 800ce22:	4548      	cmp	r0, r9
 800ce24:	f000 80aa 	beq.w	800cf7c <_realloc_r+0x198>
 800ce28:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ce2c:	f020 0301 	bic.w	r3, r0, #1
 800ce30:	444b      	add	r3, r9
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	07db      	lsls	r3, r3, #31
 800ce36:	f140 8083 	bpl.w	800cf40 <_realloc_r+0x15c>
 800ce3a:	07d2      	lsls	r2, r2, #31
 800ce3c:	d534      	bpl.n	800cea8 <_realloc_r+0xc4>
 800ce3e:	4651      	mov	r1, sl
 800ce40:	4640      	mov	r0, r8
 800ce42:	f7fd fc99 	bl	800a778 <_malloc_r>
 800ce46:	4682      	mov	sl, r0
 800ce48:	b1e0      	cbz	r0, 800ce84 <_realloc_r+0xa0>
 800ce4a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ce4e:	f023 0301 	bic.w	r3, r3, #1
 800ce52:	443b      	add	r3, r7
 800ce54:	f1a0 0208 	sub.w	r2, r0, #8
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	f000 80f9 	beq.w	800d050 <_realloc_r+0x26c>
 800ce5e:	1f32      	subs	r2, r6, #4
 800ce60:	2a24      	cmp	r2, #36	; 0x24
 800ce62:	f200 8107 	bhi.w	800d074 <_realloc_r+0x290>
 800ce66:	2a13      	cmp	r2, #19
 800ce68:	6829      	ldr	r1, [r5, #0]
 800ce6a:	f200 80e6 	bhi.w	800d03a <_realloc_r+0x256>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	462a      	mov	r2, r5
 800ce72:	6019      	str	r1, [r3, #0]
 800ce74:	6851      	ldr	r1, [r2, #4]
 800ce76:	6059      	str	r1, [r3, #4]
 800ce78:	6892      	ldr	r2, [r2, #8]
 800ce7a:	609a      	str	r2, [r3, #8]
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f7fd fa8c 	bl	800a39c <_free_r>
 800ce84:	4640      	mov	r0, r8
 800ce86:	f7fd ff71 	bl	800ad6c <__malloc_unlock>
 800ce8a:	e04f      	b.n	800cf2c <_realloc_r+0x148>
 800ce8c:	f024 0407 	bic.w	r4, r4, #7
 800ce90:	2c00      	cmp	r4, #0
 800ce92:	4621      	mov	r1, r4
 800ce94:	dabd      	bge.n	800ce12 <_realloc_r+0x2e>
 800ce96:	f04f 0a00 	mov.w	sl, #0
 800ce9a:	230c      	movs	r3, #12
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	f8c8 3000 	str.w	r3, [r8]
 800cea2:	b003      	add	sp, #12
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800ceac:	eba7 0b03 	sub.w	fp, r7, r3
 800ceb0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ceb4:	f022 0203 	bic.w	r2, r2, #3
 800ceb8:	18b3      	adds	r3, r6, r2
 800ceba:	428b      	cmp	r3, r1
 800cebc:	dbbf      	blt.n	800ce3e <_realloc_r+0x5a>
 800cebe:	46da      	mov	sl, fp
 800cec0:	f8db 100c 	ldr.w	r1, [fp, #12]
 800cec4:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800cec8:	1f32      	subs	r2, r6, #4
 800ceca:	2a24      	cmp	r2, #36	; 0x24
 800cecc:	60c1      	str	r1, [r0, #12]
 800cece:	eb0b 0903 	add.w	r9, fp, r3
 800ced2:	6088      	str	r0, [r1, #8]
 800ced4:	f200 80c6 	bhi.w	800d064 <_realloc_r+0x280>
 800ced8:	2a13      	cmp	r2, #19
 800ceda:	6829      	ldr	r1, [r5, #0]
 800cedc:	f240 80c0 	bls.w	800d060 <_realloc_r+0x27c>
 800cee0:	f8cb 1008 	str.w	r1, [fp, #8]
 800cee4:	6869      	ldr	r1, [r5, #4]
 800cee6:	f8cb 100c 	str.w	r1, [fp, #12]
 800ceea:	2a1b      	cmp	r2, #27
 800ceec:	68a9      	ldr	r1, [r5, #8]
 800ceee:	f200 80d8 	bhi.w	800d0a2 <_realloc_r+0x2be>
 800cef2:	f10b 0210 	add.w	r2, fp, #16
 800cef6:	3508      	adds	r5, #8
 800cef8:	6011      	str	r1, [r2, #0]
 800cefa:	6869      	ldr	r1, [r5, #4]
 800cefc:	6051      	str	r1, [r2, #4]
 800cefe:	68a9      	ldr	r1, [r5, #8]
 800cf00:	6091      	str	r1, [r2, #8]
 800cf02:	461e      	mov	r6, r3
 800cf04:	465f      	mov	r7, fp
 800cf06:	4655      	mov	r5, sl
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	1b32      	subs	r2, r6, r4
 800cf0c:	2a0f      	cmp	r2, #15
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	d822      	bhi.n	800cf5a <_realloc_r+0x176>
 800cf14:	4333      	orrs	r3, r6
 800cf16:	607b      	str	r3, [r7, #4]
 800cf18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cf1c:	f043 0301 	orr.w	r3, r3, #1
 800cf20:	f8c9 3004 	str.w	r3, [r9, #4]
 800cf24:	4640      	mov	r0, r8
 800cf26:	f7fd ff21 	bl	800ad6c <__malloc_unlock>
 800cf2a:	46aa      	mov	sl, r5
 800cf2c:	4650      	mov	r0, sl
 800cf2e:	b003      	add	sp, #12
 800cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf34:	4611      	mov	r1, r2
 800cf36:	b003      	add	sp, #12
 800cf38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	f7fd bc1c 	b.w	800a778 <_malloc_r>
 800cf40:	f020 0003 	bic.w	r0, r0, #3
 800cf44:	1833      	adds	r3, r6, r0
 800cf46:	428b      	cmp	r3, r1
 800cf48:	db61      	blt.n	800d00e <_realloc_r+0x22a>
 800cf4a:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800cf4e:	461e      	mov	r6, r3
 800cf50:	60ca      	str	r2, [r1, #12]
 800cf52:	eb07 0903 	add.w	r9, r7, r3
 800cf56:	6091      	str	r1, [r2, #8]
 800cf58:	e7d6      	b.n	800cf08 <_realloc_r+0x124>
 800cf5a:	1939      	adds	r1, r7, r4
 800cf5c:	4323      	orrs	r3, r4
 800cf5e:	f042 0201 	orr.w	r2, r2, #1
 800cf62:	607b      	str	r3, [r7, #4]
 800cf64:	604a      	str	r2, [r1, #4]
 800cf66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	3108      	adds	r1, #8
 800cf70:	f8c9 3004 	str.w	r3, [r9, #4]
 800cf74:	4640      	mov	r0, r8
 800cf76:	f7fd fa11 	bl	800a39c <_free_r>
 800cf7a:	e7d3      	b.n	800cf24 <_realloc_r+0x140>
 800cf7c:	6840      	ldr	r0, [r0, #4]
 800cf7e:	f020 0903 	bic.w	r9, r0, #3
 800cf82:	44b1      	add	r9, r6
 800cf84:	f104 0010 	add.w	r0, r4, #16
 800cf88:	4581      	cmp	r9, r0
 800cf8a:	da77      	bge.n	800d07c <_realloc_r+0x298>
 800cf8c:	07d2      	lsls	r2, r2, #31
 800cf8e:	f53f af56 	bmi.w	800ce3e <_realloc_r+0x5a>
 800cf92:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800cf96:	eba7 0b02 	sub.w	fp, r7, r2
 800cf9a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cf9e:	f022 0203 	bic.w	r2, r2, #3
 800cfa2:	4491      	add	r9, r2
 800cfa4:	4548      	cmp	r0, r9
 800cfa6:	dc87      	bgt.n	800ceb8 <_realloc_r+0xd4>
 800cfa8:	46da      	mov	sl, fp
 800cfaa:	f8db 100c 	ldr.w	r1, [fp, #12]
 800cfae:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800cfb2:	1f32      	subs	r2, r6, #4
 800cfb4:	2a24      	cmp	r2, #36	; 0x24
 800cfb6:	60c1      	str	r1, [r0, #12]
 800cfb8:	6088      	str	r0, [r1, #8]
 800cfba:	f200 80a1 	bhi.w	800d100 <_realloc_r+0x31c>
 800cfbe:	2a13      	cmp	r2, #19
 800cfc0:	6829      	ldr	r1, [r5, #0]
 800cfc2:	f240 809b 	bls.w	800d0fc <_realloc_r+0x318>
 800cfc6:	f8cb 1008 	str.w	r1, [fp, #8]
 800cfca:	6869      	ldr	r1, [r5, #4]
 800cfcc:	f8cb 100c 	str.w	r1, [fp, #12]
 800cfd0:	2a1b      	cmp	r2, #27
 800cfd2:	68a9      	ldr	r1, [r5, #8]
 800cfd4:	f200 809b 	bhi.w	800d10e <_realloc_r+0x32a>
 800cfd8:	f10b 0210 	add.w	r2, fp, #16
 800cfdc:	3508      	adds	r5, #8
 800cfde:	6011      	str	r1, [r2, #0]
 800cfe0:	6869      	ldr	r1, [r5, #4]
 800cfe2:	6051      	str	r1, [r2, #4]
 800cfe4:	68a9      	ldr	r1, [r5, #8]
 800cfe6:	6091      	str	r1, [r2, #8]
 800cfe8:	eb0b 0104 	add.w	r1, fp, r4
 800cfec:	eba9 0204 	sub.w	r2, r9, r4
 800cff0:	f042 0201 	orr.w	r2, r2, #1
 800cff4:	6099      	str	r1, [r3, #8]
 800cff6:	604a      	str	r2, [r1, #4]
 800cff8:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	431c      	orrs	r4, r3
 800d002:	4640      	mov	r0, r8
 800d004:	f8cb 4004 	str.w	r4, [fp, #4]
 800d008:	f7fd feb0 	bl	800ad6c <__malloc_unlock>
 800d00c:	e78e      	b.n	800cf2c <_realloc_r+0x148>
 800d00e:	07d3      	lsls	r3, r2, #31
 800d010:	f53f af15 	bmi.w	800ce3e <_realloc_r+0x5a>
 800d014:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800d018:	eba7 0b03 	sub.w	fp, r7, r3
 800d01c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800d020:	f022 0203 	bic.w	r2, r2, #3
 800d024:	4410      	add	r0, r2
 800d026:	1983      	adds	r3, r0, r6
 800d028:	428b      	cmp	r3, r1
 800d02a:	f6ff af45 	blt.w	800ceb8 <_realloc_r+0xd4>
 800d02e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800d032:	46da      	mov	sl, fp
 800d034:	60ca      	str	r2, [r1, #12]
 800d036:	6091      	str	r1, [r2, #8]
 800d038:	e742      	b.n	800cec0 <_realloc_r+0xdc>
 800d03a:	6001      	str	r1, [r0, #0]
 800d03c:	686b      	ldr	r3, [r5, #4]
 800d03e:	6043      	str	r3, [r0, #4]
 800d040:	2a1b      	cmp	r2, #27
 800d042:	d83a      	bhi.n	800d0ba <_realloc_r+0x2d6>
 800d044:	f105 0208 	add.w	r2, r5, #8
 800d048:	f100 0308 	add.w	r3, r0, #8
 800d04c:	68a9      	ldr	r1, [r5, #8]
 800d04e:	e710      	b.n	800ce72 <_realloc_r+0x8e>
 800d050:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d054:	f023 0303 	bic.w	r3, r3, #3
 800d058:	441e      	add	r6, r3
 800d05a:	eb07 0906 	add.w	r9, r7, r6
 800d05e:	e753      	b.n	800cf08 <_realloc_r+0x124>
 800d060:	4652      	mov	r2, sl
 800d062:	e749      	b.n	800cef8 <_realloc_r+0x114>
 800d064:	4629      	mov	r1, r5
 800d066:	4650      	mov	r0, sl
 800d068:	461e      	mov	r6, r3
 800d06a:	465f      	mov	r7, fp
 800d06c:	f7ff fe40 	bl	800ccf0 <memmove>
 800d070:	4655      	mov	r5, sl
 800d072:	e749      	b.n	800cf08 <_realloc_r+0x124>
 800d074:	4629      	mov	r1, r5
 800d076:	f7ff fe3b 	bl	800ccf0 <memmove>
 800d07a:	e6ff      	b.n	800ce7c <_realloc_r+0x98>
 800d07c:	4427      	add	r7, r4
 800d07e:	eba9 0904 	sub.w	r9, r9, r4
 800d082:	f049 0201 	orr.w	r2, r9, #1
 800d086:	609f      	str	r7, [r3, #8]
 800d088:	607a      	str	r2, [r7, #4]
 800d08a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	431c      	orrs	r4, r3
 800d094:	4640      	mov	r0, r8
 800d096:	f845 4c04 	str.w	r4, [r5, #-4]
 800d09a:	f7fd fe67 	bl	800ad6c <__malloc_unlock>
 800d09e:	46aa      	mov	sl, r5
 800d0a0:	e744      	b.n	800cf2c <_realloc_r+0x148>
 800d0a2:	f8cb 1010 	str.w	r1, [fp, #16]
 800d0a6:	68e9      	ldr	r1, [r5, #12]
 800d0a8:	f8cb 1014 	str.w	r1, [fp, #20]
 800d0ac:	2a24      	cmp	r2, #36	; 0x24
 800d0ae:	d010      	beq.n	800d0d2 <_realloc_r+0x2ee>
 800d0b0:	6929      	ldr	r1, [r5, #16]
 800d0b2:	f10b 0218 	add.w	r2, fp, #24
 800d0b6:	3510      	adds	r5, #16
 800d0b8:	e71e      	b.n	800cef8 <_realloc_r+0x114>
 800d0ba:	68ab      	ldr	r3, [r5, #8]
 800d0bc:	6083      	str	r3, [r0, #8]
 800d0be:	68eb      	ldr	r3, [r5, #12]
 800d0c0:	60c3      	str	r3, [r0, #12]
 800d0c2:	2a24      	cmp	r2, #36	; 0x24
 800d0c4:	d010      	beq.n	800d0e8 <_realloc_r+0x304>
 800d0c6:	f105 0210 	add.w	r2, r5, #16
 800d0ca:	f100 0310 	add.w	r3, r0, #16
 800d0ce:	6929      	ldr	r1, [r5, #16]
 800d0d0:	e6cf      	b.n	800ce72 <_realloc_r+0x8e>
 800d0d2:	692a      	ldr	r2, [r5, #16]
 800d0d4:	f8cb 2018 	str.w	r2, [fp, #24]
 800d0d8:	696a      	ldr	r2, [r5, #20]
 800d0da:	f8cb 201c 	str.w	r2, [fp, #28]
 800d0de:	69a9      	ldr	r1, [r5, #24]
 800d0e0:	f10b 0220 	add.w	r2, fp, #32
 800d0e4:	3518      	adds	r5, #24
 800d0e6:	e707      	b.n	800cef8 <_realloc_r+0x114>
 800d0e8:	692b      	ldr	r3, [r5, #16]
 800d0ea:	6103      	str	r3, [r0, #16]
 800d0ec:	696b      	ldr	r3, [r5, #20]
 800d0ee:	6143      	str	r3, [r0, #20]
 800d0f0:	69a9      	ldr	r1, [r5, #24]
 800d0f2:	f105 0218 	add.w	r2, r5, #24
 800d0f6:	f100 0318 	add.w	r3, r0, #24
 800d0fa:	e6ba      	b.n	800ce72 <_realloc_r+0x8e>
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	e76e      	b.n	800cfde <_realloc_r+0x1fa>
 800d100:	4629      	mov	r1, r5
 800d102:	4650      	mov	r0, sl
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	f7ff fdf3 	bl	800ccf0 <memmove>
 800d10a:	9b01      	ldr	r3, [sp, #4]
 800d10c:	e76c      	b.n	800cfe8 <_realloc_r+0x204>
 800d10e:	f8cb 1010 	str.w	r1, [fp, #16]
 800d112:	68e9      	ldr	r1, [r5, #12]
 800d114:	f8cb 1014 	str.w	r1, [fp, #20]
 800d118:	2a24      	cmp	r2, #36	; 0x24
 800d11a:	d004      	beq.n	800d126 <_realloc_r+0x342>
 800d11c:	6929      	ldr	r1, [r5, #16]
 800d11e:	f10b 0218 	add.w	r2, fp, #24
 800d122:	3510      	adds	r5, #16
 800d124:	e75b      	b.n	800cfde <_realloc_r+0x1fa>
 800d126:	692a      	ldr	r2, [r5, #16]
 800d128:	f8cb 2018 	str.w	r2, [fp, #24]
 800d12c:	696a      	ldr	r2, [r5, #20]
 800d12e:	f8cb 201c 	str.w	r2, [fp, #28]
 800d132:	69a9      	ldr	r1, [r5, #24]
 800d134:	f10b 0220 	add.w	r2, fp, #32
 800d138:	3518      	adds	r5, #24
 800d13a:	e750      	b.n	800cfde <_realloc_r+0x1fa>
 800d13c:	20000460 	.word	0x20000460

0800d140 <cleanup_glue>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	460c      	mov	r4, r1
 800d144:	6809      	ldr	r1, [r1, #0]
 800d146:	4605      	mov	r5, r0
 800d148:	b929      	cbnz	r1, 800d156 <cleanup_glue+0x16>
 800d14a:	4621      	mov	r1, r4
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d152:	f7fd b923 	b.w	800a39c <_free_r>
 800d156:	f7ff fff3 	bl	800d140 <cleanup_glue>
 800d15a:	4621      	mov	r1, r4
 800d15c:	4628      	mov	r0, r5
 800d15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d162:	f7fd b91b 	b.w	800a39c <_free_r>
 800d166:	bf00      	nop

0800d168 <_reclaim_reent>:
 800d168:	4b20      	ldr	r3, [pc, #128]	; (800d1ec <_reclaim_reent+0x84>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4283      	cmp	r3, r0
 800d16e:	d03b      	beq.n	800d1e8 <_reclaim_reent+0x80>
 800d170:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d172:	b570      	push	{r4, r5, r6, lr}
 800d174:	4605      	mov	r5, r0
 800d176:	b18b      	cbz	r3, 800d19c <_reclaim_reent+0x34>
 800d178:	2600      	movs	r6, #0
 800d17a:	5999      	ldr	r1, [r3, r6]
 800d17c:	b139      	cbz	r1, 800d18e <_reclaim_reent+0x26>
 800d17e:	680c      	ldr	r4, [r1, #0]
 800d180:	4628      	mov	r0, r5
 800d182:	f7fd f90b 	bl	800a39c <_free_r>
 800d186:	4621      	mov	r1, r4
 800d188:	2c00      	cmp	r4, #0
 800d18a:	d1f8      	bne.n	800d17e <_reclaim_reent+0x16>
 800d18c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d18e:	3604      	adds	r6, #4
 800d190:	2e80      	cmp	r6, #128	; 0x80
 800d192:	d1f2      	bne.n	800d17a <_reclaim_reent+0x12>
 800d194:	4619      	mov	r1, r3
 800d196:	4628      	mov	r0, r5
 800d198:	f7fd f900 	bl	800a39c <_free_r>
 800d19c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d19e:	b111      	cbz	r1, 800d1a6 <_reclaim_reent+0x3e>
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f7fd f8fb 	bl	800a39c <_free_r>
 800d1a6:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800d1aa:	b151      	cbz	r1, 800d1c2 <_reclaim_reent+0x5a>
 800d1ac:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800d1b0:	42b1      	cmp	r1, r6
 800d1b2:	d006      	beq.n	800d1c2 <_reclaim_reent+0x5a>
 800d1b4:	680c      	ldr	r4, [r1, #0]
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f7fd f8f0 	bl	800a39c <_free_r>
 800d1bc:	42a6      	cmp	r6, r4
 800d1be:	4621      	mov	r1, r4
 800d1c0:	d1f8      	bne.n	800d1b4 <_reclaim_reent+0x4c>
 800d1c2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800d1c4:	b111      	cbz	r1, 800d1cc <_reclaim_reent+0x64>
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f7fd f8e8 	bl	800a39c <_free_r>
 800d1cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d1ce:	b153      	cbz	r3, 800d1e6 <_reclaim_reent+0x7e>
 800d1d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	4798      	blx	r3
 800d1d6:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800d1da:	b121      	cbz	r1, 800d1e6 <_reclaim_reent+0x7e>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1e2:	f7ff bfad 	b.w	800d140 <cleanup_glue>
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	20000030 	.word	0x20000030
	...
 800d200:	eba2 0003 	sub.w	r0, r2, r3
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop

0800d208 <strcmp>:
 800d208:	7802      	ldrb	r2, [r0, #0]
 800d20a:	780b      	ldrb	r3, [r1, #0]
 800d20c:	2a01      	cmp	r2, #1
 800d20e:	bf28      	it	cs
 800d210:	429a      	cmpcs	r2, r3
 800d212:	d1f5      	bne.n	800d200 <_reclaim_reent+0x98>
 800d214:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800d218:	ea40 0401 	orr.w	r4, r0, r1
 800d21c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d220:	f06f 0c00 	mvn.w	ip, #0
 800d224:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800d228:	b312      	cbz	r2, 800d270 <strcmp+0x68>
 800d22a:	ea80 0401 	eor.w	r4, r0, r1
 800d22e:	f014 0f07 	tst.w	r4, #7
 800d232:	d16a      	bne.n	800d30a <strcmp+0x102>
 800d234:	f000 0407 	and.w	r4, r0, #7
 800d238:	f020 0007 	bic.w	r0, r0, #7
 800d23c:	f004 0503 	and.w	r5, r4, #3
 800d240:	f021 0107 	bic.w	r1, r1, #7
 800d244:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800d248:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d24c:	f014 0f04 	tst.w	r4, #4
 800d250:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d254:	fa0c f405 	lsl.w	r4, ip, r5
 800d258:	ea62 0204 	orn	r2, r2, r4
 800d25c:	ea66 0604 	orn	r6, r6, r4
 800d260:	d00a      	beq.n	800d278 <strcmp+0x70>
 800d262:	ea63 0304 	orn	r3, r3, r4
 800d266:	4662      	mov	r2, ip
 800d268:	ea67 0704 	orn	r7, r7, r4
 800d26c:	4666      	mov	r6, ip
 800d26e:	e003      	b.n	800d278 <strcmp+0x70>
 800d270:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d274:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d278:	fa82 f54c 	uadd8	r5, r2, ip
 800d27c:	ea82 0406 	eor.w	r4, r2, r6
 800d280:	faa4 f48c 	sel	r4, r4, ip
 800d284:	bb6c      	cbnz	r4, 800d2e2 <strcmp+0xda>
 800d286:	fa83 f54c 	uadd8	r5, r3, ip
 800d28a:	ea83 0507 	eor.w	r5, r3, r7
 800d28e:	faa5 f58c 	sel	r5, r5, ip
 800d292:	b995      	cbnz	r5, 800d2ba <strcmp+0xb2>
 800d294:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800d298:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800d29c:	fa82 f54c 	uadd8	r5, r2, ip
 800d2a0:	ea82 0406 	eor.w	r4, r2, r6
 800d2a4:	faa4 f48c 	sel	r4, r4, ip
 800d2a8:	fa83 f54c 	uadd8	r5, r3, ip
 800d2ac:	ea83 0507 	eor.w	r5, r3, r7
 800d2b0:	faa5 f58c 	sel	r5, r5, ip
 800d2b4:	4325      	orrs	r5, r4
 800d2b6:	d0db      	beq.n	800d270 <strcmp+0x68>
 800d2b8:	b99c      	cbnz	r4, 800d2e2 <strcmp+0xda>
 800d2ba:	ba2d      	rev	r5, r5
 800d2bc:	fab5 f485 	clz	r4, r5
 800d2c0:	f024 0407 	bic.w	r4, r4, #7
 800d2c4:	fa27 f104 	lsr.w	r1, r7, r4
 800d2c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2cc:	fa23 f304 	lsr.w	r3, r3, r4
 800d2d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d2d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d2d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d2dc:	eba0 0001 	sub.w	r0, r0, r1
 800d2e0:	4770      	bx	lr
 800d2e2:	ba24      	rev	r4, r4
 800d2e4:	fab4 f484 	clz	r4, r4
 800d2e8:	f024 0407 	bic.w	r4, r4, #7
 800d2ec:	fa26 f104 	lsr.w	r1, r6, r4
 800d2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2f4:	fa22 f204 	lsr.w	r2, r2, r4
 800d2f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d2fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d300:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d304:	eba0 0001 	sub.w	r0, r0, r1
 800d308:	4770      	bx	lr
 800d30a:	f014 0f03 	tst.w	r4, #3
 800d30e:	d13c      	bne.n	800d38a <strcmp+0x182>
 800d310:	f010 0403 	ands.w	r4, r0, #3
 800d314:	d128      	bne.n	800d368 <strcmp+0x160>
 800d316:	f850 2b08 	ldr.w	r2, [r0], #8
 800d31a:	f851 3b08 	ldr.w	r3, [r1], #8
 800d31e:	fa82 f54c 	uadd8	r5, r2, ip
 800d322:	ea82 0503 	eor.w	r5, r2, r3
 800d326:	faa5 f58c 	sel	r5, r5, ip
 800d32a:	b95d      	cbnz	r5, 800d344 <strcmp+0x13c>
 800d32c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d334:	fa82 f54c 	uadd8	r5, r2, ip
 800d338:	ea82 0503 	eor.w	r5, r2, r3
 800d33c:	faa5 f58c 	sel	r5, r5, ip
 800d340:	2d00      	cmp	r5, #0
 800d342:	d0e8      	beq.n	800d316 <strcmp+0x10e>
 800d344:	ba2d      	rev	r5, r5
 800d346:	fab5 f485 	clz	r4, r5
 800d34a:	f024 0407 	bic.w	r4, r4, #7
 800d34e:	fa23 f104 	lsr.w	r1, r3, r4
 800d352:	fa22 f204 	lsr.w	r2, r2, r4
 800d356:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d35a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d35e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d362:	eba0 0001 	sub.w	r0, r0, r1
 800d366:	4770      	bx	lr
 800d368:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d36c:	f020 0003 	bic.w	r0, r0, #3
 800d370:	f850 2b08 	ldr.w	r2, [r0], #8
 800d374:	f021 0103 	bic.w	r1, r1, #3
 800d378:	f851 3b08 	ldr.w	r3, [r1], #8
 800d37c:	fa0c f404 	lsl.w	r4, ip, r4
 800d380:	ea62 0204 	orn	r2, r2, r4
 800d384:	ea63 0304 	orn	r3, r3, r4
 800d388:	e7c9      	b.n	800d31e <strcmp+0x116>
 800d38a:	f010 0403 	ands.w	r4, r0, #3
 800d38e:	d01a      	beq.n	800d3c6 <strcmp+0x1be>
 800d390:	eba1 0104 	sub.w	r1, r1, r4
 800d394:	f020 0003 	bic.w	r0, r0, #3
 800d398:	07e4      	lsls	r4, r4, #31
 800d39a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d39e:	d006      	beq.n	800d3ae <strcmp+0x1a6>
 800d3a0:	d20f      	bcs.n	800d3c2 <strcmp+0x1ba>
 800d3a2:	788b      	ldrb	r3, [r1, #2]
 800d3a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800d3a8:	1ae4      	subs	r4, r4, r3
 800d3aa:	d106      	bne.n	800d3ba <strcmp+0x1b2>
 800d3ac:	b12b      	cbz	r3, 800d3ba <strcmp+0x1b2>
 800d3ae:	78cb      	ldrb	r3, [r1, #3]
 800d3b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800d3b4:	1ae4      	subs	r4, r4, r3
 800d3b6:	d100      	bne.n	800d3ba <strcmp+0x1b2>
 800d3b8:	b91b      	cbnz	r3, 800d3c2 <strcmp+0x1ba>
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 800d3c0:	4770      	bx	lr
 800d3c2:	f101 0104 	add.w	r1, r1, #4
 800d3c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3ca:	07cc      	lsls	r4, r1, #31
 800d3cc:	f021 0103 	bic.w	r1, r1, #3
 800d3d0:	f851 3b04 	ldr.w	r3, [r1], #4
 800d3d4:	d848      	bhi.n	800d468 <strcmp+0x260>
 800d3d6:	d224      	bcs.n	800d422 <strcmp+0x21a>
 800d3d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800d3dc:	fa82 f54c 	uadd8	r5, r2, ip
 800d3e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800d3e4:	faa5 f58c 	sel	r5, r5, ip
 800d3e8:	d10a      	bne.n	800d400 <strcmp+0x1f8>
 800d3ea:	b965      	cbnz	r5, 800d406 <strcmp+0x1fe>
 800d3ec:	f851 3b04 	ldr.w	r3, [r1], #4
 800d3f0:	ea84 0402 	eor.w	r4, r4, r2
 800d3f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800d3f8:	d10e      	bne.n	800d418 <strcmp+0x210>
 800d3fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3fe:	e7eb      	b.n	800d3d8 <strcmp+0x1d0>
 800d400:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d404:	e055      	b.n	800d4b2 <strcmp+0x2aa>
 800d406:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d40a:	d14d      	bne.n	800d4a8 <strcmp+0x2a0>
 800d40c:	7808      	ldrb	r0, [r1, #0]
 800d40e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d412:	f1c0 0000 	rsb	r0, r0, #0
 800d416:	4770      	bx	lr
 800d418:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800d41c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800d420:	e047      	b.n	800d4b2 <strcmp+0x2aa>
 800d422:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800d426:	fa82 f54c 	uadd8	r5, r2, ip
 800d42a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800d42e:	faa5 f58c 	sel	r5, r5, ip
 800d432:	d10a      	bne.n	800d44a <strcmp+0x242>
 800d434:	b965      	cbnz	r5, 800d450 <strcmp+0x248>
 800d436:	f851 3b04 	ldr.w	r3, [r1], #4
 800d43a:	ea84 0402 	eor.w	r4, r4, r2
 800d43e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800d442:	d10c      	bne.n	800d45e <strcmp+0x256>
 800d444:	f850 2b04 	ldr.w	r2, [r0], #4
 800d448:	e7eb      	b.n	800d422 <strcmp+0x21a>
 800d44a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d44e:	e030      	b.n	800d4b2 <strcmp+0x2aa>
 800d450:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800d454:	d128      	bne.n	800d4a8 <strcmp+0x2a0>
 800d456:	880b      	ldrh	r3, [r1, #0]
 800d458:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d45c:	e029      	b.n	800d4b2 <strcmp+0x2aa>
 800d45e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d462:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800d466:	e024      	b.n	800d4b2 <strcmp+0x2aa>
 800d468:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800d46c:	fa82 f54c 	uadd8	r5, r2, ip
 800d470:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800d474:	faa5 f58c 	sel	r5, r5, ip
 800d478:	d10a      	bne.n	800d490 <strcmp+0x288>
 800d47a:	b965      	cbnz	r5, 800d496 <strcmp+0x28e>
 800d47c:	f851 3b04 	ldr.w	r3, [r1], #4
 800d480:	ea84 0402 	eor.w	r4, r4, r2
 800d484:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800d488:	d109      	bne.n	800d49e <strcmp+0x296>
 800d48a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d48e:	e7eb      	b.n	800d468 <strcmp+0x260>
 800d490:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800d494:	e00d      	b.n	800d4b2 <strcmp+0x2aa>
 800d496:	f015 0fff 	tst.w	r5, #255	; 0xff
 800d49a:	d105      	bne.n	800d4a8 <strcmp+0x2a0>
 800d49c:	680b      	ldr	r3, [r1, #0]
 800d49e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800d4a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4a6:	e004      	b.n	800d4b2 <strcmp+0x2aa>
 800d4a8:	f04f 0000 	mov.w	r0, #0
 800d4ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d4b0:	4770      	bx	lr
 800d4b2:	ba12      	rev	r2, r2
 800d4b4:	ba1b      	rev	r3, r3
 800d4b6:	fa82 f44c 	uadd8	r4, r2, ip
 800d4ba:	ea82 0403 	eor.w	r4, r2, r3
 800d4be:	faa4 f58c 	sel	r5, r4, ip
 800d4c2:	fab5 f485 	clz	r4, r5
 800d4c6:	fa02 f204 	lsl.w	r2, r2, r4
 800d4ca:	fa03 f304 	lsl.w	r3, r3, r4
 800d4ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800d4d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d4d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800d4da:	4770      	bx	lr

0800d4dc <__swbuf_r>:
 800d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4de:	460d      	mov	r5, r1
 800d4e0:	4614      	mov	r4, r2
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	b110      	cbz	r0, 800d4ec <__swbuf_r+0x10>
 800d4e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d043      	beq.n	800d574 <__swbuf_r+0x98>
 800d4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4f0:	69a3      	ldr	r3, [r4, #24]
 800d4f2:	60a3      	str	r3, [r4, #8]
 800d4f4:	b291      	uxth	r1, r2
 800d4f6:	0708      	lsls	r0, r1, #28
 800d4f8:	d51b      	bpl.n	800d532 <__swbuf_r+0x56>
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	b1cb      	cbz	r3, 800d532 <__swbuf_r+0x56>
 800d4fe:	b2ed      	uxtb	r5, r5
 800d500:	0489      	lsls	r1, r1, #18
 800d502:	462f      	mov	r7, r5
 800d504:	d522      	bpl.n	800d54c <__swbuf_r+0x70>
 800d506:	6822      	ldr	r2, [r4, #0]
 800d508:	6961      	ldr	r1, [r4, #20]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	4299      	cmp	r1, r3
 800d50e:	dd29      	ble.n	800d564 <__swbuf_r+0x88>
 800d510:	3301      	adds	r3, #1
 800d512:	68a1      	ldr	r1, [r4, #8]
 800d514:	1c50      	adds	r0, r2, #1
 800d516:	3901      	subs	r1, #1
 800d518:	60a1      	str	r1, [r4, #8]
 800d51a:	6020      	str	r0, [r4, #0]
 800d51c:	7015      	strb	r5, [r2, #0]
 800d51e:	6962      	ldr	r2, [r4, #20]
 800d520:	429a      	cmp	r2, r3
 800d522:	d02a      	beq.n	800d57a <__swbuf_r+0x9e>
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	07db      	lsls	r3, r3, #31
 800d528:	d501      	bpl.n	800d52e <__swbuf_r+0x52>
 800d52a:	2d0a      	cmp	r5, #10
 800d52c:	d025      	beq.n	800d57a <__swbuf_r+0x9e>
 800d52e:	4638      	mov	r0, r7
 800d530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d532:	4621      	mov	r1, r4
 800d534:	4630      	mov	r0, r6
 800d536:	f7fb fcdf 	bl	8008ef8 <__swsetup_r>
 800d53a:	bb20      	cbnz	r0, 800d586 <__swbuf_r+0xaa>
 800d53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	b291      	uxth	r1, r2
 800d544:	b2ed      	uxtb	r5, r5
 800d546:	0489      	lsls	r1, r1, #18
 800d548:	462f      	mov	r7, r5
 800d54a:	d4dc      	bmi.n	800d506 <__swbuf_r+0x2a>
 800d54c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d54e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d552:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800d556:	81a2      	strh	r2, [r4, #12]
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	6661      	str	r1, [r4, #100]	; 0x64
 800d55c:	6961      	ldr	r1, [r4, #20]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	4299      	cmp	r1, r3
 800d562:	dcd5      	bgt.n	800d510 <__swbuf_r+0x34>
 800d564:	4621      	mov	r1, r4
 800d566:	4630      	mov	r0, r6
 800d568:	f7fc fd62 	bl	800a030 <_fflush_r>
 800d56c:	b958      	cbnz	r0, 800d586 <__swbuf_r+0xaa>
 800d56e:	6822      	ldr	r2, [r4, #0]
 800d570:	2301      	movs	r3, #1
 800d572:	e7ce      	b.n	800d512 <__swbuf_r+0x36>
 800d574:	f7fc fe08 	bl	800a188 <__sinit>
 800d578:	e7b8      	b.n	800d4ec <__swbuf_r+0x10>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4630      	mov	r0, r6
 800d57e:	f7fc fd57 	bl	800a030 <_fflush_r>
 800d582:	2800      	cmp	r0, #0
 800d584:	d0d3      	beq.n	800d52e <__swbuf_r+0x52>
 800d586:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d58a:	e7d0      	b.n	800d52e <__swbuf_r+0x52>

0800d58c <__swbuf>:
 800d58c:	4b02      	ldr	r3, [pc, #8]	; (800d598 <__swbuf+0xc>)
 800d58e:	460a      	mov	r2, r1
 800d590:	4601      	mov	r1, r0
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	f7ff bfa2 	b.w	800d4dc <__swbuf_r>
 800d598:	20000030 	.word	0x20000030

0800d59c <_wcrtomb_r>:
 800d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59e:	4c11      	ldr	r4, [pc, #68]	; (800d5e4 <_wcrtomb_r+0x48>)
 800d5a0:	6824      	ldr	r4, [r4, #0]
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d5a8:	461f      	mov	r7, r3
 800d5aa:	b151      	cbz	r1, 800d5c2 <_wcrtomb_r+0x26>
 800d5ac:	4d0e      	ldr	r5, [pc, #56]	; (800d5e8 <_wcrtomb_r+0x4c>)
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	bf08      	it	eq
 800d5b2:	462c      	moveq	r4, r5
 800d5b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d5b8:	47a0      	blx	r4
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	d00c      	beq.n	800d5d8 <_wcrtomb_r+0x3c>
 800d5be:	b005      	add	sp, #20
 800d5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c2:	4a09      	ldr	r2, [pc, #36]	; (800d5e8 <_wcrtomb_r+0x4c>)
 800d5c4:	2c00      	cmp	r4, #0
 800d5c6:	bf08      	it	eq
 800d5c8:	4614      	moveq	r4, r2
 800d5ca:	460a      	mov	r2, r1
 800d5cc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d5d0:	a901      	add	r1, sp, #4
 800d5d2:	47a0      	blx	r4
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d1f2      	bne.n	800d5be <_wcrtomb_r+0x22>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	238a      	movs	r3, #138	; 0x8a
 800d5dc:	603a      	str	r2, [r7, #0]
 800d5de:	6033      	str	r3, [r6, #0]
 800d5e0:	b005      	add	sp, #20
 800d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e4:	20000030 	.word	0x20000030
 800d5e8:	20000870 	.word	0x20000870

0800d5ec <wcrtomb>:
 800d5ec:	4b12      	ldr	r3, [pc, #72]	; (800d638 <wcrtomb+0x4c>)
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	681c      	ldr	r4, [r3, #0]
 800d5f2:	4615      	mov	r5, r2
 800d5f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5f6:	4a11      	ldr	r2, [pc, #68]	; (800d63c <wcrtomb+0x50>)
 800d5f8:	b084      	sub	sp, #16
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	bf08      	it	eq
 800d5fe:	4613      	moveq	r3, r2
 800d600:	b150      	cbz	r0, 800d618 <wcrtomb+0x2c>
 800d602:	460a      	mov	r2, r1
 800d604:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800d608:	4601      	mov	r1, r0
 800d60a:	462b      	mov	r3, r5
 800d60c:	4620      	mov	r0, r4
 800d60e:	47b0      	blx	r6
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d00a      	beq.n	800d62a <wcrtomb+0x3e>
 800d614:	b004      	add	sp, #16
 800d616:	bd70      	pop	{r4, r5, r6, pc}
 800d618:	4602      	mov	r2, r0
 800d61a:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800d61e:	a901      	add	r1, sp, #4
 800d620:	462b      	mov	r3, r5
 800d622:	4620      	mov	r0, r4
 800d624:	47b0      	blx	r6
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d1f4      	bne.n	800d614 <wcrtomb+0x28>
 800d62a:	2200      	movs	r2, #0
 800d62c:	238a      	movs	r3, #138	; 0x8a
 800d62e:	602a      	str	r2, [r5, #0]
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	b004      	add	sp, #16
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	bf00      	nop
 800d638:	20000030 	.word	0x20000030
 800d63c:	20000870 	.word	0x20000870

0800d640 <_wctomb_r>:
 800d640:	b430      	push	{r4, r5}
 800d642:	4c06      	ldr	r4, [pc, #24]	; (800d65c <_wctomb_r+0x1c>)
 800d644:	4d06      	ldr	r5, [pc, #24]	; (800d660 <_wctomb_r+0x20>)
 800d646:	6824      	ldr	r4, [r4, #0]
 800d648:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d64a:	2c00      	cmp	r4, #0
 800d64c:	bf08      	it	eq
 800d64e:	462c      	moveq	r4, r5
 800d650:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d654:	46a4      	mov	ip, r4
 800d656:	bc30      	pop	{r4, r5}
 800d658:	4760      	bx	ip
 800d65a:	bf00      	nop
 800d65c:	20000030 	.word	0x20000030
 800d660:	20000870 	.word	0x20000870

0800d664 <__ascii_wctomb>:
 800d664:	b121      	cbz	r1, 800d670 <__ascii_wctomb+0xc>
 800d666:	2aff      	cmp	r2, #255	; 0xff
 800d668:	d804      	bhi.n	800d674 <__ascii_wctomb+0x10>
 800d66a:	700a      	strb	r2, [r1, #0]
 800d66c:	2001      	movs	r0, #1
 800d66e:	4770      	bx	lr
 800d670:	4608      	mov	r0, r1
 800d672:	4770      	bx	lr
 800d674:	238a      	movs	r3, #138	; 0x8a
 800d676:	6003      	str	r3, [r0, #0]
 800d678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop

0800d680 <__aeabi_drsub>:
 800d680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d684:	e002      	b.n	800d68c <__adddf3>
 800d686:	bf00      	nop

0800d688 <__aeabi_dsub>:
 800d688:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d68c <__adddf3>:
 800d68c:	b530      	push	{r4, r5, lr}
 800d68e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d692:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d696:	ea94 0f05 	teq	r4, r5
 800d69a:	bf08      	it	eq
 800d69c:	ea90 0f02 	teqeq	r0, r2
 800d6a0:	bf1f      	itttt	ne
 800d6a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d6a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d6aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d6ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d6b2:	f000 80e2 	beq.w	800d87a <__adddf3+0x1ee>
 800d6b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d6ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d6be:	bfb8      	it	lt
 800d6c0:	426d      	neglt	r5, r5
 800d6c2:	dd0c      	ble.n	800d6de <__adddf3+0x52>
 800d6c4:	442c      	add	r4, r5
 800d6c6:	ea80 0202 	eor.w	r2, r0, r2
 800d6ca:	ea81 0303 	eor.w	r3, r1, r3
 800d6ce:	ea82 0000 	eor.w	r0, r2, r0
 800d6d2:	ea83 0101 	eor.w	r1, r3, r1
 800d6d6:	ea80 0202 	eor.w	r2, r0, r2
 800d6da:	ea81 0303 	eor.w	r3, r1, r3
 800d6de:	2d36      	cmp	r5, #54	; 0x36
 800d6e0:	bf88      	it	hi
 800d6e2:	bd30      	pophi	{r4, r5, pc}
 800d6e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d6e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d6ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d6f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d6f4:	d002      	beq.n	800d6fc <__adddf3+0x70>
 800d6f6:	4240      	negs	r0, r0
 800d6f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d6fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800d700:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d704:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d708:	d002      	beq.n	800d710 <__adddf3+0x84>
 800d70a:	4252      	negs	r2, r2
 800d70c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d710:	ea94 0f05 	teq	r4, r5
 800d714:	f000 80a7 	beq.w	800d866 <__adddf3+0x1da>
 800d718:	f1a4 0401 	sub.w	r4, r4, #1
 800d71c:	f1d5 0e20 	rsbs	lr, r5, #32
 800d720:	db0d      	blt.n	800d73e <__adddf3+0xb2>
 800d722:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d726:	fa22 f205 	lsr.w	r2, r2, r5
 800d72a:	1880      	adds	r0, r0, r2
 800d72c:	f141 0100 	adc.w	r1, r1, #0
 800d730:	fa03 f20e 	lsl.w	r2, r3, lr
 800d734:	1880      	adds	r0, r0, r2
 800d736:	fa43 f305 	asr.w	r3, r3, r5
 800d73a:	4159      	adcs	r1, r3
 800d73c:	e00e      	b.n	800d75c <__adddf3+0xd0>
 800d73e:	f1a5 0520 	sub.w	r5, r5, #32
 800d742:	f10e 0e20 	add.w	lr, lr, #32
 800d746:	2a01      	cmp	r2, #1
 800d748:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d74c:	bf28      	it	cs
 800d74e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d752:	fa43 f305 	asr.w	r3, r3, r5
 800d756:	18c0      	adds	r0, r0, r3
 800d758:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d75c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d760:	d507      	bpl.n	800d772 <__adddf3+0xe6>
 800d762:	f04f 0e00 	mov.w	lr, #0
 800d766:	f1dc 0c00 	rsbs	ip, ip, #0
 800d76a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d76e:	eb6e 0101 	sbc.w	r1, lr, r1
 800d772:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d776:	d31b      	bcc.n	800d7b0 <__adddf3+0x124>
 800d778:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d77c:	d30c      	bcc.n	800d798 <__adddf3+0x10c>
 800d77e:	0849      	lsrs	r1, r1, #1
 800d780:	ea5f 0030 	movs.w	r0, r0, rrx
 800d784:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d788:	f104 0401 	add.w	r4, r4, #1
 800d78c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d790:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800d794:	f080 809a 	bcs.w	800d8cc <__adddf3+0x240>
 800d798:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800d79c:	bf08      	it	eq
 800d79e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d7a2:	f150 0000 	adcs.w	r0, r0, #0
 800d7a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d7aa:	ea41 0105 	orr.w	r1, r1, r5
 800d7ae:	bd30      	pop	{r4, r5, pc}
 800d7b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d7b4:	4140      	adcs	r0, r0
 800d7b6:	eb41 0101 	adc.w	r1, r1, r1
 800d7ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d7be:	f1a4 0401 	sub.w	r4, r4, #1
 800d7c2:	d1e9      	bne.n	800d798 <__adddf3+0x10c>
 800d7c4:	f091 0f00 	teq	r1, #0
 800d7c8:	bf04      	itt	eq
 800d7ca:	4601      	moveq	r1, r0
 800d7cc:	2000      	moveq	r0, #0
 800d7ce:	fab1 f381 	clz	r3, r1
 800d7d2:	bf08      	it	eq
 800d7d4:	3320      	addeq	r3, #32
 800d7d6:	f1a3 030b 	sub.w	r3, r3, #11
 800d7da:	f1b3 0220 	subs.w	r2, r3, #32
 800d7de:	da0c      	bge.n	800d7fa <__adddf3+0x16e>
 800d7e0:	320c      	adds	r2, #12
 800d7e2:	dd08      	ble.n	800d7f6 <__adddf3+0x16a>
 800d7e4:	f102 0c14 	add.w	ip, r2, #20
 800d7e8:	f1c2 020c 	rsb	r2, r2, #12
 800d7ec:	fa01 f00c 	lsl.w	r0, r1, ip
 800d7f0:	fa21 f102 	lsr.w	r1, r1, r2
 800d7f4:	e00c      	b.n	800d810 <__adddf3+0x184>
 800d7f6:	f102 0214 	add.w	r2, r2, #20
 800d7fa:	bfd8      	it	le
 800d7fc:	f1c2 0c20 	rsble	ip, r2, #32
 800d800:	fa01 f102 	lsl.w	r1, r1, r2
 800d804:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d808:	bfdc      	itt	le
 800d80a:	ea41 010c 	orrle.w	r1, r1, ip
 800d80e:	4090      	lslle	r0, r2
 800d810:	1ae4      	subs	r4, r4, r3
 800d812:	bfa2      	ittt	ge
 800d814:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d818:	4329      	orrge	r1, r5
 800d81a:	bd30      	popge	{r4, r5, pc}
 800d81c:	ea6f 0404 	mvn.w	r4, r4
 800d820:	3c1f      	subs	r4, #31
 800d822:	da1c      	bge.n	800d85e <__adddf3+0x1d2>
 800d824:	340c      	adds	r4, #12
 800d826:	dc0e      	bgt.n	800d846 <__adddf3+0x1ba>
 800d828:	f104 0414 	add.w	r4, r4, #20
 800d82c:	f1c4 0220 	rsb	r2, r4, #32
 800d830:	fa20 f004 	lsr.w	r0, r0, r4
 800d834:	fa01 f302 	lsl.w	r3, r1, r2
 800d838:	ea40 0003 	orr.w	r0, r0, r3
 800d83c:	fa21 f304 	lsr.w	r3, r1, r4
 800d840:	ea45 0103 	orr.w	r1, r5, r3
 800d844:	bd30      	pop	{r4, r5, pc}
 800d846:	f1c4 040c 	rsb	r4, r4, #12
 800d84a:	f1c4 0220 	rsb	r2, r4, #32
 800d84e:	fa20 f002 	lsr.w	r0, r0, r2
 800d852:	fa01 f304 	lsl.w	r3, r1, r4
 800d856:	ea40 0003 	orr.w	r0, r0, r3
 800d85a:	4629      	mov	r1, r5
 800d85c:	bd30      	pop	{r4, r5, pc}
 800d85e:	fa21 f004 	lsr.w	r0, r1, r4
 800d862:	4629      	mov	r1, r5
 800d864:	bd30      	pop	{r4, r5, pc}
 800d866:	f094 0f00 	teq	r4, #0
 800d86a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800d86e:	bf06      	itte	eq
 800d870:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800d874:	3401      	addeq	r4, #1
 800d876:	3d01      	subne	r5, #1
 800d878:	e74e      	b.n	800d718 <__adddf3+0x8c>
 800d87a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d87e:	bf18      	it	ne
 800d880:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d884:	d029      	beq.n	800d8da <__adddf3+0x24e>
 800d886:	ea94 0f05 	teq	r4, r5
 800d88a:	bf08      	it	eq
 800d88c:	ea90 0f02 	teqeq	r0, r2
 800d890:	d005      	beq.n	800d89e <__adddf3+0x212>
 800d892:	ea54 0c00 	orrs.w	ip, r4, r0
 800d896:	bf04      	itt	eq
 800d898:	4619      	moveq	r1, r3
 800d89a:	4610      	moveq	r0, r2
 800d89c:	bd30      	pop	{r4, r5, pc}
 800d89e:	ea91 0f03 	teq	r1, r3
 800d8a2:	bf1e      	ittt	ne
 800d8a4:	2100      	movne	r1, #0
 800d8a6:	2000      	movne	r0, #0
 800d8a8:	bd30      	popne	{r4, r5, pc}
 800d8aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d8ae:	d105      	bne.n	800d8bc <__adddf3+0x230>
 800d8b0:	0040      	lsls	r0, r0, #1
 800d8b2:	4149      	adcs	r1, r1
 800d8b4:	bf28      	it	cs
 800d8b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800d8ba:	bd30      	pop	{r4, r5, pc}
 800d8bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800d8c0:	bf3c      	itt	cc
 800d8c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800d8c6:	bd30      	popcc	{r4, r5, pc}
 800d8c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d8cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800d8d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8d4:	f04f 0000 	mov.w	r0, #0
 800d8d8:	bd30      	pop	{r4, r5, pc}
 800d8da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d8de:	bf1a      	itte	ne
 800d8e0:	4619      	movne	r1, r3
 800d8e2:	4610      	movne	r0, r2
 800d8e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d8e8:	bf1c      	itt	ne
 800d8ea:	460b      	movne	r3, r1
 800d8ec:	4602      	movne	r2, r0
 800d8ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d8f2:	bf06      	itte	eq
 800d8f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d8f8:	ea91 0f03 	teqeq	r1, r3
 800d8fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800d900:	bd30      	pop	{r4, r5, pc}
 800d902:	bf00      	nop

0800d904 <__aeabi_ui2d>:
 800d904:	f090 0f00 	teq	r0, #0
 800d908:	bf04      	itt	eq
 800d90a:	2100      	moveq	r1, #0
 800d90c:	4770      	bxeq	lr
 800d90e:	b530      	push	{r4, r5, lr}
 800d910:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d914:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d918:	f04f 0500 	mov.w	r5, #0
 800d91c:	f04f 0100 	mov.w	r1, #0
 800d920:	e750      	b.n	800d7c4 <__adddf3+0x138>
 800d922:	bf00      	nop

0800d924 <__aeabi_i2d>:
 800d924:	f090 0f00 	teq	r0, #0
 800d928:	bf04      	itt	eq
 800d92a:	2100      	moveq	r1, #0
 800d92c:	4770      	bxeq	lr
 800d92e:	b530      	push	{r4, r5, lr}
 800d930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d938:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800d93c:	bf48      	it	mi
 800d93e:	4240      	negmi	r0, r0
 800d940:	f04f 0100 	mov.w	r1, #0
 800d944:	e73e      	b.n	800d7c4 <__adddf3+0x138>
 800d946:	bf00      	nop

0800d948 <__aeabi_f2d>:
 800d948:	0042      	lsls	r2, r0, #1
 800d94a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d94e:	ea4f 0131 	mov.w	r1, r1, rrx
 800d952:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d956:	bf1f      	itttt	ne
 800d958:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800d95c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d960:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800d964:	4770      	bxne	lr
 800d966:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800d96a:	bf08      	it	eq
 800d96c:	4770      	bxeq	lr
 800d96e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800d972:	bf04      	itt	eq
 800d974:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800d978:	4770      	bxeq	lr
 800d97a:	b530      	push	{r4, r5, lr}
 800d97c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800d980:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d988:	e71c      	b.n	800d7c4 <__adddf3+0x138>
 800d98a:	bf00      	nop

0800d98c <__aeabi_ul2d>:
 800d98c:	ea50 0201 	orrs.w	r2, r0, r1
 800d990:	bf08      	it	eq
 800d992:	4770      	bxeq	lr
 800d994:	b530      	push	{r4, r5, lr}
 800d996:	f04f 0500 	mov.w	r5, #0
 800d99a:	e00a      	b.n	800d9b2 <__aeabi_l2d+0x16>

0800d99c <__aeabi_l2d>:
 800d99c:	ea50 0201 	orrs.w	r2, r0, r1
 800d9a0:	bf08      	it	eq
 800d9a2:	4770      	bxeq	lr
 800d9a4:	b530      	push	{r4, r5, lr}
 800d9a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800d9aa:	d502      	bpl.n	800d9b2 <__aeabi_l2d+0x16>
 800d9ac:	4240      	negs	r0, r0
 800d9ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d9b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d9b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d9ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800d9be:	f43f aed8 	beq.w	800d772 <__adddf3+0xe6>
 800d9c2:	f04f 0203 	mov.w	r2, #3
 800d9c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d9ca:	bf18      	it	ne
 800d9cc:	3203      	addne	r2, #3
 800d9ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d9d2:	bf18      	it	ne
 800d9d4:	3203      	addne	r2, #3
 800d9d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800d9da:	f1c2 0320 	rsb	r3, r2, #32
 800d9de:	fa00 fc03 	lsl.w	ip, r0, r3
 800d9e2:	fa20 f002 	lsr.w	r0, r0, r2
 800d9e6:	fa01 fe03 	lsl.w	lr, r1, r3
 800d9ea:	ea40 000e 	orr.w	r0, r0, lr
 800d9ee:	fa21 f102 	lsr.w	r1, r1, r2
 800d9f2:	4414      	add	r4, r2
 800d9f4:	e6bd      	b.n	800d772 <__adddf3+0xe6>
 800d9f6:	bf00      	nop

0800d9f8 <__aeabi_dmul>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d9fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800da02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800da06:	bf1d      	ittte	ne
 800da08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800da0c:	ea94 0f0c 	teqne	r4, ip
 800da10:	ea95 0f0c 	teqne	r5, ip
 800da14:	f000 f8de 	bleq	800dbd4 <__aeabi_dmul+0x1dc>
 800da18:	442c      	add	r4, r5
 800da1a:	ea81 0603 	eor.w	r6, r1, r3
 800da1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800da22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800da26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800da2a:	bf18      	it	ne
 800da2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800da30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800da34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da38:	d038      	beq.n	800daac <__aeabi_dmul+0xb4>
 800da3a:	fba0 ce02 	umull	ip, lr, r0, r2
 800da3e:	f04f 0500 	mov.w	r5, #0
 800da42:	fbe1 e502 	umlal	lr, r5, r1, r2
 800da46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800da4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800da4e:	f04f 0600 	mov.w	r6, #0
 800da52:	fbe1 5603 	umlal	r5, r6, r1, r3
 800da56:	f09c 0f00 	teq	ip, #0
 800da5a:	bf18      	it	ne
 800da5c:	f04e 0e01 	orrne.w	lr, lr, #1
 800da60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800da64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800da68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800da6c:	d204      	bcs.n	800da78 <__aeabi_dmul+0x80>
 800da6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800da72:	416d      	adcs	r5, r5
 800da74:	eb46 0606 	adc.w	r6, r6, r6
 800da78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800da7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800da80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800da84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800da88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800da8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800da90:	bf88      	it	hi
 800da92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800da96:	d81e      	bhi.n	800dad6 <__aeabi_dmul+0xde>
 800da98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800da9c:	bf08      	it	eq
 800da9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800daa2:	f150 0000 	adcs.w	r0, r0, #0
 800daa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800dab0:	ea46 0101 	orr.w	r1, r6, r1
 800dab4:	ea40 0002 	orr.w	r0, r0, r2
 800dab8:	ea81 0103 	eor.w	r1, r1, r3
 800dabc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800dac0:	bfc2      	ittt	gt
 800dac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800dac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800daca:	bd70      	popgt	{r4, r5, r6, pc}
 800dacc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dad0:	f04f 0e00 	mov.w	lr, #0
 800dad4:	3c01      	subs	r4, #1
 800dad6:	f300 80ab 	bgt.w	800dc30 <__aeabi_dmul+0x238>
 800dada:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800dade:	bfde      	ittt	le
 800dae0:	2000      	movle	r0, #0
 800dae2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800dae6:	bd70      	pople	{r4, r5, r6, pc}
 800dae8:	f1c4 0400 	rsb	r4, r4, #0
 800daec:	3c20      	subs	r4, #32
 800daee:	da35      	bge.n	800db5c <__aeabi_dmul+0x164>
 800daf0:	340c      	adds	r4, #12
 800daf2:	dc1b      	bgt.n	800db2c <__aeabi_dmul+0x134>
 800daf4:	f104 0414 	add.w	r4, r4, #20
 800daf8:	f1c4 0520 	rsb	r5, r4, #32
 800dafc:	fa00 f305 	lsl.w	r3, r0, r5
 800db00:	fa20 f004 	lsr.w	r0, r0, r4
 800db04:	fa01 f205 	lsl.w	r2, r1, r5
 800db08:	ea40 0002 	orr.w	r0, r0, r2
 800db0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800db10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800db14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800db18:	fa21 f604 	lsr.w	r6, r1, r4
 800db1c:	eb42 0106 	adc.w	r1, r2, r6
 800db20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800db24:	bf08      	it	eq
 800db26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f1c4 040c 	rsb	r4, r4, #12
 800db30:	f1c4 0520 	rsb	r5, r4, #32
 800db34:	fa00 f304 	lsl.w	r3, r0, r4
 800db38:	fa20 f005 	lsr.w	r0, r0, r5
 800db3c:	fa01 f204 	lsl.w	r2, r1, r4
 800db40:	ea40 0002 	orr.w	r0, r0, r2
 800db44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800db48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800db4c:	f141 0100 	adc.w	r1, r1, #0
 800db50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800db54:	bf08      	it	eq
 800db56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800db5a:	bd70      	pop	{r4, r5, r6, pc}
 800db5c:	f1c4 0520 	rsb	r5, r4, #32
 800db60:	fa00 f205 	lsl.w	r2, r0, r5
 800db64:	ea4e 0e02 	orr.w	lr, lr, r2
 800db68:	fa20 f304 	lsr.w	r3, r0, r4
 800db6c:	fa01 f205 	lsl.w	r2, r1, r5
 800db70:	ea43 0302 	orr.w	r3, r3, r2
 800db74:	fa21 f004 	lsr.w	r0, r1, r4
 800db78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800db7c:	fa21 f204 	lsr.w	r2, r1, r4
 800db80:	ea20 0002 	bic.w	r0, r0, r2
 800db84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800db88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800db8c:	bf08      	it	eq
 800db8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	f094 0f00 	teq	r4, #0
 800db98:	d10f      	bne.n	800dbba <__aeabi_dmul+0x1c2>
 800db9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800db9e:	0040      	lsls	r0, r0, #1
 800dba0:	eb41 0101 	adc.w	r1, r1, r1
 800dba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dba8:	bf08      	it	eq
 800dbaa:	3c01      	subeq	r4, #1
 800dbac:	d0f7      	beq.n	800db9e <__aeabi_dmul+0x1a6>
 800dbae:	ea41 0106 	orr.w	r1, r1, r6
 800dbb2:	f095 0f00 	teq	r5, #0
 800dbb6:	bf18      	it	ne
 800dbb8:	4770      	bxne	lr
 800dbba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800dbbe:	0052      	lsls	r2, r2, #1
 800dbc0:	eb43 0303 	adc.w	r3, r3, r3
 800dbc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800dbc8:	bf08      	it	eq
 800dbca:	3d01      	subeq	r5, #1
 800dbcc:	d0f7      	beq.n	800dbbe <__aeabi_dmul+0x1c6>
 800dbce:	ea43 0306 	orr.w	r3, r3, r6
 800dbd2:	4770      	bx	lr
 800dbd4:	ea94 0f0c 	teq	r4, ip
 800dbd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dbdc:	bf18      	it	ne
 800dbde:	ea95 0f0c 	teqne	r5, ip
 800dbe2:	d00c      	beq.n	800dbfe <__aeabi_dmul+0x206>
 800dbe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dbe8:	bf18      	it	ne
 800dbea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dbee:	d1d1      	bne.n	800db94 <__aeabi_dmul+0x19c>
 800dbf0:	ea81 0103 	eor.w	r1, r1, r3
 800dbf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dbf8:	f04f 0000 	mov.w	r0, #0
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dc02:	bf06      	itte	eq
 800dc04:	4610      	moveq	r0, r2
 800dc06:	4619      	moveq	r1, r3
 800dc08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dc0c:	d019      	beq.n	800dc42 <__aeabi_dmul+0x24a>
 800dc0e:	ea94 0f0c 	teq	r4, ip
 800dc12:	d102      	bne.n	800dc1a <__aeabi_dmul+0x222>
 800dc14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800dc18:	d113      	bne.n	800dc42 <__aeabi_dmul+0x24a>
 800dc1a:	ea95 0f0c 	teq	r5, ip
 800dc1e:	d105      	bne.n	800dc2c <__aeabi_dmul+0x234>
 800dc20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800dc24:	bf1c      	itt	ne
 800dc26:	4610      	movne	r0, r2
 800dc28:	4619      	movne	r1, r3
 800dc2a:	d10a      	bne.n	800dc42 <__aeabi_dmul+0x24a>
 800dc2c:	ea81 0103 	eor.w	r1, r1, r3
 800dc30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dc34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dc38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc3c:	f04f 0000 	mov.w	r0, #0
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
 800dc42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dc46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}

0800dc4c <__aeabi_ddiv>:
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800dc52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800dc56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800dc5a:	bf1d      	ittte	ne
 800dc5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800dc60:	ea94 0f0c 	teqne	r4, ip
 800dc64:	ea95 0f0c 	teqne	r5, ip
 800dc68:	f000 f8a7 	bleq	800ddba <__aeabi_ddiv+0x16e>
 800dc6c:	eba4 0405 	sub.w	r4, r4, r5
 800dc70:	ea81 0e03 	eor.w	lr, r1, r3
 800dc74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800dc78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800dc7c:	f000 8088 	beq.w	800dd90 <__aeabi_ddiv+0x144>
 800dc80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dc84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800dc88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800dc8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800dc90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dc94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800dc98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800dc9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800dca0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800dca4:	429d      	cmp	r5, r3
 800dca6:	bf08      	it	eq
 800dca8:	4296      	cmpeq	r6, r2
 800dcaa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800dcae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800dcb2:	d202      	bcs.n	800dcba <__aeabi_ddiv+0x6e>
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	ea4f 0232 	mov.w	r2, r2, rrx
 800dcba:	1ab6      	subs	r6, r6, r2
 800dcbc:	eb65 0503 	sbc.w	r5, r5, r3
 800dcc0:	085b      	lsrs	r3, r3, #1
 800dcc2:	ea4f 0232 	mov.w	r2, r2, rrx
 800dcc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dcca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800dcce:	ebb6 0e02 	subs.w	lr, r6, r2
 800dcd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dcd6:	bf22      	ittt	cs
 800dcd8:	1ab6      	subcs	r6, r6, r2
 800dcda:	4675      	movcs	r5, lr
 800dcdc:	ea40 000c 	orrcs.w	r0, r0, ip
 800dce0:	085b      	lsrs	r3, r3, #1
 800dce2:	ea4f 0232 	mov.w	r2, r2, rrx
 800dce6:	ebb6 0e02 	subs.w	lr, r6, r2
 800dcea:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dcee:	bf22      	ittt	cs
 800dcf0:	1ab6      	subcs	r6, r6, r2
 800dcf2:	4675      	movcs	r5, lr
 800dcf4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800dcf8:	085b      	lsrs	r3, r3, #1
 800dcfa:	ea4f 0232 	mov.w	r2, r2, rrx
 800dcfe:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd02:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd06:	bf22      	ittt	cs
 800dd08:	1ab6      	subcs	r6, r6, r2
 800dd0a:	4675      	movcs	r5, lr
 800dd0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800dd10:	085b      	lsrs	r3, r3, #1
 800dd12:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd16:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd1e:	bf22      	ittt	cs
 800dd20:	1ab6      	subcs	r6, r6, r2
 800dd22:	4675      	movcs	r5, lr
 800dd24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800dd28:	ea55 0e06 	orrs.w	lr, r5, r6
 800dd2c:	d018      	beq.n	800dd60 <__aeabi_ddiv+0x114>
 800dd2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800dd32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800dd36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800dd3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800dd3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800dd42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800dd46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800dd4a:	d1c0      	bne.n	800dcce <__aeabi_ddiv+0x82>
 800dd4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dd50:	d10b      	bne.n	800dd6a <__aeabi_ddiv+0x11e>
 800dd52:	ea41 0100 	orr.w	r1, r1, r0
 800dd56:	f04f 0000 	mov.w	r0, #0
 800dd5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800dd5e:	e7b6      	b.n	800dcce <__aeabi_ddiv+0x82>
 800dd60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dd64:	bf04      	itt	eq
 800dd66:	4301      	orreq	r1, r0
 800dd68:	2000      	moveq	r0, #0
 800dd6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800dd6e:	bf88      	it	hi
 800dd70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800dd74:	f63f aeaf 	bhi.w	800dad6 <__aeabi_dmul+0xde>
 800dd78:	ebb5 0c03 	subs.w	ip, r5, r3
 800dd7c:	bf04      	itt	eq
 800dd7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800dd82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800dd86:	f150 0000 	adcs.w	r0, r0, #0
 800dd8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800dd94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800dd98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800dd9c:	bfc2      	ittt	gt
 800dd9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800dda2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800dda6:	bd70      	popgt	{r4, r5, r6, pc}
 800dda8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddac:	f04f 0e00 	mov.w	lr, #0
 800ddb0:	3c01      	subs	r4, #1
 800ddb2:	e690      	b.n	800dad6 <__aeabi_dmul+0xde>
 800ddb4:	ea45 0e06 	orr.w	lr, r5, r6
 800ddb8:	e68d      	b.n	800dad6 <__aeabi_dmul+0xde>
 800ddba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ddbe:	ea94 0f0c 	teq	r4, ip
 800ddc2:	bf08      	it	eq
 800ddc4:	ea95 0f0c 	teqeq	r5, ip
 800ddc8:	f43f af3b 	beq.w	800dc42 <__aeabi_dmul+0x24a>
 800ddcc:	ea94 0f0c 	teq	r4, ip
 800ddd0:	d10a      	bne.n	800dde8 <__aeabi_ddiv+0x19c>
 800ddd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ddd6:	f47f af34 	bne.w	800dc42 <__aeabi_dmul+0x24a>
 800ddda:	ea95 0f0c 	teq	r5, ip
 800ddde:	f47f af25 	bne.w	800dc2c <__aeabi_dmul+0x234>
 800dde2:	4610      	mov	r0, r2
 800dde4:	4619      	mov	r1, r3
 800dde6:	e72c      	b.n	800dc42 <__aeabi_dmul+0x24a>
 800dde8:	ea95 0f0c 	teq	r5, ip
 800ddec:	d106      	bne.n	800ddfc <__aeabi_ddiv+0x1b0>
 800ddee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ddf2:	f43f aefd 	beq.w	800dbf0 <__aeabi_dmul+0x1f8>
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	e722      	b.n	800dc42 <__aeabi_dmul+0x24a>
 800ddfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800de00:	bf18      	it	ne
 800de02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800de06:	f47f aec5 	bne.w	800db94 <__aeabi_dmul+0x19c>
 800de0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800de0e:	f47f af0d 	bne.w	800dc2c <__aeabi_dmul+0x234>
 800de12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800de16:	f47f aeeb 	bne.w	800dbf0 <__aeabi_dmul+0x1f8>
 800de1a:	e712      	b.n	800dc42 <__aeabi_dmul+0x24a>

0800de1c <__gedf2>:
 800de1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800de20:	e006      	b.n	800de30 <__cmpdf2+0x4>
 800de22:	bf00      	nop

0800de24 <__ledf2>:
 800de24:	f04f 0c01 	mov.w	ip, #1
 800de28:	e002      	b.n	800de30 <__cmpdf2+0x4>
 800de2a:	bf00      	nop

0800de2c <__cmpdf2>:
 800de2c:	f04f 0c01 	mov.w	ip, #1
 800de30:	f84d cd04 	str.w	ip, [sp, #-4]!
 800de34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800de38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800de3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800de40:	bf18      	it	ne
 800de42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800de46:	d01b      	beq.n	800de80 <__cmpdf2+0x54>
 800de48:	b001      	add	sp, #4
 800de4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800de4e:	bf0c      	ite	eq
 800de50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800de54:	ea91 0f03 	teqne	r1, r3
 800de58:	bf02      	ittt	eq
 800de5a:	ea90 0f02 	teqeq	r0, r2
 800de5e:	2000      	moveq	r0, #0
 800de60:	4770      	bxeq	lr
 800de62:	f110 0f00 	cmn.w	r0, #0
 800de66:	ea91 0f03 	teq	r1, r3
 800de6a:	bf58      	it	pl
 800de6c:	4299      	cmppl	r1, r3
 800de6e:	bf08      	it	eq
 800de70:	4290      	cmpeq	r0, r2
 800de72:	bf2c      	ite	cs
 800de74:	17d8      	asrcs	r0, r3, #31
 800de76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800de7a:	f040 0001 	orr.w	r0, r0, #1
 800de7e:	4770      	bx	lr
 800de80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800de84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800de88:	d102      	bne.n	800de90 <__cmpdf2+0x64>
 800de8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800de8e:	d107      	bne.n	800dea0 <__cmpdf2+0x74>
 800de90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800de94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800de98:	d1d6      	bne.n	800de48 <__cmpdf2+0x1c>
 800de9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800de9e:	d0d3      	beq.n	800de48 <__cmpdf2+0x1c>
 800dea0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop

0800dea8 <__aeabi_cdrcmple>:
 800dea8:	4684      	mov	ip, r0
 800deaa:	4610      	mov	r0, r2
 800deac:	4662      	mov	r2, ip
 800deae:	468c      	mov	ip, r1
 800deb0:	4619      	mov	r1, r3
 800deb2:	4663      	mov	r3, ip
 800deb4:	e000      	b.n	800deb8 <__aeabi_cdcmpeq>
 800deb6:	bf00      	nop

0800deb8 <__aeabi_cdcmpeq>:
 800deb8:	b501      	push	{r0, lr}
 800deba:	f7ff ffb7 	bl	800de2c <__cmpdf2>
 800debe:	2800      	cmp	r0, #0
 800dec0:	bf48      	it	mi
 800dec2:	f110 0f00 	cmnmi.w	r0, #0
 800dec6:	bd01      	pop	{r0, pc}

0800dec8 <__aeabi_dcmpeq>:
 800dec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800decc:	f7ff fff4 	bl	800deb8 <__aeabi_cdcmpeq>
 800ded0:	bf0c      	ite	eq
 800ded2:	2001      	moveq	r0, #1
 800ded4:	2000      	movne	r0, #0
 800ded6:	f85d fb08 	ldr.w	pc, [sp], #8
 800deda:	bf00      	nop

0800dedc <__aeabi_dcmplt>:
 800dedc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dee0:	f7ff ffea 	bl	800deb8 <__aeabi_cdcmpeq>
 800dee4:	bf34      	ite	cc
 800dee6:	2001      	movcc	r0, #1
 800dee8:	2000      	movcs	r0, #0
 800deea:	f85d fb08 	ldr.w	pc, [sp], #8
 800deee:	bf00      	nop

0800def0 <__aeabi_dcmple>:
 800def0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800def4:	f7ff ffe0 	bl	800deb8 <__aeabi_cdcmpeq>
 800def8:	bf94      	ite	ls
 800defa:	2001      	movls	r0, #1
 800defc:	2000      	movhi	r0, #0
 800defe:	f85d fb08 	ldr.w	pc, [sp], #8
 800df02:	bf00      	nop

0800df04 <__aeabi_dcmpge>:
 800df04:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df08:	f7ff ffce 	bl	800dea8 <__aeabi_cdrcmple>
 800df0c:	bf94      	ite	ls
 800df0e:	2001      	movls	r0, #1
 800df10:	2000      	movhi	r0, #0
 800df12:	f85d fb08 	ldr.w	pc, [sp], #8
 800df16:	bf00      	nop

0800df18 <__aeabi_dcmpgt>:
 800df18:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df1c:	f7ff ffc4 	bl	800dea8 <__aeabi_cdrcmple>
 800df20:	bf34      	ite	cc
 800df22:	2001      	movcc	r0, #1
 800df24:	2000      	movcs	r0, #0
 800df26:	f85d fb08 	ldr.w	pc, [sp], #8
 800df2a:	bf00      	nop

0800df2c <__aeabi_dcmpun>:
 800df2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800df30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800df34:	d102      	bne.n	800df3c <__aeabi_dcmpun+0x10>
 800df36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800df3a:	d10a      	bne.n	800df52 <__aeabi_dcmpun+0x26>
 800df3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800df40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800df44:	d102      	bne.n	800df4c <__aeabi_dcmpun+0x20>
 800df46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800df4a:	d102      	bne.n	800df52 <__aeabi_dcmpun+0x26>
 800df4c:	f04f 0000 	mov.w	r0, #0
 800df50:	4770      	bx	lr
 800df52:	f04f 0001 	mov.w	r0, #1
 800df56:	4770      	bx	lr

0800df58 <__aeabi_d2iz>:
 800df58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800df5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800df60:	d215      	bcs.n	800df8e <__aeabi_d2iz+0x36>
 800df62:	d511      	bpl.n	800df88 <__aeabi_d2iz+0x30>
 800df64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800df68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800df6c:	d912      	bls.n	800df94 <__aeabi_d2iz+0x3c>
 800df6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800df72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800df7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800df7e:	fa23 f002 	lsr.w	r0, r3, r2
 800df82:	bf18      	it	ne
 800df84:	4240      	negne	r0, r0
 800df86:	4770      	bx	lr
 800df88:	f04f 0000 	mov.w	r0, #0
 800df8c:	4770      	bx	lr
 800df8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800df92:	d105      	bne.n	800dfa0 <__aeabi_d2iz+0x48>
 800df94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800df98:	bf08      	it	eq
 800df9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800df9e:	4770      	bx	lr
 800dfa0:	f04f 0000 	mov.w	r0, #0
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <__aeabi_uldivmod>:
 800dfa8:	b953      	cbnz	r3, 800dfc0 <__aeabi_uldivmod+0x18>
 800dfaa:	b94a      	cbnz	r2, 800dfc0 <__aeabi_uldivmod+0x18>
 800dfac:	2900      	cmp	r1, #0
 800dfae:	bf08      	it	eq
 800dfb0:	2800      	cmpeq	r0, #0
 800dfb2:	bf1c      	itt	ne
 800dfb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800dfb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800dfbc:	f000 b972 	b.w	800e2a4 <__aeabi_idiv0>
 800dfc0:	f1ad 0c08 	sub.w	ip, sp, #8
 800dfc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800dfc8:	f000 f806 	bl	800dfd8 <__udivmoddi4>
 800dfcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dfd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfd4:	b004      	add	sp, #16
 800dfd6:	4770      	bx	lr

0800dfd8 <__udivmoddi4>:
 800dfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfdc:	9e08      	ldr	r6, [sp, #32]
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4688      	mov	r8, r1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d14b      	bne.n	800e07e <__udivmoddi4+0xa6>
 800dfe6:	428a      	cmp	r2, r1
 800dfe8:	4615      	mov	r5, r2
 800dfea:	d967      	bls.n	800e0bc <__udivmoddi4+0xe4>
 800dfec:	fab2 f282 	clz	r2, r2
 800dff0:	b14a      	cbz	r2, 800e006 <__udivmoddi4+0x2e>
 800dff2:	f1c2 0720 	rsb	r7, r2, #32
 800dff6:	fa01 f302 	lsl.w	r3, r1, r2
 800dffa:	fa20 f707 	lsr.w	r7, r0, r7
 800dffe:	4095      	lsls	r5, r2
 800e000:	ea47 0803 	orr.w	r8, r7, r3
 800e004:	4094      	lsls	r4, r2
 800e006:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e00a:	0c23      	lsrs	r3, r4, #16
 800e00c:	fbb8 f7fe 	udiv	r7, r8, lr
 800e010:	fa1f fc85 	uxth.w	ip, r5
 800e014:	fb0e 8817 	mls	r8, lr, r7, r8
 800e018:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e01c:	fb07 f10c 	mul.w	r1, r7, ip
 800e020:	4299      	cmp	r1, r3
 800e022:	d909      	bls.n	800e038 <__udivmoddi4+0x60>
 800e024:	18eb      	adds	r3, r5, r3
 800e026:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800e02a:	f080 811b 	bcs.w	800e264 <__udivmoddi4+0x28c>
 800e02e:	4299      	cmp	r1, r3
 800e030:	f240 8118 	bls.w	800e264 <__udivmoddi4+0x28c>
 800e034:	3f02      	subs	r7, #2
 800e036:	442b      	add	r3, r5
 800e038:	1a5b      	subs	r3, r3, r1
 800e03a:	b2a4      	uxth	r4, r4
 800e03c:	fbb3 f0fe 	udiv	r0, r3, lr
 800e040:	fb0e 3310 	mls	r3, lr, r0, r3
 800e044:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800e048:	fb00 fc0c 	mul.w	ip, r0, ip
 800e04c:	45a4      	cmp	ip, r4
 800e04e:	d909      	bls.n	800e064 <__udivmoddi4+0x8c>
 800e050:	192c      	adds	r4, r5, r4
 800e052:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e056:	f080 8107 	bcs.w	800e268 <__udivmoddi4+0x290>
 800e05a:	45a4      	cmp	ip, r4
 800e05c:	f240 8104 	bls.w	800e268 <__udivmoddi4+0x290>
 800e060:	3802      	subs	r0, #2
 800e062:	442c      	add	r4, r5
 800e064:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e068:	eba4 040c 	sub.w	r4, r4, ip
 800e06c:	2700      	movs	r7, #0
 800e06e:	b11e      	cbz	r6, 800e078 <__udivmoddi4+0xa0>
 800e070:	40d4      	lsrs	r4, r2
 800e072:	2300      	movs	r3, #0
 800e074:	e9c6 4300 	strd	r4, r3, [r6]
 800e078:	4639      	mov	r1, r7
 800e07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07e:	428b      	cmp	r3, r1
 800e080:	d909      	bls.n	800e096 <__udivmoddi4+0xbe>
 800e082:	2e00      	cmp	r6, #0
 800e084:	f000 80eb 	beq.w	800e25e <__udivmoddi4+0x286>
 800e088:	2700      	movs	r7, #0
 800e08a:	e9c6 0100 	strd	r0, r1, [r6]
 800e08e:	4638      	mov	r0, r7
 800e090:	4639      	mov	r1, r7
 800e092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e096:	fab3 f783 	clz	r7, r3
 800e09a:	2f00      	cmp	r7, #0
 800e09c:	d147      	bne.n	800e12e <__udivmoddi4+0x156>
 800e09e:	428b      	cmp	r3, r1
 800e0a0:	d302      	bcc.n	800e0a8 <__udivmoddi4+0xd0>
 800e0a2:	4282      	cmp	r2, r0
 800e0a4:	f200 80fa 	bhi.w	800e29c <__udivmoddi4+0x2c4>
 800e0a8:	1a84      	subs	r4, r0, r2
 800e0aa:	eb61 0303 	sbc.w	r3, r1, r3
 800e0ae:	2001      	movs	r0, #1
 800e0b0:	4698      	mov	r8, r3
 800e0b2:	2e00      	cmp	r6, #0
 800e0b4:	d0e0      	beq.n	800e078 <__udivmoddi4+0xa0>
 800e0b6:	e9c6 4800 	strd	r4, r8, [r6]
 800e0ba:	e7dd      	b.n	800e078 <__udivmoddi4+0xa0>
 800e0bc:	b902      	cbnz	r2, 800e0c0 <__udivmoddi4+0xe8>
 800e0be:	deff      	udf	#255	; 0xff
 800e0c0:	fab2 f282 	clz	r2, r2
 800e0c4:	2a00      	cmp	r2, #0
 800e0c6:	f040 808f 	bne.w	800e1e8 <__udivmoddi4+0x210>
 800e0ca:	1b49      	subs	r1, r1, r5
 800e0cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e0d0:	fa1f f885 	uxth.w	r8, r5
 800e0d4:	2701      	movs	r7, #1
 800e0d6:	fbb1 fcfe 	udiv	ip, r1, lr
 800e0da:	0c23      	lsrs	r3, r4, #16
 800e0dc:	fb0e 111c 	mls	r1, lr, ip, r1
 800e0e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e0e4:	fb08 f10c 	mul.w	r1, r8, ip
 800e0e8:	4299      	cmp	r1, r3
 800e0ea:	d907      	bls.n	800e0fc <__udivmoddi4+0x124>
 800e0ec:	18eb      	adds	r3, r5, r3
 800e0ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800e0f2:	d202      	bcs.n	800e0fa <__udivmoddi4+0x122>
 800e0f4:	4299      	cmp	r1, r3
 800e0f6:	f200 80cd 	bhi.w	800e294 <__udivmoddi4+0x2bc>
 800e0fa:	4684      	mov	ip, r0
 800e0fc:	1a59      	subs	r1, r3, r1
 800e0fe:	b2a3      	uxth	r3, r4
 800e100:	fbb1 f0fe 	udiv	r0, r1, lr
 800e104:	fb0e 1410 	mls	r4, lr, r0, r1
 800e108:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e10c:	fb08 f800 	mul.w	r8, r8, r0
 800e110:	45a0      	cmp	r8, r4
 800e112:	d907      	bls.n	800e124 <__udivmoddi4+0x14c>
 800e114:	192c      	adds	r4, r5, r4
 800e116:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e11a:	d202      	bcs.n	800e122 <__udivmoddi4+0x14a>
 800e11c:	45a0      	cmp	r8, r4
 800e11e:	f200 80b6 	bhi.w	800e28e <__udivmoddi4+0x2b6>
 800e122:	4618      	mov	r0, r3
 800e124:	eba4 0408 	sub.w	r4, r4, r8
 800e128:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800e12c:	e79f      	b.n	800e06e <__udivmoddi4+0x96>
 800e12e:	f1c7 0c20 	rsb	ip, r7, #32
 800e132:	40bb      	lsls	r3, r7
 800e134:	fa22 fe0c 	lsr.w	lr, r2, ip
 800e138:	ea4e 0e03 	orr.w	lr, lr, r3
 800e13c:	fa01 f407 	lsl.w	r4, r1, r7
 800e140:	fa20 f50c 	lsr.w	r5, r0, ip
 800e144:	fa21 f30c 	lsr.w	r3, r1, ip
 800e148:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800e14c:	4325      	orrs	r5, r4
 800e14e:	fbb3 f9f8 	udiv	r9, r3, r8
 800e152:	0c2c      	lsrs	r4, r5, #16
 800e154:	fb08 3319 	mls	r3, r8, r9, r3
 800e158:	fa1f fa8e 	uxth.w	sl, lr
 800e15c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800e160:	fb09 f40a 	mul.w	r4, r9, sl
 800e164:	429c      	cmp	r4, r3
 800e166:	fa02 f207 	lsl.w	r2, r2, r7
 800e16a:	fa00 f107 	lsl.w	r1, r0, r7
 800e16e:	d90b      	bls.n	800e188 <__udivmoddi4+0x1b0>
 800e170:	eb1e 0303 	adds.w	r3, lr, r3
 800e174:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800e178:	f080 8087 	bcs.w	800e28a <__udivmoddi4+0x2b2>
 800e17c:	429c      	cmp	r4, r3
 800e17e:	f240 8084 	bls.w	800e28a <__udivmoddi4+0x2b2>
 800e182:	f1a9 0902 	sub.w	r9, r9, #2
 800e186:	4473      	add	r3, lr
 800e188:	1b1b      	subs	r3, r3, r4
 800e18a:	b2ad      	uxth	r5, r5
 800e18c:	fbb3 f0f8 	udiv	r0, r3, r8
 800e190:	fb08 3310 	mls	r3, r8, r0, r3
 800e194:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800e198:	fb00 fa0a 	mul.w	sl, r0, sl
 800e19c:	45a2      	cmp	sl, r4
 800e19e:	d908      	bls.n	800e1b2 <__udivmoddi4+0x1da>
 800e1a0:	eb1e 0404 	adds.w	r4, lr, r4
 800e1a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e1a8:	d26b      	bcs.n	800e282 <__udivmoddi4+0x2aa>
 800e1aa:	45a2      	cmp	sl, r4
 800e1ac:	d969      	bls.n	800e282 <__udivmoddi4+0x2aa>
 800e1ae:	3802      	subs	r0, #2
 800e1b0:	4474      	add	r4, lr
 800e1b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800e1b6:	fba0 8902 	umull	r8, r9, r0, r2
 800e1ba:	eba4 040a 	sub.w	r4, r4, sl
 800e1be:	454c      	cmp	r4, r9
 800e1c0:	46c2      	mov	sl, r8
 800e1c2:	464b      	mov	r3, r9
 800e1c4:	d354      	bcc.n	800e270 <__udivmoddi4+0x298>
 800e1c6:	d051      	beq.n	800e26c <__udivmoddi4+0x294>
 800e1c8:	2e00      	cmp	r6, #0
 800e1ca:	d069      	beq.n	800e2a0 <__udivmoddi4+0x2c8>
 800e1cc:	ebb1 050a 	subs.w	r5, r1, sl
 800e1d0:	eb64 0403 	sbc.w	r4, r4, r3
 800e1d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 800e1d8:	40fd      	lsrs	r5, r7
 800e1da:	40fc      	lsrs	r4, r7
 800e1dc:	ea4c 0505 	orr.w	r5, ip, r5
 800e1e0:	e9c6 5400 	strd	r5, r4, [r6]
 800e1e4:	2700      	movs	r7, #0
 800e1e6:	e747      	b.n	800e078 <__udivmoddi4+0xa0>
 800e1e8:	f1c2 0320 	rsb	r3, r2, #32
 800e1ec:	fa20 f703 	lsr.w	r7, r0, r3
 800e1f0:	4095      	lsls	r5, r2
 800e1f2:	fa01 f002 	lsl.w	r0, r1, r2
 800e1f6:	fa21 f303 	lsr.w	r3, r1, r3
 800e1fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e1fe:	4338      	orrs	r0, r7
 800e200:	0c01      	lsrs	r1, r0, #16
 800e202:	fbb3 f7fe 	udiv	r7, r3, lr
 800e206:	fa1f f885 	uxth.w	r8, r5
 800e20a:	fb0e 3317 	mls	r3, lr, r7, r3
 800e20e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e212:	fb07 f308 	mul.w	r3, r7, r8
 800e216:	428b      	cmp	r3, r1
 800e218:	fa04 f402 	lsl.w	r4, r4, r2
 800e21c:	d907      	bls.n	800e22e <__udivmoddi4+0x256>
 800e21e:	1869      	adds	r1, r5, r1
 800e220:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800e224:	d22f      	bcs.n	800e286 <__udivmoddi4+0x2ae>
 800e226:	428b      	cmp	r3, r1
 800e228:	d92d      	bls.n	800e286 <__udivmoddi4+0x2ae>
 800e22a:	3f02      	subs	r7, #2
 800e22c:	4429      	add	r1, r5
 800e22e:	1acb      	subs	r3, r1, r3
 800e230:	b281      	uxth	r1, r0
 800e232:	fbb3 f0fe 	udiv	r0, r3, lr
 800e236:	fb0e 3310 	mls	r3, lr, r0, r3
 800e23a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e23e:	fb00 f308 	mul.w	r3, r0, r8
 800e242:	428b      	cmp	r3, r1
 800e244:	d907      	bls.n	800e256 <__udivmoddi4+0x27e>
 800e246:	1869      	adds	r1, r5, r1
 800e248:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800e24c:	d217      	bcs.n	800e27e <__udivmoddi4+0x2a6>
 800e24e:	428b      	cmp	r3, r1
 800e250:	d915      	bls.n	800e27e <__udivmoddi4+0x2a6>
 800e252:	3802      	subs	r0, #2
 800e254:	4429      	add	r1, r5
 800e256:	1ac9      	subs	r1, r1, r3
 800e258:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800e25c:	e73b      	b.n	800e0d6 <__udivmoddi4+0xfe>
 800e25e:	4637      	mov	r7, r6
 800e260:	4630      	mov	r0, r6
 800e262:	e709      	b.n	800e078 <__udivmoddi4+0xa0>
 800e264:	4607      	mov	r7, r0
 800e266:	e6e7      	b.n	800e038 <__udivmoddi4+0x60>
 800e268:	4618      	mov	r0, r3
 800e26a:	e6fb      	b.n	800e064 <__udivmoddi4+0x8c>
 800e26c:	4541      	cmp	r1, r8
 800e26e:	d2ab      	bcs.n	800e1c8 <__udivmoddi4+0x1f0>
 800e270:	ebb8 0a02 	subs.w	sl, r8, r2
 800e274:	eb69 020e 	sbc.w	r2, r9, lr
 800e278:	3801      	subs	r0, #1
 800e27a:	4613      	mov	r3, r2
 800e27c:	e7a4      	b.n	800e1c8 <__udivmoddi4+0x1f0>
 800e27e:	4660      	mov	r0, ip
 800e280:	e7e9      	b.n	800e256 <__udivmoddi4+0x27e>
 800e282:	4618      	mov	r0, r3
 800e284:	e795      	b.n	800e1b2 <__udivmoddi4+0x1da>
 800e286:	4667      	mov	r7, ip
 800e288:	e7d1      	b.n	800e22e <__udivmoddi4+0x256>
 800e28a:	4681      	mov	r9, r0
 800e28c:	e77c      	b.n	800e188 <__udivmoddi4+0x1b0>
 800e28e:	3802      	subs	r0, #2
 800e290:	442c      	add	r4, r5
 800e292:	e747      	b.n	800e124 <__udivmoddi4+0x14c>
 800e294:	f1ac 0c02 	sub.w	ip, ip, #2
 800e298:	442b      	add	r3, r5
 800e29a:	e72f      	b.n	800e0fc <__udivmoddi4+0x124>
 800e29c:	4638      	mov	r0, r7
 800e29e:	e708      	b.n	800e0b2 <__udivmoddi4+0xda>
 800e2a0:	4637      	mov	r7, r6
 800e2a2:	e6e9      	b.n	800e078 <__udivmoddi4+0xa0>

0800e2a4 <__aeabi_idiv0>:
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <_close>:
 800e2a8:	4b02      	ldr	r3, [pc, #8]	; (800e2b4 <_close+0xc>)
 800e2aa:	2258      	movs	r2, #88	; 0x58
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2b2:	4770      	bx	lr
 800e2b4:	2000118c 	.word	0x2000118c

0800e2b8 <_fstat>:
 800e2b8:	4b02      	ldr	r3, [pc, #8]	; (800e2c4 <_fstat+0xc>)
 800e2ba:	2258      	movs	r2, #88	; 0x58
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2c2:	4770      	bx	lr
 800e2c4:	2000118c 	.word	0x2000118c

0800e2c8 <_isatty>:
 800e2c8:	4b02      	ldr	r3, [pc, #8]	; (800e2d4 <_isatty+0xc>)
 800e2ca:	2258      	movs	r2, #88	; 0x58
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	2000118c 	.word	0x2000118c

0800e2d8 <_lseek>:
 800e2d8:	4b02      	ldr	r3, [pc, #8]	; (800e2e4 <_lseek+0xc>)
 800e2da:	2258      	movs	r2, #88	; 0x58
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2e2:	4770      	bx	lr
 800e2e4:	2000118c 	.word	0x2000118c

0800e2e8 <_read>:
 800e2e8:	4b02      	ldr	r3, [pc, #8]	; (800e2f4 <_read+0xc>)
 800e2ea:	2258      	movs	r2, #88	; 0x58
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2f2:	4770      	bx	lr
 800e2f4:	2000118c 	.word	0x2000118c

0800e2f8 <_write>:
 800e2f8:	4b02      	ldr	r3, [pc, #8]	; (800e304 <_write+0xc>)
 800e2fa:	2258      	movs	r2, #88	; 0x58
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e302:	4770      	bx	lr
 800e304:	2000118c 	.word	0x2000118c
 800e308:	00202d2e 	.word	0x00202d2e
 800e30c:	2e2e2e2d 	.word	0x2e2e2e2d
 800e310:	00000020 	.word	0x00000020
 800e314:	2e2d2e2d 	.word	0x2e2d2e2d
 800e318:	00000020 	.word	0x00000020
 800e31c:	202e2e2d 	.word	0x202e2e2d
 800e320:	00000000 	.word	0x00000000
 800e324:	0000202e 	.word	0x0000202e
 800e328:	2e2d2e2e 	.word	0x2e2d2e2e
 800e32c:	00000020 	.word	0x00000020
 800e330:	202e2d2d 	.word	0x202e2d2d
 800e334:	00000000 	.word	0x00000000
 800e338:	2e2e2e2e 	.word	0x2e2e2e2e
 800e33c:	00000020 	.word	0x00000020
 800e340:	00202e2e 	.word	0x00202e2e
 800e344:	2d2d2d2e 	.word	0x2d2d2d2e
 800e348:	00000020 	.word	0x00000020
 800e34c:	202d2e2d 	.word	0x202d2e2d
 800e350:	00000000 	.word	0x00000000
 800e354:	2e2e2d2e 	.word	0x2e2e2d2e
 800e358:	00000020 	.word	0x00000020
 800e35c:	00202d2d 	.word	0x00202d2d
 800e360:	00202e2d 	.word	0x00202e2d
 800e364:	202d2d2d 	.word	0x202d2d2d
 800e368:	00000000 	.word	0x00000000
 800e36c:	2e2d2d2e 	.word	0x2e2d2d2e
 800e370:	00000020 	.word	0x00000020
 800e374:	2d2e2d2d 	.word	0x2d2e2d2d
 800e378:	00000020 	.word	0x00000020
 800e37c:	202e2d2e 	.word	0x202e2d2e
 800e380:	00000000 	.word	0x00000000
 800e384:	202e2e2e 	.word	0x202e2e2e
 800e388:	00000000 	.word	0x00000000
 800e38c:	0000202d 	.word	0x0000202d
 800e390:	202d2e2e 	.word	0x202d2e2e
 800e394:	00000000 	.word	0x00000000
 800e398:	2d2e2e2e 	.word	0x2d2e2e2e
 800e39c:	00000020 	.word	0x00000020
 800e3a0:	202d2d2e 	.word	0x202d2d2e
 800e3a4:	00000000 	.word	0x00000000
 800e3a8:	2d2e2e2d 	.word	0x2d2e2e2d
 800e3ac:	00000020 	.word	0x00000020
 800e3b0:	2d2d2e2d 	.word	0x2d2d2e2d
 800e3b4:	00000020 	.word	0x00000020
 800e3b8:	2e2e2d2d 	.word	0x2e2e2d2d
 800e3bc:	00000020 	.word	0x00000020
 800e3c0:	00002020 	.word	0x00002020
 800e3c4:	2d2d2d2d 	.word	0x2d2d2d2d
 800e3c8:	0000202d 	.word	0x0000202d
 800e3cc:	2d2d2d2e 	.word	0x2d2d2d2e
 800e3d0:	0000202d 	.word	0x0000202d
 800e3d4:	2d2d2e2e 	.word	0x2d2d2e2e
 800e3d8:	0000202d 	.word	0x0000202d
 800e3dc:	2d2e2e2e 	.word	0x2d2e2e2e
 800e3e0:	0000202d 	.word	0x0000202d
 800e3e4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e3e8:	0000202d 	.word	0x0000202d
 800e3ec:	2e2e2e2e 	.word	0x2e2e2e2e
 800e3f0:	0000202e 	.word	0x0000202e
 800e3f4:	2d2e2d2e 	.word	0x2d2e2d2e
 800e3f8:	00202d2e 	.word	0x00202d2e
 800e3fc:	2e2e2d2d 	.word	0x2e2e2d2d
 800e400:	00202d2d 	.word	0x00202d2d
 800e404:	2e2d2d2d 	.word	0x2e2d2d2d
 800e408:	00202e2e 	.word	0x00202e2e
 800e40c:	2e2d2e2d 	.word	0x2e2d2e2d
 800e410:	00202e2d 	.word	0x00202e2d
 800e414:	2d2d2e2e 	.word	0x2d2d2e2e
 800e418:	00202e2e 	.word	0x00202e2e
 800e41c:	2e2e2e2d 	.word	0x2e2e2e2d
 800e420:	00202d2e 	.word	0x00202d2e
 800e424:	2d2d2e2e 	.word	0x2d2d2e2e
 800e428:	00202d2e 	.word	0x00202d2e
 800e42c:	2d2d2e2d 	.word	0x2d2d2e2d
 800e430:	0000202e 	.word	0x0000202e
 800e434:	2d2d2e2d 	.word	0x2d2d2e2d
 800e438:	00202d2e 	.word	0x00202d2e
 800e43c:	2d2d2d2e 	.word	0x2d2d2d2e
 800e440:	00202e2d 	.word	0x00202e2d
 800e444:	2e2e2e2d 	.word	0x2e2e2e2d
 800e448:	0000202d 	.word	0x0000202d
 800e44c:	2d2e2d2e 	.word	0x2d2e2d2e
 800e450:	0000202e 	.word	0x0000202e
 800e454:	2d2e2e2d 	.word	0x2d2e2e2d
 800e458:	0000202e 	.word	0x0000202e
 800e45c:	2e2d2d2e 	.word	0x2e2d2d2e
 800e460:	00202e2d 	.word	0x00202e2d
 800e464:	2e2e2e2e 	.word	0x2e2e2e2e
 800e468:	2e2e2e2e 	.word	0x2e2e2e2e
 800e46c:	00000020 	.word	0x00000020
 800e470:	0073250a 	.word	0x0073250a

0800e474 <clock_config>:
 800e474:	01040250 00010000 00000000 00010000     P...............
 800e484:	01010101 41432049 4f4d204e 00455352     ....I CAN MORSE.
	...
 800e4ec:	00000080 00010000 00000000              ............

0800e4f8 <DeviceDescriptor>:
 800e4f8:	01100112 40000002 0058058b 02010010     .......@..X.....
 800e508:	00000100                                ....

0800e50c <ConfigurationDescriptor>:
 800e50c:	003e0209 80000102 00040932 02020100     ..>.....2.......
 800e51c:	24050001 04011000 05060224 01000624     ...$....$...$...
 800e52c:	03810507 09ff0008 02000104 0000000a     ................
 800e53c:	02030507 07050040 40028205 00000500     ....@......@....

0800e54c <LanguageString>:
 800e54c:	04090304 00000000                       ........

0800e554 <ManufacturerString>:
 800e554:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 800e564:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 800e574:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 800e584:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 800e594:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 800e5a4:	00730000 00000000 00000000              ..s.........

0800e5b0 <ProductString>:
 800e5b0:	00490320 00460000 00580000 00200000      .I...F...X... .
 800e5c0:	00430000 00440000 00430000 00000000     ..C...D...C.....
 800e5d0:	00000000                                ....

0800e5d4 <Driver_USBD0>:
 800e5d4:	08002c2d 08002c95 08002ed1 08002f0d     -,...,......./..
 800e5e4:	08002f41 08002f75 0800317d 0800339d     A/..u/..}1...3..
 800e5f4:	08003685 080031c9 08002fd9 08003061     .6...1.../..a0..
 800e604:	080030d9 08003315 080037f5 08003821     .0...3...7..!8..
 800e614:	000020a1 00020000                       . ......

0800e61c <_global_impure_ptr>:
 800e61c:	20000038 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
 800e62c:	006e616e 33323130 37363534 62613938     nan.0123456789ab
 800e63c:	66656463 00000000 33323130 37363534     cdef....01234567
 800e64c:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
 800e65c:	0000296c 00000030                       l)..0...

0800e664 <blanks.7330>:
 800e664:	20202020 20202020 20202020 20202020                     

0800e674 <zeroes.7331>:
 800e674:	30303030 30303030 30303030 30303030     0000000000000000
 800e684:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800e694:	00000000                                ....

0800e698 <__mprec_bigtens>:
 800e698:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800e6a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800e6b8:	7f73bf3c 75154fdd                       <.s..O.u

0800e6c0 <__mprec_tens>:
 800e6c0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800e6d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800e6e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800e6f0:	00000000 412e8480 00000000 416312d0     .......A......cA
 800e700:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800e710:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800e720:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800e730:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800e740:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800e750:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800e760:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800e770:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800e780:	79d99db4 44ea7843                       ...yCx.D

0800e788 <__mprec_tinytens>:
 800e788:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800e798:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800e7a8:	64ac6f43 0ac80628                       Co.d(...

0800e7b0 <p05.6092>:
 800e7b0:	00000005 00000019 0000007d              ........}...

0800e7bc <blanks.7308>:
 800e7bc:	20202020 20202020 20202020 20202020                     

0800e7cc <zeroes.7309>:
 800e7cc:	30303030 30303030 30303030 30303030     0000000000000000
 800e7dc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800e7ec <_ctype_>:
 800e7ec:	20202000 20202020 28282020 20282828     .         ((((( 
 800e7fc:	20202020 20202020 20202020 20202020                     
 800e80c:	10108820 10101010 10101010 10101010      ...............
 800e81c:	04040410 04040404 10040404 10101010     ................
 800e82c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800e83c:	01010101 01010101 01010101 10101010     ................
 800e84c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800e85c:	02020202 02020202 02020202 10101010     ................
 800e86c:	00000020 00000000 00000000 00000000      ...............
	...
